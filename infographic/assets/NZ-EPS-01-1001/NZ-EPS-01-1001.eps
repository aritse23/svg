%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: NZ-EPS-01-1001.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Ted
%%CreationDate: 3/4/2014
%%BoundingBox: 0 0 720 540
%%HiResBoundingBox: 0 0 720 540
%%CropBox: 0 0 720 540
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">nz_assets</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-03-04T20:28:43-07:00</xap:CreateDate>
         <xap:ModifyDate>2014-03-04T20:28:46-07:00</xap:ModifyDate>
         <xap:MetadataDate>2014-03-04T20:28:46-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Q4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FUIdW04Xa2f1hDcs5iEQNW5hPU4mnQ8Pi37Yqi8VdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSnX7GBlh1EFYr&#xA;yycPBOUV2HL4Cgr/ADq5XqOtKjFXW9z5jt0ZtQtIZ1qXLWknxRJuwV45KcqKKVVjUnpTfFUXp2q6&#xA;dqUAmsp1mQqrkCquocVXkjUZeQ3HIYqi8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVWyxRSxPFKiyRSKVkjYBlZWFCCDsQRiqU6bp+h+XBPN6Yh9bg&#xA;huyCxMSEiKHavFIQ5CgbBd/5jiqndxjT/M1ktlpqwwXokF5ex+jGjlvVlIdeSMziU8q0Ynm3+UcV&#xA;TzFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;pXVtBdW8lvOgkhkHF0IqCPpxVgcGj3+h3etzXNxJNELSWa2+szE2xmDqLThzfmr8lAO/XjQ1xVON&#xA;U+qXWjvFcXAu9WtYYbi5WOeOOSIxqSLgREyRRsOZavH3HRcVT3TNVttRSWS3DcIXEbFwASxjSTpW&#xA;op6lN6b+2+KozFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FUm82WM11o07wDlPCjOsR+zIFIcow5R1BKA/bXp1GKrbbyXZWeli0s9pGThO0hJEgIYAu&#xA;qcULIWqG412698VVlktbDWo4J5IILnVIQ0cEfFBJPCWadhUBmLCRTvU0U+GKprirsVUoru1lkaOK&#xA;aOSRSwZFYEgqeLVAPY7HFVXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYqo3szQ2c8qjkyRsyrtuwGw3IG598VW+XobqHRLOO7SSO6EYM8csgmdZDuy8wSCAT8N&#xA;O2Kquo6TpmpRpHqFrFdJE6yxCVA3B0IZWUn7JBHUYqsawuIlIs56Df4LjnMK9dmLBx9JPsMVWrY3&#xA;lxwF80axKQz28XJg5XpyduPw1348fppUYqs1KC3eSxshGipyMgoAOKQ0aibbfFx6dsVReKuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZZYokMkrrHGvV2IUCu3U4&#xA;qh3Zrpo4okbiHSSSV0ZVCxuH+HkByLcaCnz+aqZYqltvca3Jqs0ckKJp8bEJIVPJ14Agq3PryNCP&#xA;Tpt1xVMsVQ8mpadEzpLdQo0f94rSKCvzBO2KoLT2a7it9QmdJJmipGYhRFWTizgbuTugrv2xVG4q&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqo3EUrmGSIgSQP6iq&#xA;32W+BkKkjcVDde3v0xVcuoiNit6Etq7pJzLRkeHNlSjex+iu9FUVHJHKgkjcOjbq6kEH5EYquxVA&#xA;a7K0WmSyBWkVSnqRR8eboWCsi8iu5B2FanoN8VXiGEwej6YWIrxMYAAAIoRtiq6KKOKJIoxxjQBV&#xA;XwA2GKrsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaZlVSzEKqirM&#xA;dgAMVQdhrWn35ItHeVR/u0RSiM08JGUIfoOKo3FXYqhUWZNUjW3ZVhdHkvEILVIoEK0YBGYsamhq&#xA;B9IVTLFUudze3C8TWzgKuGAP7yQctqnYovwsCOrd9sVROKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoYpFPqcUbfGIIzK0dSQHLL6bMOlfhbjX3xVT1O1EE8F/Ak&#xA;lVnDXaRGQ80aNouRiSocglD9noPbFWKfmTbeebzQ0fQYhG8cqyfVRye4lArVWClYgoWrFWbcgCtd&#xA;sVR3lnzTrt7pV3e6rpM1uIX42wWOjzLVhURrJPsAFPJWKmu1aYqnXlia3n02O4E4nurhRNcEtydf&#xA;UqyoQd1VK0AoPliqJubn61SC1kqhYrczIfsqAaqrdOZag26CvQ0xVWRFRQiAKigBVAoAB0AGKt4q&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVCd7l547e2Kq5BeWR1L&#xA;hUAIGwK/EzUpU9A3hiqJtbVLZGCszvI3OSR6cmagFTQAdABsMVVsVUrq5gtoHnnf04kpVuu5NBQC&#xA;tSSaAYqgNIs3s7JbcsxRC3ohypdUJqFYoFTbsFAAFAOlcVVZrK3lkSRwwdAwHF2QEMQSGCkBgSOj&#xA;YqrqoUBVFANgB0AxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;VSuLqC3C+o1Gc8Yoxu7t/Kq9ziqhoTNdwrq3qSBb2NSluwAVEBJTqqvX4tzWh7bUOKppiriQBU9M&#xA;VStFF/Kt27FrVTW0i/YNKETMCKlq1470pQ9cVRmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KrJpoYYzJNIscY6u5CgfScVS+TULq7CrpymO3ljd21SVP3UXEfCQj&#xA;mNpOVagj4ab17Yqs0ix0Oz1WSFJmutSliS7S4uGWSVomX0iUf7TKChPgvOi0U0xVUXR9ck1i1v7n&#xA;VVMFt6nK0ggaISLIqji7NLJUKychtWtd6Yqmb3sHC49KSOSS2FZY+ajiacgHO/HbxxVj9jem8vJ4&#xA;db4+uJALWFVlFsYiqOjBnHpSScn6hjQ0piqf4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FWmZVUsxCqoqzHYADucVQ6fW7xqxl7W1WtJSF9SQ/5KuG4p7sKnwpuVVw0&#xA;a3N1BdySzS3NuSYnaQgAMKEemnGPp34198VUdctNRu5Le2gYixnSeK/FEpxeIqleRDfa/l/tCqvZ&#xA;aZ6M0d1LI0lyttFbNvVBwJZmGw3ZjufYYqp3t3qP6QjgsQnGMVu/WHw8ZAeDIVPLkrJ9kihB6jbF&#xA;VB9FiuXSbUX+tXCxmHmB6SlGIZhxQ1PIoteRPtSuKtw+X9Ggkje3tI4PSPKOOIGOMMSCT6aUStVX&#xA;enYeAxVMMVdirsVdirsVdirsVdirsVdirsVdirsVYx5g8u282qW2qSym3toJEed45p45XZgYuNY/&#xA;iAqY6cSK0INQdlWTjFXYq7FXYq7FXYq7FXYq7FUNqOpWWnWrXV5II4V79STStAB12FfxxVjk+p3U&#xA;9rFrGrJLFockTFNKhiaWWV2DUE7pVQvHoGK/GeJ6DkqnN0+pR6ZpN1DBPE0DxPe2KN60xiaJkaNm&#xA;YnmUd1Zj1PHFUy03UIdQs0uoVZFcupjkADq8blHVgCRVWUg74qicVWyErGxBCkAnk3QbdT7Yql2n&#xA;eu/1i4mjWJriX1FRSW+EIiAmqxnfhWhGKovFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXnGsXVx5l84RaDL9V/R9u8hdBN+/qjmNuizIWKqSUZQwBBqBUlVmMvk3&#xA;S5bu1kkZntbIhrayZImRXFSX9Qp69WYhm/efERvUVxVPsVaVVUUUACpNBtuTUn6TireKpDreoSXF&#xA;za6Xawyz211I0eozxx8o0hVfiUuw9P42IVqEsBWgruFU2xV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoR9LsPrrXyw8byRFikniYxuyAkgMVK1AJxVRvLf0oTM&#xA;99Ktx8CQzM23Ll8CGOMIr8mNCKVNaeGKqVzrWqWZinNsdQsyHN3JD6Vs1vwAILLcyps1d6ttT3xV&#xA;HnV41or21ykp/wB1+kX7V3dOUft9rFVjS393IY2iaztKCrc19ZzUfD8HIItO4bl4UxVERRpFGkUY&#xA;4oihUXwAFBiq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FUs1a21q5mgitHgjseStdGTmZGUVqgVeIofh/aGKr9M0aGxu7y7Vy09+yvcD9jmvL4lDF3FQ1C&#xA;C5G2wG+KphirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdiq1DKXcOqiMEemwYkkU35Cg47+5xVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirXEcg2&#xA;9QCOppvTt07Yq3irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdiqnBMZULmJ4viK8ZAAdjSuxOx7YqqYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FVC9vrWyiEty/pxswQGharHoKKCcVV8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVSfWPKunatqNlfXUk4ksXV4o45OMbMjiRS6EHcMtaih&#xA;+4UVTjFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXGtDQ0PY4qxWbRPPj3CpH5giisOEY&#xA;elsrT1WILJRzt8ci8q9aE0pQYqqWWg+b0gjNx5grcNJFLMogR1AHMzRKzcaq7OKHipFPDYKtw6H5&#xA;yjUQnzGJIhFxEr2kRl9T1UbkSCFP7sMlKd69sVWR6F544H1fMqeq1rLEWSzj4i4ZCsUwUt0R258e&#xA;9ACcVWx6N+YQupOXmK2a09MiJfqS+r6hjK8i3PjRXow+E+Hb4lU606y1eCd3vNRN3G4YCExRoFPM&#xA;lSrIFP2NmrXfcU6Yq//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:8EBE5A7815A4E31184469EFD3D1A8E02</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:8FBE5A7815A4E31184469EFD3D1A8E02</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8DBE5A7815A4E31184469EFD3D1A8E02</stRef:instanceID>
            <stRef:documentID>uuid:8CBE5A7815A4E31184469EFD3D1A8E02</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>720.000000</stDim:w>
            <stDim:h>540.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Roboto-Light</stFnt:fontName>
                  <stFnt:fontFamily>Roboto</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.00000; 2011</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Roboto-Light.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Maps</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Sea</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>204</xapG:red>
                           <xapG:green>219</xapG:green>
                           <xapG:blue>229</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>River</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>147</xapG:red>
                           <xapG:green>182</xapG:green>
                           <xapG:blue>198</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Land</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>244</xapG:red>
                           <xapG:green>244</xapG:green>
                           <xapG:blue>244</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Country</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>249</xapG:red>
                           <xapG:green>241</xapG:green>
                           <xapG:blue>228</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Border</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>163</xapG:red>
                           <xapG:green>163</xapG:green>
                           <xapG:blue>163</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Marker</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>188</xapG:red>
                           <xapG:green>81</xapG:green>
                           <xapG:blue>81</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Text</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>51</xapG:red>
                           <xapG:green>51</xapG:green>
                           <xapG:blue>51</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
720 540 li
720 0 li
cp
clp
[1 0 0 1 0 0 ]ct
720 540 mo
0 540 li
0 0 li
720 0 li
720 540 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0156863 .00784314 .00784314 0 cmyk
f
434.062 111.646 mo
434.428 111.39 li
434.729 111.441 li
435.367 111.931 li
435.151 112.148 li
436.34 112.515 li
436.971 112.587 li
437.575 112.524 li
438.163 112.354 li
438.398 112.348 li
438.776 112.385 li
438.907 112.318 li
438.985 112.098 li
438.957 111.81 li
438.733 111.22 li
438.766 110.93 li
439.086 110.688 li
439.502 110.591 li
439.728 110.44 li
439.471 110.041 li
439.172 109.729 li
439.016 109.645 li
438.363 109.932 li
437.077 110.839 li
436.533 111.127 li
436.227 110.981 li
435.99 110.691 li
435.671 110.531 li
434.195 110.558 li
433.973 110.531 li
433.719 110.888 li
433.654 111.387 li
433.772 111.735 li
434.062 111.646 li
cp
436.768 94.9263 mo
437.263 94.8721 li
437.703 94.7358 li
437.964 94.4937 li
437.964 94.1216 li
437.746 93.8188 li
437.486 93.5771 li
437.365 93.3931 li
436.968 93.3687 li
436.223 93.7046 li
435.799 94.2607 li
436.365 94.9082 li
436.768 94.9263 li
cp
429.135 99.7056 mo
429.063 100.059 li
429.354 100.779 li
429.339 101.103 li
428.911 101.369 li
429.196 101.487 li
430.24 101.505 li
430.678 101.388 li
430.738 101.1 li
430.538 100.396 li
430.376 99.9961 li
429.99 99.6479 li
429.531 99.5 li
429.135 99.7056 li
cp
465.425 170.091 mo
465.2 170.359 li
464.028 171.109 li
462.722 172.259 li
462.209 172.506 li
461.244 172.835 li
460.891 173.06 li
460.432 173.506 li
460.143 173.374 li
459.783 173.313 li
459.132 173.306 li
458.637 173.385 li
458.483 173.592 li
458.577 173.91 li
458.829 174.307 li
458.349 174.424 li
457.127 174.307 li
456.682 174.378 li
455.415 174.924 li
455.563 174.128 li
455.784 173.735 li
456.069 172.824 li
457.263 171.131 li
457.415 170.709 li
457.345 170.065 li
457.069 169.716 li
456.635 169.68 li
455.57 170.306 li
455.283 170.091 li
455.187 169.601 li
455.196 169.094 li
455.46 168.019 li
456.03 167.122 li
456.889 166.5 li
458.584 166.14 li
458.761 166.208 li
458.829 166.586 li
458.95 166.708 li
459.229 166.512 li
459.527 166.226 li
459.723 166.076 li
460.403 166.19 li
460.499 166.493 li
460.418 166.944 li
460.613 167.494 li
461.361 166.85 li
461.824 166.647 li
462.027 166.976 li
462.056 167.458 li
462.176 167.805 li
462.448 168.019 li
462.928 168.094 li
463.249 168.058 li
463.684 167.929 li
464.064 167.648 li
464.229 167.176 li
464.35 167.051 li
464.625 167.133 li
464.9 167.341 li
465.021 167.583 li
464.916 168.265 li
464.927 168.384 li
465.115 168.694 li
465.314 169.163 li
465.438 169.673 li
465.425 170.091 li
cp
536.703 136.894 mo
536.236 136.597 li
535.805 136.44 li
535.438 136.386 li
534.538 136.397 li
534.156 136.304 li
533.598 135.893 li
533.227 135.798 li
532.201 135.805 li
531.706 135.75 li
531.226 135.599 li
530.898 135.394 li
530.356 134.937 li
530.004 134.8 li
530.004 134.598 li
530.402 134.286 li
530.032 134.044 li
529.355 133.875 li
522.148 133.594 li
520.994 133.4 li
521.336 133.86 li
521.482 134.184 li
521.378 134.468 li
520.994 134.8 li
520.446 134.995 li
519.146 135.104 li
518.701 135.3 li
518.006 136.143 li
517.618 136.47 li
517.091 136.597 li
516.497 136.631 li
513.579 137.299 li
513.368 137.507 li
513.294 137.846 li
513.113 138.109 li
512.672 138.515 li
512.337 139.029 li
512.006 140.097 li
511.546 140.614 li
510.328 141.14 li
510.149 141.321 li
510.062 141.603 li
509.572 142.32 li
509.577 143.07 li
509.456 143.33 li
509.152 143.648 li
508.263 144.256 li
505.997 145.369 li
505.467 145.744 li
504.763 146.092 li
502.145 146.243 li
501.269 146.424 li
500.941 146.443 li
500.741 146.536 li
500.738 146.745 li
500.758 146.951 li
500.646 147.042 li
500.471 147.096 li
500.342 147.192 li
500.211 147.238 li
500.032 147.141 li
499.716 146.705 li
499.645 146.645 li
497.726 146.645 li
497.352 146.494 li
497.109 146.276 li
496.82 146.144 li
496.325 146.243 li
496.543 146.548 li
496.67 146.954 li
496.596 147.308 li
496.219 147.462 li
495.798 147.407 li
495.422 147.269 li
494.067 146.506 li
493.89 146.322 li
494.214 146.243 li
495.93 146.243 li
494.826 145.759 li
492.102 145.469 li
490.504 144.658 li
488.517 144.428 li
486.753 143.89 li
484.904 143.648 li
483.719 143.194 li
477.871 139.813 li
477.518 140.009 li
477.318 139.921 li
477.194 139.73 li
477.056 139.613 li
476.176 139.613 li
475.82 139.489 li
475.114 138.939 li
474.776 138.814 li
473.93 138.657 li
472.166 137.971 li
471.365 137.816 li
470.649 137.486 li
469.616 135.999 li
469.047 135.599 li
468.654 135.714 li
468.807 136.125 li
469.463 136.996 li
469.861 138.415 li
469.428 138.454 li
468.965 138.566 li
468.594 138.578 li
468.444 138.315 li
468.458 137.816 li
468.42 137.459 li
468.257 137.196 li
467.864 136.996 li
467.301 136.924 li
467.105 137.156 li
466.959 137.462 li
466.539 137.614 li
466.24 137.447 li
465.994 137.133 li
465.698 136.96 li
465.25 137.214 li
464.962 136.785 li
464.795 136.358 li
464.551 136.007 li
464.032 135.798 li
463.926 135.859 li
463.814 136.004 li
463.662 136.149 li
463.43 136.216 li
462.914 136.198 li
462.764 136.137 li
462.614 135.999 li
462.565 135.856 li
462.431 135.2 li
462.477 135.097 li
462.59 134.94 li
462.668 134.764 li
462.614 134.598 li
462.493 134.543 li
462.191 134.495 li
462.035 134.401 li
461.952 134.41 li
461.806 134.453 li
461.629 134.419 li
461.433 134.202 li
461.383 133.993 li
461.425 133.772 li
461.511 133.567 li
461.617 133.4 li
461.475 133.282 li
461.211 132.958 li
461.034 132.783 li
462.402 132.575 li
463.159 132.607 li
463.737 132.892 li
464.139 133.267 li
464.627 133.63 li
465.646 134.202 li
464.73 134.468 li
464.43 134.598 li
464.916 134.966 li
465.36 135.024 li
465.795 134.97 li
466.248 135 li
466.6 135.145 li
467.643 135.798 li
467.529 135.297 li
467.177 134.93 li
466.34 134.301 li
466.094 133.948 li
465.634 133.08 li
465.342 132.692 li
464.936 132.353 li
464.445 132.036 li
463.914 131.77 li
463.43 131.604 li
462.251 131.453 li
461.975 131.262 li
462.216 130.802 li
462.451 130.763 li
462.672 130.93 li
462.818 130.986 li
462.832 130.605 li
462.718 130.361 li
462.306 130.104 li
462.216 129.895 li
462.096 129.465 li
461.558 128.552 li
461.433 128.089 li
461.319 126.918 li
461.034 125.772 li
460.756 125.24 li
460.414 124.965 li
459.413 124.589 li
459.809 124.256 li
459.766 123.749 li
459.549 123.107 li
459.413 122.375 li
459.633 122.375 li
459.769 122.696 li
459.934 122.983 li
460.153 123.216 li
460.435 123.373 li
460.297 122.99 li
460.332 122.139 li
460.235 121.776 li
459.983 121.67 li
459.592 121.619 li
459.299 121.519 li
459.325 121.277 li
459.818 120.614 li
460.25 119.844 li
460.344 119.109 li
459.818 118.562 li
459.631 118.801 li
459.299 119.111 li
458.979 119.272 li
458.836 119.069 li
458.961 118.767 li
459.199 118.446 li
459.385 118.131 li
459.325 117.841 li
459.32 117.675 li
459.413 116.744 li
459.235 115.346 li
459.117 114.958 li
458.99 114.726 li
458.53 114.245 li
458.4 113.933 li
458.438 113.177 li
458.327 112.856 li
457.661 112.409 li
456.461 112.618 li
455.824 112.348 li
455.438 112.745 li
455.666 113.664 li
455.2 113.964 li
455.232 114.291 li
454.994 114.302 li
454.642 114.118 li
454.317 113.858 li
454.243 113.622 li
454.349 113.407 li
454.371 113.195 li
454.021 112.965 li
454.456 112.352 li
454.918 111.84 li
455.286 111.598 li
456.037 111.353 li
456.418 111.147 li
456.988 110.292 li
457.131 110.15 li
457.953 110.237 li
458.255 110.138 li
458.419 109.751 li
458.352 109.267 li
458.053 109.296 li
457.661 109.478 li
457.329 109.433 li
456.938 109.088 li
456.568 108.949 li
456.155 108.976 li
455.625 109.133 li
454.898 109.611 li
454.474 109.781 li
454.11 109.642 li
453.794 109.436 li
453.381 109.381 li
453.015 109.484 li
452.807 109.751 li
452.985 109.783 li
453.406 109.932 li
452.226 110.679 li
451.813 110.601 li
451.61 109.751 li
451.704 109.454 li
451.892 109.166 li
451.992 108.863 li
451.807 108.531 li
451.486 108.45 li
450.642 108.553 li
450.307 108.435 li
450.136 108.099 li
450.229 107.845 li
450.518 107.788 li
450.897 108.035 li
451.208 108.163 li
451.286 107.778 li
451.208 107.034 li
450.987 106.266 li
450.463 106.129 li
449.801 106.118 li
449.193 105.719 li
449.826 105.141 li
449.875 104.391 li
449.541 103.65 li
449.011 103.102 li
448.242 103.8 li
447.945 103.767 li
447.341 103.302 li
447.103 103.193 li
446.995 103.102 li
446.932 103.011 li
446.813 102.779 li
446.635 102.516 li
446.511 102.279 li
446.322 102.134 li
445.35 102.303 li
444.626 102.198 li
444.036 102.198 li
443.797 102.612 li
443.884 103.74 li
444.024 104.218 li
444.278 104.611 li
444.767 104.971 li
445.853 105.304 li
446.375 105.537 li
446.91 106.142 li
446.995 106.217 li
447.119 106.474 li
447.408 106.571 li
447.746 106.617 li
447.992 106.716 li
448.135 107.379 li
447.757 108.09 li
447.543 108.87 li
448.209 109.751 li
448.031 110.043 li
448.046 110.346 li
448.196 110.648 li
448.395 110.93 li
448.538 110.791 li
449.011 110.531 li
449.149 111.251 li
448.662 111.593 li
447.194 111.931 li
447.373 111.992 li
447.543 112.076 li
447.746 112.143 li
447.992 112.148 li
447.808 112.442 li
447.501 112.569 li
447.135 112.635 li
446.778 112.747 li
447.177 112.926 li
447.637 112.984 li
448.594 112.965 li
448.156 113.461 li
447.516 113.468 li
446.816 113.364 li
446.197 113.546 li
446.568 113.821 li
446.721 114.118 li
446.816 114.429 li
446.995 114.744 li
447.296 115.01 li
448.038 115.44 li
448.395 115.727 li
448.669 116.068 li
448.875 116.411 li
449.57 118.216 li
449.698 118.452 li
449.841 118.815 li
449.811 120.357 li
449.897 120.781 li
450.407 121.667 li
450.472 122.037 li
450.746 122.82 li
450.862 123.749 li
451.041 124.181 li
451.354 124.49 li
451.807 124.589 li
451.269 124.867 li
450.748 124.801 li
450.364 124.454 li
450.207 123.873 li
450.226 123.216 li
450.136 122.908 li
449.897 122.775 li
449.491 122.835 li
449.335 122.986 li
449.239 123.18 li
449.011 123.373 li
447.875 123.815 li
446.539 124.09 li
445.236 124.057 li
444.175 123.573 li
443.723 123.131 li
443.278 122.578 li
442.935 121.949 li
442.797 121.277 li
443.167 119.233 li
443.195 118.562 li
443.117 118.131 li
442.975 117.784 li
442.764 117.497 li
441.729 116.459 li
441.49 116.344 li
441.111 116.247 li
440.481 115.821 li
440.18 115.727 li
439.919 115.775 li
438.965 116.144 li
438.815 116.103 li
438.658 115.987 li
438.479 115.924 li
437.796 116.308 li
437.302 116.441 li
436.974 116.622 li
436.613 116.744 li
436.166 116.644 li
435.788 116.135 li
436.123 114.798 li
435.771 114.126 li
435.151 113.924 li
434.225 113.84 li
433.537 113.976 li
433.654 114.465 li
434.136 115.176 li
433.765 115.394 li
433.018 115.421 li
432.354 115.563 li
432.404 114.798 li
432.176 114.126 li
431.54 112.747 li
431.34 112.747 li
430.538 115.945 li
430.258 116.274 li
430.063 116.308 li
429.901 116.105 li
429.737 115.727 li
429.603 115.167 li
429.756 114.91 li
430.044 114.717 li
430.339 114.366 li
430.433 113.483 li
429.795 113.15 li
427.958 113.147 li
426.604 112.905 li
426.145 112.965 li
425.767 113.129 li
425.457 113.353 li
425.189 113.634 li
424.941 113.964 li
424.741 113.746 li
424.688 114.052 li
424.713 114.457 li
424.677 114.811 li
424.436 114.965 li
424.075 114.798 li
423.943 114.402 li
423.915 113.153 li
423.925 112.986 li
423.791 112.875 li
423.326 112.647 li
423.175 112.415 li
423.455 112.185 li
423.875 111.962 li
424.143 111.75 li
423.634 111.643 li
422.594 111.771 li
422.349 111.75 li
422.349 111.55 li
422.833 111.118 li
423.295 110.863 li
424.336 110.44 li
424.76 110.44 li
425.176 111.244 li
425.741 111.35 li
425.604 111.601 li
425.585 111.819 li
425.695 112 li
425.94 112.148 li
426.707 111.81 li
427.127 111.926 li
427.505 112.203 li
428.142 112.348 li
426.387 107.948 li
425.938 107.222 li
425.344 106.716 li
426.564 107.098 li
427.042 107.134 li
427.757 106.917 li
429.11 106.281 li
429.25 106.124 li
428.936 105.918 li
428.588 105.921 li
427.341 106.317 li
426.535 106.272 li
426.134 106.178 li
425.841 106.018 li
425.464 105.7 li
425.325 105.618 li
425.344 105.02 li
425.258 104.624 li
424.934 104.106 li
424.941 103.719 li
425.118 103.517 li
425.727 103.205 li
425.94 102.903 li
425.714 102.688 li
425.481 102.518 li
425.226 102.394 li
424.941 102.322 li
424.941 102.104 li
425.607 102.074 li
425.674 101.578 li
425.143 100.286 li
425.902 100.534 li
426.365 101.115 li
426.959 102.503 li
427.085 102.035 li
427.151 101.511 li
427.092 101.009 li
426.621 100.229 li
426.216 99.022 li
426.145 98.6138 li
426.64 98.5439 li
429.054 98.6465 li
429.94 98.5259 li
429.235 98.3477 li
428.424 98.2563 li
427.768 98.0449 li
427.54 97.5068 li
427.598 97.1865 li
427.686 97.1582 li
427.803 97.2041 li
427.958 97.1069 li
427.972 97.1582 li
428.035 97.2227 li
428.135 97.2554 li
428.241 97.2065 li
428.316 97.0771 li
428.253 97.0225 li
428.159 96.9893 li
428.142 96.9077 li
428.316 96.5146 li
428.296 96.3486 li
427.54 96.0908 li
426.325 95.4131 li
425.382 94.5488 li
423.745 92.4941 li
423.23 92.0229 li
422.796 91.7383 li
422.49 91.3877 li
422.349 90.6953 li
422.433 90.3774 li
422.59 90.126 li
422.633 89.8569 li
422.349 89.4785 li
422.031 89.3301 li
421.286 89.3301 li
420.93 89.2793 li
420.382 89.0371 li
419.067 88.2451 li
418.712 87.8789 li
418.662 87.3496 li
418.701 86.5962 li
418.594 85.8828 li
418.113 85.4653 li
418.772 84.9355 li
419.274 84.3555 li
419.396 83.7803 li
418.915 83.2661 li
418.277 83.0884 li
416.344 82.8789 li
415.807 82.9585 li
415.586 83.2817 li
415.403 83.6597 li
415.151 83.9072 li
414.701 83.8472 li
414.488 83.6172 li
414.406 83.2603 li
414.45 82.873 li
414.603 82.5771 li
414.701 82.0811 li
414.566 80.4951 li
414.701 79.8516 li
415.022 80.1626 li
415.251 80.4834 li
415.403 80.8374 li
415.496 81.249 li
415.485 81.7842 li
415.386 82.0229 li
415.446 82.0811 li
415.916 82.0684 li
416.048 81.9712 li
416.208 81.5605 li
416.407 81.4697 li
416.586 81.5332 li
416.893 81.8018 li
417.096 81.8481 li
417.512 81.7573 li
418.274 81.4971 li
418.712 81.4697 li
418.676 81.9419 li
419.517 82.1416 li
419.314 82.6851 li
419.969 83.0454 li
420.525 83.5322 li
421.122 83.8379 li
421.929 83.6655 li
421.227 82.5771 li
421.155 82.3135 li
421.354 81.6118 li
421.327 81.249 li
421.034 80.9375 li
419.314 80.0688 li
419.624 79.999 li
419.951 79.8696 li
420.204 79.6641 li
420.311 79.3613 li
420.183 79.1104 li
419.88 78.9985 li
419.132 78.8535 li
419.552 78.6694 li
419.709 78.6328 li
418.598 78.1367 li
418.113 77.8037 li
418.421 77.6533 li
418.951 77.6709 li
420.261 77.8491 li
420.71 78.0518 li
421.095 77.0625 li
420.834 76.3701 li
419.42 75.145 li
417.893 74.1255 li
417.754 73.7744 li
418.915 73.6387 li
418.751 73.2852 li
418.061 72.2568 li
417.814 72.0415 li
417.735 71.9902 li
417.633 71.7427 li
417.512 71.6426 li
417.394 71.6333 li
417.319 71.6973 li
417.291 71.7754 li
417.313 71.8213 li
416.714 71.6973 li
416.116 71.6426 li
415.457 71.2256 li
414.385 69.2559 li
413.9 68.6084 li
414.182 68.8418 li
415.097 69.4258 li
415.919 70.1333 li
416.098 70.2241 li
416.529 69.9155 li
415.636 69.0205 li
415.916 68.6084 li
415.916 68.4272 li
415.258 68.458 li
414.62 68.4004 li
414.121 68.104 li
413.9 67.4077 li
414.079 66.7217 li
414.479 66.1318 li
414.73 65.5327 li
414.5 64.8125 li
413.595 65.4209 li
412.801 66.1289 li
412.641 66.4102 li
412.654 66.5518 li
412.611 66.6519 li
412.28 66.8091 li
412.277 66.7183 li
411.981 66.6309 li
411.589 66.582 li
411.283 66.6094 li
411.354 66.7183 li
411.505 67.0093 li
410.012 66.8394 li
409.307 66.8726 li
408.9 67.2085 li
408.704 67.0093 li
408.982 67.4688 li
409.702 67.7773 li
410.542 67.9526 li
411.19 68.0068 li
411.433 68.1333 li
411.529 68.4185 li
411.461 68.6968 li
411.19 68.8237 li
410.955 68.7329 li
410.767 68.5518 li
410.523 68.4033 li
410.104 68.4272 li
410.154 68.5576 li
410.247 68.8784 li
410.304 69.0078 li
409.973 68.9717 li
409.663 68.8721 li
409.082 68.6084 li
408.99 69.0112 li
408.787 69.4829 li
408.59 69.7969 li
408.506 69.7158 li
408.441 68.9297 li
408.345 68.5723 li
408.195 68.3154 li
407.088 67.3779 li
406.906 67.0093 li
406.987 66.6367 li
407.202 66.2676 li
407.255 65.8687 li
406.906 65.4116 li
406.611 65.5933 li
406.291 65.6538 li
405.974 65.5933 li
405.688 65.4116 li
405.063 65.6265 li
404.606 65.3301 li
404.699 64.9155 li
405.688 64.8125 li
405.134 64.1143 li
404.863 63.9268 li
405.158 63.7363 li
405.87 63.4126 li
406.211 63.8184 li
406.518 63.8184 li
406.761 63.6694 li
406.906 63.6304 li
407.033 63.9268 li
407.059 64.2529 li
407.156 64.5195 li
407.487 64.6279 li
408.704 64.311 li
408.48 63.5786 li
407.914 62.9741 li
407.194 62.5654 li
406.49 62.4141 li
404.805 62.5713 li
403.879 62.4541 li
403.473 61.9121 li
403.292 61.1982 li
402.833 60.7329 li
401.653 59.9946 li
401.147 59.4951 li
400.891 59.1538 li
400.974 58.9995 li
400.126 58.9478 li
399.68 58.9692 li
399.16 59.1963 li
398.666 59.2622 li
398.459 59.4165 li
398.42 59.5864 li
398.481 60.019 li
398.459 60.1968 li
397.86 61.1948 li
397.84 61.4673 li
397.9 61.6611 li
397.765 61.7764 li
397.151 61.8125 li
396.152 61.1045 li
396.108 60.8599 li
396.387 60.603 li
397.041 60.1968 li
397.199 59.9277 li
397.306 59.625 li
397.48 59.3623 li
397.86 59.1987 li
397.476 59.0596 li
397.276 59.0176 li
397.053 58.9995 li
396.8 58.9331 li
396.686 58.7754 li
396.6 58.5728 li
396.444 58.3794 li
396.369 58.2168 li
396.39 58.0225 li
396.34 57.8652 li
396.053 57.7988 li
395.831 57.8618 li
395.709 57.9985 li
395.638 58.1348 li
395.542 58.1982 li
394.652 58.1943 li
394.235 58.0557 li
393.926 57.4111 li
393.595 57.2607 li
393.191 57.3022 li
392.848 57.5991 li
392.52 57.1577 li
392.117 56.8574 li
391.735 56.8735 li
391.446 57.3813 li
391.482 57.8442 li
391.767 58.1768 li
392.146 58.4707 li
392.462 58.7974 li
392.398 58.939 li
392.063 59.4165 li
391.519 58.8149 li
390.959 58.6641 li
389.543 58.7974 li
388.894 58.6968 li
388.327 58.4277 li
387.833 58.0435 li
387.43 57.5991 li
387.159 57.2202 li
386.864 56.7041 li
386.728 56.1504 li
386.924 55.6812 li
387.206 55.5815 li
388.431 55.584 li
389.631 55.1641 li
389.187 54.707 li
389.101 54.4658 li
389.246 54.166 li
388.916 54.2148 li
388.031 54.583 li
388.214 54.1147 li
388.261 53.8452 li
388.23 53.585 li
388.085 53.2222 li
387.896 53.0171 li
387.649 53.0234 li
387.334 53.2764 li
387.334 53.4707 li
387.469 53.749 li
387.537 54.0938 li
387.334 54.4839 li
386.653 54.8315 li
385.924 54.9336 li
385.375 55.1343 li
385.215 55.7808 li
385.617 57.1938 li
385.691 58.0161 li
385.314 58.3794 li
384.898 58.5093 li
384.738 58.8096 li
384.648 59.1538 li
384.418 59.4165 li
384.189 59.4287 li
383.217 59.1987 li
382.891 59.1841 li
382.704 59.2051 li
382.622 59.0449 li
382.645 57.835 li
382.74 57.5356 li
382.918 57.2905 li
383.542 56.6646 li
383.626 56.3286 li
379.727 54.4351 li
378.498 53.4043 li
378.389 52.3701 li
379 52.7715 li
380.422 54.166 li
380.151 52.9414 li
379.161 51.9453 li
377.95 51.0654 li
377.002 50.1704 li
376.679 49.0239 li
376.384 47.312 li
375.949 45.8721 li
375.19 45.5576 li
375.635 46.1841 li
375.813 47.0249 li
375.734 47.8867 li
375.408 48.5737 li
375.119 48.7666 li
375.012 48.564 li
375.022 46.8799 li
374.969 46.502 li
374.809 46.1567 li
374.651 46.4497 li
374.406 46.583 li
374.111 46.5654 li
373.79 46.3931 li
373.937 46.1929 li
374.036 45.9932 li
374.192 45.5576 li
373.858 45.6123 li
373.63 45.7905 li
373.49 46.0625 li
373.409 46.3931 li
372.484 45.8203 li
372.192 45.5576 li
372.462 45.437 li
372.651 45.2642 li
372.765 45.0313 li
372.789 44.7378 li
373.273 44.9829 li
373.488 44.8018 li
373.587 44.1577 li
373.805 43.4229 li
374.03 43.3677 li
374.61 43.5405 li
374.552 43.6763 li
374.471 44.021 li
374.41 44.1577 li
374.827 44.2998 li
375.04 44.6475 li
375.154 44.9946 li
375.297 45.1548 li
375.767 45.1191 li
376.021 44.9893 li
376.139 44.7476 li
376.209 44.3564 li
376.154 42.7876 li
376.377 42.2031 li
377.224 41.7588 li
376.768 41.3506 li
376.43 41.4233 li
376.139 41.7139 li
375.806 41.9404 li
375.294 42.0186 li
371.967 41.7803 li
371.081 42.2671 li
370.169 42.4395 li
369.795 42.7568 li
369.051 42.3975 li
367.346 42.333 li
366.683 42.04 li
366.201 41.7651 li
366.067 42.0586 li
366.105 42.5239 li
366.163 42.7568 li
365.86 43.3047 li
365.663 43.5195 li
365.361 43.7583 li
367.847 44.9927 li
369.025 45.8359 li
374.994 52.3418 li
375.519 52.5688 li
375.896 52.8716 li
376.804 54.7832 li
377.346 55.4087 li
379.107 56.8813 li
379.491 57.3662 li
380.422 59.1987 li
380.817 60.6689 li
380.71 62.1689 li
380.151 63.542 li
379.207 64.6279 li
378.684 64.3984 li
378.109 64.2954 li
377.687 64.4585 li
377.622 65.0273 li
377.839 65.418 li
379.004 66.4282 li
379.691 67.1875 li
380.097 67.478 li
380.603 67.6079 li
381.145 67.5049 li
381.98 67.0996 li
382.423 67.2085 li
382.074 67.5562 li
381.044 68.1885 li
380.802 68.4272 li
380.974 68.7329 li
381.881 69.6069 li
382.201 69.8252 li
382.469 69.0688 li
382.791 68.4004 li
383.323 67.9409 li
384.219 67.8252 li
384.048 68.1523 li
383.802 68.458 li
383.217 69.0078 li
383.413 68.9932 li
383.819 69.0171 li
384.018 69.0078 li
383.018 69.9429 li
382.868 70.4326 li
383.217 71.2222 li
385.731 74.0923 li
385.967 74.2827 li
386.233 74.2378 li
386.333 73.9927 li
386.437 71.8213 li
386.383 71.8301 li
386.299 71.7427 li
386.222 71.5942 li
386.233 71.4219 li
386.508 71.1709 li
386.874 71.0347 li
387.069 70.8413 li
386.818 70.4238 li
387.38 70.0547 li
387.709 69.9067 li
387.933 69.9155 li
388.277 70.3535 li
388.474 70.457 li
388.745 70.3237 li
388.993 70.2358 li
389.32 70.1729 li
389.51 70.0332 li
389.229 69.4561 li
389.392 69.353 li
389.681 69.3774 li
390.433 69.7793 li
391.005 69.7827 li
391.476 69.5254 li
391.65 69.0078 li
391.419 68.5361 li
391.052 67.9858 li
390.935 67.4502 li
391.446 67.0093 li
391.921 68.3911 li
392.245 68.8237 li
392.252 67.7617 li
392.355 67.6079 li
392.679 67.6406 li
392.821 67.7529 li
392.85 67.9707 li
392.848 68.3154 li
393.175 68.4004 li
394.242 68.1333 li
393.766 68.7988 li
393.576 69.4106 li
393.464 69.6069 li
393.093 69.8096 li
392.903 69.7373 li
392.747 69.5977 li
392.462 69.6069 li
391.956 70.0146 li
391.831 70.5625 li
391.816 71.1372 li
391.65 71.6426 li
390.85 70.623 li
390.76 70.998 li
390.813 72.0117 li
390.749 72.2231 li
390.333 72.0996 li
390.015 71.812 li
389.741 71.4824 li
389.448 71.2222 li
389.41 71.3491 li
389.246 71.6426 li
388.681 71.4126 li
388.302 71.7939 li
388.097 72.4717 li
388.031 73.1304 li
387.814 73.6177 li
386.853 74.6768 li
386.637 75.145 li
386.818 75.6929 li
400.021 90.1626 li
401.076 91.8779 li
404.869 96.0908 li
405.802 98.9102 li
406.507 99.9326 li
407.921 99.9048 li
409.282 99.4272 li
409.862 99.0278 li
410.104 98.417 li
409.781 97.7759 li
409.183 97.2856 li
408.9 96.9321 li
409.502 96.7075 li
409.239 96.3389 li
408.818 96.3267 li
408.375 96.3755 li
408.004 96.2002 li
406.397 94.2002 li
406.173 94.0249 li
405.873 93.8496 li
405.617 93.6436 li
405.364 93.0811 li
405.034 92.894 li
404.656 92.7544 li
404.382 92.5947 li
404.157 92.2822 li
403.787 91.6328 li
403.58 91.3784 li
403.355 90.834 li
403.228 90.0654 li
402.971 89.376 li
402.365 89.0796 li
402.167 88.7744 li
400.656 87.062 li
400.781 86.5903 li
401.896 86.1035 li
402.073 85.4653 li
401.914 85.3198 li
401.629 85.1172 li
401.411 84.833 li
401.472 84.4463 li
401.675 84.4277 li
401.995 84.6123 li
402.305 84.8691 li
402.477 85.063 li
402.61 85.7983 li
402.334 86.252 li
401.254 87.062 li
402.167 87.6011 li
402.523 87.9453 li
402.861 88.8193 li
403.701 89.5337 li
403.89 89.978 li
403.915 91.1123 li
404.107 91.6509 li
404.569 91.8779 li
404.963 92.0166 li
405.469 92.3403 li
405.901 92.709 li
406.087 92.9844 li
406.372 93.1626 li
407.762 93.1963 li
408.303 93.2925 li
408.805 93.6621 li
409.129 94.0796 li
409.388 94.5122 li
410.09 95.3467 li
410.282 95.4556 li
410.604 95.4888 li
410.884 95.583 li
411.269 95.9849 li
411.505 96.0908 li
411.793 96.0938 li
412.042 96.0366 li
412.212 95.8853 li
412.28 95.6011 li
412.445 95.5405 li
413.498 95.3105 li
412.975 94.6665 li
412.658 94.4063 li
412.391 94.4004 li
412.152 94.7119 li
412.01 94.8511 li
411.793 94.9082 li
411.521 94.7871 li
411.525 94.5122 li
411.703 94.0918 li
411.396 93.7227 li
411.109 93.5474 li
410.731 93.4961 li
410.204 93.4927 li
409.813 93.3662 li
409.813 92.7339 li
409.502 92.4941 li
410.784 91.666 li
411.226 91.6841 li
411.102 92.4941 li
411.715 91.9048 li
412.035 91.7173 li
412.501 91.6934 li
412.234 92.2646 li
412.135 92.5669 li
412.099 92.894 li
412.123 93.3022 li
412.209 93.4019 li
412.397 93.396 li
412.718 93.4927 li
412.982 93.5107 li
413.234 93.4478 li
413.42 93.5327 li
413.498 93.9922 li
413.598 94.252 li
413.844 94.2607 li
414.168 94.2124 li
414.5 94.3091 li
414.349 94.4243 li
413.9 94.9082 li
414.741 94.5728 li
415.45 93.7676 li
415.838 92.7759 li
415.698 91.8779 li
416.81 92.1348 li
417.096 92.2944 li
417.438 92.7578 li
417.351 93.0215 li
416.987 93.0659 li
416.494 92.875 li
416.369 93.3047 li
416.329 93.5596 li
416.276 93.7744 li
416.098 94.0918 li
415.414 94.811 li
414.962 95.7495 li
414.809 96.4927 li
414.591 96.46 li
414.1 96.0908 li
413.242 95.8672 li
412.95 95.9849 li
413.099 96.5088 li
413.342 96.666 li
413.762 96.7925 li
414.5 96.9077 li
415.025 96.6689 li
415.606 96.2246 li
416.087 95.9673 li
416.315 96.3086 li
416.629 96.1426 li
417.33 95.6035 li
417.615 95.4888 li
418.024 95.459 li
418.438 95.356 li
418.818 95.1743 li
419.132 94.9082 li
419.238 95.1016 li
419.285 95.147 li
419.356 95.1743 li
419.527 95.3105 li
419.428 95.689 li
419.25 95.7944 li
419.004 95.8037 li
418.712 95.9092 li
417.915 96.5088 li
417.042 96.8257 li
416.672 97.0254 li
416.208 97.4067 li
415.735 97.6875 li
415.144 97.8354 li
413.9 97.9058 li
413.438 97.7578 li
413.042 97.543 li
412.722 97.6094 li
412.501 98.3076 li
412.099 98.1265 li
412.29 99.0645 li
412.936 99.5576 li
413.858 99.7295 li
415.577 99.6265 li
415.846 99.4937 li
416.208 99.2148 li
416.689 98.7134 li
416.889 98.7017 li
417.807 99.1665 li
417.854 99.3335 li
417.205 99.8057 li
417.089 100.141 li
417.334 100.468 li
417.686 100.788 li
417.915 101.103 li
417.431 101.554 li
417.313 101.702 li
417.33 101.799 li
417.338 103.323 li
417.451 103.543 li
417.714 103.102 li
417.942 103.438 li
417.665 104.744 li
417.915 105.319 li
418.071 105.25 li
418.53 105.119 li
418.374 105.395 li
417.907 105.721 li
417.714 105.918 li
417.586 106.354 li
417.53 106.835 li
417.411 107.158 li
417.096 107.134 li
416.789 107.724 li
416.494 107.391 li
416.205 106.726 li
415.916 106.317 li
415.928 106.517 li
415.902 106.934 li
415.916 107.134 li
415.325 106.816 li
415.044 106.744 li
414.701 106.716 li
414.859 106.411 li
414.892 106.133 li
414.776 105.894 li
414.5 105.719 li
414.9 105.676 li
415.332 105.534 li
415.624 105.386 li
415.596 105.319 li
415.278 105.277 li
414.1 104.92 li
414.541 104.63 li
414.57 104.3 li
414.289 104.033 li
413.798 103.919 li
413.377 103.698 li
412.718 102.724 li
412.135 102.286 li
411.692 101.323 li
411.283 101.103 li
410.859 101.23 li
410.573 101.544 li
410.104 102.322 li
409.948 101.901 li
409.983 101.501 li
410.304 100.703 li
409.93 100.743 li
409.706 100.903 li
409.585 101.166 li
409.502 101.505 li
409.684 102.851 li
410.546 104.197 li
414.581 108.302 li
416.098 110.531 li
416.646 111.84 li
417.291 114.595 li
418.477 117.935 li
418.815 118.452 li
419.402 118.698 li
420.086 118.507 li
420.721 118.056 li
421.126 117.545 li
421.823 118.056 li
422.066 118.044 li
422.349 117.742 li
422.49 117.412 li
422.672 116.707 li
422.929 116.344 li
423.697 115.876 li
424.677 115.646 li
426.65 115.563 li
428.541 115.836 li
428.424 116.156 li
428.135 116.449 li
427.775 116.662 li
427.44 116.744 li
427.11 117.103 li
427.163 117.756 li
427.59 118.047 li
428.343 117.324 li
428.604 117.756 li
428.809 118.319 li
429.079 118.692 li
429.537 118.562 li
430.101 118.945 li
431.593 119.423 li
431.54 119.741 li
431.782 120.083 li
431.924 120.485 li
431.846 120.82 li
431.439 120.957 li
431.053 120.775 li
429.94 119.741 li
429.222 119.798 li
428.555 120.222 li
427.341 121.396 li
427.369 120.757 li
427.17 120.69 li
425.582 121.804 li
425.143 121.977 li
425.664 122.173 li
427.138 122.396 li
427.722 122.375 li
427.291 122.654 li
426.906 122.69 li
426.04 122.557 li
425.703 122.763 li
425.773 123.216 li
426.145 123.973 li
425.824 124.662 li
425.318 124.338 li
424.894 123.606 li
424.78 122.663 li
423.302 120.346 li
423.355 120.168 li
423.637 119.85 li
423.697 119.544 li
423.401 119.299 li
422.975 119.178 li
421.812 119.466 li
420.987 119.309 li
420.506 119.348 li
420.71 120.158 li
421.948 122.042 li
422.131 122.666 li
422.237 122.923 li
422.929 123.973 li
423.228 124.901 li
424.407 127.152 li
424.842 127.687 li
425.489 128.132 li
425.902 127.968 li
426.742 126.77 li
426.984 126.579 li
427.552 126.286 li
427.84 126.089 li
428.241 125.929 li
428.544 126.047 li
428.694 126.256 li
428.634 126.371 li
427.922 126.607 li
427.529 127.169 li
427.277 127.837 li
426.959 128.389 li
426.632 128.561 li
425.773 128.735 li
425.443 128.896 li
425.183 129.25 li
425.176 129.565 li
425.489 130.908 li
427.177 134.147 li
429.054 139.897 li
429.553 140.357 li
430.447 140.036 li
430.649 140.091 li
430.82 140.184 li
430.938 140.212 li
431.087 140.079 li
431.197 139.746 li
431.34 139.613 li
432.555 139.014 li
432.765 139.456 li
432.658 139.858 li
432.348 140.188 li
431.935 140.432 li
432.224 140.481 li
432.466 140.599 li
432.641 140.783 li
432.755 141.031 li
431.172 141.233 li
429.52 141.246 li
428.132 141.648 li
427.341 143.027 li
427.127 145.805 li
427.231 146.342 li
428.039 146.806 li
428.405 146.443 li
428.658 145.75 li
429.135 145.245 li
429.812 145.302 li
430.158 145.805 li
430.118 146.37 li
429.638 146.645 li
428.72 147.462 li
428.346 147.595 li
428.057 147.634 li
427.803 147.731 li
427.54 148.042 li
427.408 148.36 li
427.306 148.829 li
427.344 149.255 li
427.629 149.44 li
428.104 149.364 li
428.296 149.159 li
428.409 148.868 li
428.634 148.533 li
429.222 148.402 li
430.037 148.608 li
430.621 149.047 li
430.538 149.621 li
430.756 149.842 li
430.98 149.682 li
431.204 149.621 li
431.757 149.621 li
431.223 150.241 li
430.396 150.287 li
429.499 150.193 li
428.72 150.422 li
429.317 150.913 li
429.537 151.04 li
428.943 151.276 li
428.533 151.064 li
428.17 150.686 li
427.722 150.422 li
427.722 150.84 li
427.54 150.84 li
427.352 150.674 li
427.151 150.451 li
427.002 150.166 li
426.959 149.842 li
426.496 149.993 li
425.945 150.075 li
425.403 150.039 li
424.941 149.842 li
424.802 150.274 li
424.947 150.78 li
425.192 151.315 li
425.344 151.838 li
425.308 152.453 li
425.019 153.496 li
424.868 155.217 li
424.648 156.345 li
424.271 157.376 li
423.239 159.226 li
423.003 160.316 li
422.929 165.371 li
422.82 165.882 li
422.633 166.318 li
422.55 166.759 li
422.743 167.279 li
422.295 167.38 li
422.124 167.685 li
422.131 168.585 li
422.066 168.967 li
421.789 169.663 li
421.551 170.73 li
421.109 171.338 li
417.602 174.203 li
416.315 174.959 li
414.9 175.325 li
411.002 175.107 li
410.354 175.255 li
402.871 178.921 li
399.851 179.974 li
398.523 180.809 li
397.658 182.119 li
397.273 183.513 li
397.127 184.859 li
397.299 186.196 li
397.86 187.551 li
398.744 188.723 li
399.81 189.617 li
403.78 191.914 li
405.472 192.358 li
410.461 192.971 li
412.042 193.359 li
413.501 194.003 li
414.701 194.979 li
416.407 197.07 li
416.963 197.604 li
420.079 199.88 li
420.78 200.232 li
421.528 200.375 li
423.32 200.514 li
425.674 201.19 li
428.049 201.173 li
428.809 201.28 li
430.433 201.87 li
432.476 202.861 li
435.151 205.204 li
435.738 206.027 li
437.964 207.804 li
438.427 208.466 li
438.812 209.243 li
439.363 210.82 li
439.742 212.729 li
440.199 213.419 li
441.181 213.616 li
442.108 213.334 li
442.818 212.768 li
443.366 212.027 li
443.797 211.219 li
443.982 211.219 li
443.955 211.952 li
443.711 212.547 li
443.306 213.017 li
442.797 213.398 li
442.146 213.783 li
441.782 213.936 li
441.396 214.018 li
440.92 213.968 li
440.6 213.875 li
440.418 213.979 li
440.304 215.14 li
439.938 216.817 li
439.681 217.33 li
439.638 217.58 li
439.666 218.014 li
439.755 218.459 li
439.948 218.915 li
439.755 219.008 li
439.487 219.043 li
439.273 219.046 li
439.178 219.118 li
439.175 219.286 li
439.2 219.478 li
439.187 219.627 li
439.021 220.304 li
438.917 221.948 li
438.672 222.546 li
438.359 223.045 li
437.569 225.041 li
436.193 227.379 li
434.556 229.478 li
432.822 230.909 li
432.555 231.354 li
431.935 232.69 li
431.843 233.419 li
431.757 233.711 li
431.54 234.071 li
431.283 234.339 li
430.944 234.605 li
430.574 234.809 li
430.24 234.887 li
429.891 235.011 li
429.378 235.546 li
429.035 235.667 li
428.809 235.852 li
429.029 236.24 li
429.378 236.589 li
429.537 236.667 li
429.652 237.059 li
429.66 237.358 li
429.513 237.618 li
429.135 237.885 li
428.755 237.123 li
428.459 237.138 li
428.073 237.473 li
427.44 237.686 li
426.995 237.967 li
426.279 239.217 li
425.543 239.727 li
424.41 240.773 li
423.925 241.101 li
422.597 241.301 li
422.066 241.518 li
421.728 242.098 li
422.003 243.114 li
423.074 243.946 li
424.499 244.509 li
425.841 244.716 li
426.226 244.58 li
426.586 244.313 li
426.925 244.12 li
427.231 244.206 li
427.558 244.389 li
427.875 244.337 li
428.145 244.15 li
428.343 243.915 li
428.526 243.248 li
428.109 242.96 li
426.742 242.7 li
426.906 242.227 li
427.156 241.871 li
427.498 241.578 li
427.958 241.301 li
428.569 241.083 li
429.432 240.973 li
430.2 241.14 li
430.538 241.8 li
430.4 242.543 li
429.762 243.694 li
429.537 244.313 li
429.569 245.029 li
429.766 245.563 li
429.82 246.043 li
429.438 246.603 li
429.499 246.849 li
429.895 247.152 li
430.538 247.511 li
431.006 247.593 li
431.329 247.554 li
431.607 247.391 li
433.042 246.215 li
433.712 245.858 li
434.463 245.713 li
435.257 245.781 li
438.752 246.799 li
439.076 247.003 li
439.207 247.315 li
438.733 249.499 li
438.766 249.912 li
438.957 250.267 li
439.207 250.563 li
439.335 250.888 li
439.187 251.326 li
439.645 251.617 li
439.919 252.53 li
440.379 252.726 li
442.623 252.562 li
443.099 252.419 li
444.061 251.593 li
444.549 251.326 li
446.558 250.717 li
453.003 246.913 li
454.716 246.244 li
456.18 245.442 li
457.263 244.574 li
461.725 241.8 li
464.69 238.662 li
465.314 237.555 li
466.248 234.887 li
466.571 234.274 li
467.077 233.608 li
467.696 233.075 li
469.146 232.618 li
469.599 232.052 li
470.061 230.673 li
471.083 228.722 li
471.757 227.886 li
472.886 225.692 li
473.081 225.425 li
473.291 225.303 li
473.769 225.254 li
473.967 225.15 li
474.553 224.31 li
474.708 223.987 li
474.829 223.647 li
474.872 223.352 li
475.133 222.978 li
476.875 221.646 li
478.573 219.531 li
479.142 219.388 li
479.868 219.523 li
480.585 219.484 li
481.088 218.83 li
481.41 216.746 li
483.288 213.797 li
482.985 213.833 li
482.715 213.957 li
482.479 214.161 li
482.287 214.417 li
482.39 213.825 li
482.656 213.338 li
483.383 212.529 li
483.708 212.352 li
483.972 212.487 li
484.221 212.714 li
484.506 212.815 li
484.748 212.732 li
486.019 211.828 li
487.201 210.51 li
487.92 209.42 li
488.387 208.416 li
488.47 208.281 li
488.841 207.835 li
488.9 207.7 li
488.918 207.504 li
488.865 206.764 li
488.89 206.383 li
489.018 206.105 li
489.42 205.617 li
490.044 204.427 li
491.02 201.853 li
491.415 201.283 li
491.564 201.201 li
492.02 201.055 li
492.134 200.991 li
492.187 200.795 li
492.17 200.624 li
492.134 200.485 li
492.134 200.375 li
492.799 198.419 li
493.024 198.096 li
493.697 197.893 li
494.064 197.718 li
494.377 197.494 li
494.513 197.27 li
494.819 196.547 li
495.339 195.97 li
495.442 195.571 li
494.513 195.378 li
493.519 195.478 li
493.006 195.468 li
492.621 195.279 li
492.415 195.122 li
491.652 194.673 li
491.175 194.474 li
491.001 194.306 li
490.812 194.317 li
490.517 194.745 li
490.435 195.101 li
490.488 195.728 li
490.371 195.899 li
489.876 195.628 li
489.947 194.805 li
490.517 193.256 li
490.343 190.532 li
490.133 189.93 li
489.802 189.605 li
489.47 189.399 li
489.217 189.135 li
489.117 188.648 li
489.138 188.138 li
489.237 187.753 li
489.444 187.421 li
489.813 187.052 li
490.133 186.241 li
490.235 186.149 li
490.916 185.733 li
491.971 184.844 li
492.683 184.094 li
493.078 183.522 li
493.388 182.875 li
493.512 182.227 li
493.856 181.874 li
497.874 180.376 li
503.295 178.308 li
504.058 177.767 li
504.332 177.835 li
504.595 178.028 li
504.958 178.141 li
509.693 178.244 li
514.324 178.41 li
514.766 178.541 li
515.656 179.024 li
515.966 179.14 li
516.343 178.686 li
516.896 178.655 li
517.315 178.889 li
517.295 179.23 li
517.02 179.56 li
516.76 179.98 li
516.532 180.458 li
516.383 180.938 li
516.354 181.801 li
516.578 182.738 li
517.383 184.535 li
517.824 184.155 li
518.288 183.861 li
518.651 183.531 li
518.903 182.593 li
519.599 181.121 li
521.197 179.837 li
520.788 179.1 li
519.822 178.713 li
517.796 178.541 li
518.013 177.958 li
518.401 177.527 li
518.633 177.101 li
518.38 176.525 li
518.587 176.036 li
518.668 174.89 li
519.064 174.024 li
519.381 172.31 li
519.406 170.776 li
519.594 170.122 li
520.107 169.393 li
520.174 169.055 li
519.926 168.734 li
519.381 168.277 li
519.316 168.142 li
519.228 167.83 li
519.214 167.678 li
519.245 167.33 li
519.352 167.31 li
519.544 167.373 li
519.798 167.279 li
520.41 166.92 li
521.15 166.768 li
521.895 166.901 li
523.049 167.742 li
523.569 167.524 li
526.55 165.456 li
529.844 162.573 li
530.012 162.334 li
529.986 160.44 li
530.114 160.184 li
531.219 159.733 li
531.418 159.484 li
531.439 159.071 li
531.269 158.759 li
530.969 158.55 li
530.605 158.45 li
530.803 158.069 li
530.873 157.428 li
531.005 157.05 li
531.471 156.645 li
531.729 156.366 li
531.824 156.034 li
531.518 155.644 li
530.958 155.132 li
530.546 154.546 li
530.717 153.947 li
531.157 153.441 li
531.507 152.864 li
531.604 152.277 li
530.873 151.043 li
531.157 150.586 li
531.749 150.229 li
532.222 149.842 li
532.383 149.077 li
532.072 148.438 li
531.642 147.828 li
531.418 147.141 li
531.514 146.827 li
531.734 146.542 li
532.222 146.043 li
532.547 145.577 li
533.367 143.741 li
533.786 143.1 li
534.84 142.517 li
535.246 141.793 li
535.838 140.432 li
536.949 139.513 li
537.493 138.775 li
537.742 138.515 li
537.8 138.019 li
537.344 137.426 li
536.703 136.894 li
cp
430.361 231.283 mo
431.469 230.317 li
431.966 229.602 li
431.906 229.449 li
431.646 229.349 li
431.482 229.374 li
431.259 229.399 li
431.103 229.478 li
430.824 229.993 li
430.671 230.18 li
429.773 230.888 li
429.662 231.03 li
429.599 231.193 li
429.698 231.344 li
429.891 231.404 li
430.361 231.283 li
cp
456.387 105.552 mo
456.632 105.601 li
456.821 105.719 li
456.874 105.828 li
456.885 105.927 li
456.863 106.018 li
456.821 106.1 li
456.731 106.227 li
456.696 106.338 li
456.764 106.438 li
457.134 106.583 li
457.373 106.634 li
457.493 106.646 li
457.684 106.653 li
457.864 106.641 li
458.053 106.602 li
458.234 106.535 li
458.095 106.245 li
457.907 106.054 li
457.658 105.951 li
457.329 105.918 li
457.009 105.15 li
456.821 104.92 li
456.022 105.119 li
456.165 105.435 li
456.387 105.552 li
cp
443.758 94.8325 mo
442.996 94.0918 li
443.195 94.7905 li
443.864 95.3833 li
444.695 95.6768 li
445.378 95.4888 li
445.585 95.7104 li
445.682 95.8735 li
445.688 96.0518 li
445.593 96.3086 li
446.297 96.1729 li
446.547 96.1636 li
446.778 96.3086 li
446.875 96.5654 li
446.941 97.3037 li
447.095 97.6094 li
447.405 97.6001 li
447.839 97.3945 li
448.223 97.2944 li
448.395 97.6094 li
448.409 97.9785 li
448.509 98.3291 li
448.729 98.5469 li
449.144 98.5078 li
449.417 98.2896 li
449.99 97.3071 li
449.751 97.1499 li
449.193 96.5088 li
449.168 96.3931 li
449.195 96.2544 li
449.199 96.1426 li
449.104 96.0908 li
448.935 96.0693 li
448.769 96.0034 li
448.615 95.9121 li
448.491 95.8096 li
448.122 95.3047 li
448.124 94.9629 li
448.288 94.6421 li
448.395 94.2002 li
448.544 93.9673 li
448.814 93.665 li
448.958 93.4053 li
448.697 93.2925 li
448.419 93.2446 li
447.668 92.9907 li
446.902 92.6064 li
446.482 92.2583 li
446.421 91.9233 li
446.995 91.6934 li
446.119 91.1641 li
445.994 90.9854 li
445.924 90.6226 li
445.728 90.3501 li
445.474 90.1719 li
445.178 90.0776 li
444.421 90.1685 li
444.086 90.6226 li
444.195 91.21 li
444.777 91.6934 li
444.449 91.9893 li
444.071 92.1011 li
443.195 92.0957 li
443.537 92.585 li
444.125 92.8335 li
444.526 93.084 li
444.278 93.5923 li
444.182 93.9102 li
444.241 94.3003 li
444.25 94.6699 li
443.982 94.9082 li
443.758 94.8325 li
cp
224.187 394.381 mo
224.286 394.287 li
224.309 394.131 li
224.223 393.981 li
224.094 394.057 li
223.73 394.091 li
223.639 394.17 li
223.945 394.191 li
224.187 394.381 li
cp
220.07 416.22 mo
220.284 416.114 li
220.294 415.975 li
220.387 415.958 li
220.502 415.837 li
220.373 415.577 li
220.095 415.619 li
219.696 415.541 li
219.536 415.723 li
219.654 415.854 li
219.811 415.954 li
219.807 416.21 li
220.07 416.22 li
cp
219.729 404.069 mo
220.063 403.843 li
220.373 403.348 li
219.992 403.131 li
219.601 403.059 li
219.169 403.095 li
218.831 403.29 li
218.71 403.678 li
218.892 404.059 li
219.287 404.167 li
219.729 404.069 li
cp
212.608 416.235 mo
211.912 416.556 li
211.563 416.969 li
211.797 417.317 li
212.463 417.17 li
213.176 416.819 li
213.561 416.57 li
213.279 416.183 li
212.608 416.235 li
cp
234.811 411.381 mo
235.16 411.467 li
235.486 411.495 li
235.811 411.355 li
235.889 411.163 li
236.071 410.416 li
236.214 410.138 li
235.982 410.054 li
235.719 409.89 li
235.505 409.679 li
235.412 409.448 li
235.313 409.334 li
235.092 409.377 li
234.704 409.537 li
234.323 409.558 li
232.745 409.949 li
232.417 409.939 li
232.417 409.739 li
232.646 409.639 li
232.783 409.52 li
232.884 409.361 li
232.994 409.159 li
231.847 408.803 li
231.103 408.667 li
230.298 408.255 li
229.999 408.158 li
229.357 408.394 li
228.336 409.297 li
227.602 409.358 li
229.023 407.983 li
229.109 407.66 li
228.813 407.093 li
229.365 406.897 li
231.018 406.943 li
230.818 407.344 li
233.468 407.521 li
234.194 407.344 li
234.194 407.162 li
233.597 406.943 li
234.173 406.563 li
233.819 406.196 li
233.154 405.926 li
232.795 405.844 li
232.623 405.445 li
232.21 405.175 li
231.719 404.938 li
231.306 404.644 li
228.695 402.104 li
228.183 401.703 li
227.624 401.374 li
226.249 400.887 li
225.921 400.939 li
225.512 401.229 li
225.13 401.382 li
224.682 401.328 li
223.896 401.129 li
223.008 401.149 li
222.356 401.303 li
221.943 401.728 li
221.79 402.551 li
221.722 402.71 li
221.608 402.855 li
221.559 403.022 li
221.684 403.236 li
221.819 403.379 li
221.908 403.504 li
221.954 403.647 li
221.969 403.835 li
221.854 404.053 li
221.627 404.27 li
221.502 404.525 li
221.684 404.843 li
222.67 405.872 li
223.055 406.499 li
223.207 407.162 li
223.141 407.567 li
222.973 407.885 li
222.484 408.457 li
222.104 408.696 li
221.242 408.696 li
220.879 408.85 li
220.739 409.479 li
220.964 410.259 li
221.078 410.961 li
220.572 411.355 li
220.177 411.331 li
219.828 411.204 li
219.45 411.125 li
218.974 411.246 li
218.279 411.566 li
217.973 411.762 li
217.674 412.055 li
217.446 412.464 li
217.449 412.792 li
217.549 413.13 li
217.592 413.571 li
217.446 413.935 li
217.246 414.241 li
217.253 414.512 li
217.756 414.754 li
216.744 415.099 li
216.146 415.423 li
215.58 415.481 li
215.28 415.669 li
214.938 416.133 li
214.579 416.845 li
214.395 417.589 li
214.558 418.151 li
215.156 418.287 li
216.153 418.241 li
217.14 418.073 li
217.674 417.877 li
218.09 417.461 li
218.61 417.079 li
218.98 417.076 li
218.974 417.787 li
219.892 417.107 li
220.216 416.73 li
220.572 416.171 li
218.792 416.645 li
217.884 416.763 li
217.353 416.371 li
218.207 416.164 li
219.711 415.338 li
220.174 415.573 li
220.362 414.86 li
220.373 414.754 li
220.597 414.655 li
221.085 414.572 li
221.694 414.185 li
221.933 414.397 li
222.126 414.817 li
222.406 415.171 li
222.77 415.207 li
223.831 415.089 li
224.286 415.26 li
224.674 415.506 li
225.184 415.665 li
225.701 415.677 li
226.097 415.463 li
226.634 414.978 li
228.46 413.807 li
229.201 413.571 li
231.018 413.354 li
233.197 413.354 li
232.859 412.902 li
233.873 413.204 li
234.194 413.055 li
234.009 412.337 li
234.165 412.129 li
234.811 412.153 li
235.034 412.275 li
235.252 412.652 li
235.412 412.757 li
235.637 412.768 li
235.943 412.733 li
236.159 412.643 li
236.11 412.457 li
235.735 412.168 li
234.411 411.557 li
234.411 411.355 li
234.811 411.381 li
cp
235.796 407.668 mo
235.814 407.471 li
235.583 407.269 li
235.345 407.396 li
235.256 407.617 li
235.615 407.71 li
235.796 407.668 li
cp
415.87 237.964 mo
415.799 237.739 li
415.314 237.686 li
414.935 237.811 li
414.603 238.049 li
414.221 238.252 li
413.697 238.284 li
413.883 238.611 li
414.182 238.804 li
414.535 238.839 li
414.9 238.683 li
414.923 239.221 li
414.45 239.706 li
413.798 239.887 li
413.299 239.502 li
411.793 240.798 li
411.525 240.927 li
410.813 240.877 li
410.504 240.898 li
410.407 240.944 li
410.095 241.175 li
409.948 241.297 li
409.937 241.297 li
409.918 241.301 li
409.94 241.301 li
411.429 241.362 li
411.881 241.301 li
412.174 241.151 li
412.9 240.656 li
413.299 240.5 li
413.818 240.482 li
414.36 240.521 li
414.885 240.496 li
415.314 240.281 li
415.511 239.939 li
415.691 239.067 li
415.916 238.683 li
415.817 238.295 li
415.87 237.964 li
cp
241.844 345.553 mo
241.836 345.563 li
241.84 345.559 li
241.844 345.553 li
cp
245.657 402.716 mo
245.319 402.967 li
244.896 403.095 li
244.44 403.131 li
244.682 403.497 li
244.995 403.778 li
245.191 404.038 li
245.056 404.345 li
245.333 404.069 li
245.943 403.586 li
246.302 402.98 li
245.839 402.332 li
245.657 402.716 li
cp
399.05 230.788 mo
398.648 230.524 li
398.302 230.18 li
397.86 229.858 li
397.687 230.186 li
397.633 230.55 li
397.687 230.92 li
397.86 231.253 li
397.946 231.144 li
398.26 230.855 li
398.409 231.184 li
398.388 231.479 li
398.198 231.709 li
397.86 231.853 li
397.817 231.97 li
397.811 232.07 li
397.776 232.17 li
397.658 232.273 li
398.037 232.436 li
398.462 232.416 li
398.891 232.273 li
399.261 232.07 li
399.347 231.942 li
399.431 231.732 li
399.556 231.54 li
399.756 231.454 li
400.475 231.253 li
400.649 231.112 li
400.991 230.745 li
401.166 230.673 li
401.753 230.702 li
401.874 230.673 li
402.055 230.335 li
402.167 229.577 li
402.255 229.274 li
402.384 229.113 li
402.808 228.715 li
402.971 228.64 li
403.11 228.551 li
403.054 228.356 li
402.871 228.057 li
403.159 227.301 li
403.263 226.895 li
403.274 226.479 li
403.139 226.047 li
402.989 226.226 li
402.672 227.06 li
402.404 227.387 li
402.135 227.622 li
401.472 228.057 li
402.477 228.057 li
402.018 228.366 li
401.099 228.594 li
400.873 228.875 li
400.728 228.395 li
400.81 227.867 li
400.792 227.433 li
400.368 227.259 li
400.115 227.383 li
399.969 227.657 li
399.855 228.057 li
399.542 227.992 li
399.46 227.75 li
399.425 227.519 li
399.261 227.476 li
399.1 227.732 li
398.729 228.848 li
398.658 229.274 li
398.744 229.756 li
398.979 230.14 li
399.297 230.439 li
399.655 230.673 li
399.655 230.855 li
399.05 230.788 li
cp
193.782 373.742 mo
194.511 373.742 li
195.697 373.391 li
195.815 373.301 li
195.794 373.134 li
195.651 373.002 li
193.88 372.877 li
193.537 373.012 li
193.263 373.244 li
193.263 373.412 li
193.471 373.486 li
193.338 373.597 li
193.782 373.742 li
cp
185.576 382.147 mo
185.322 382.059 li
185.057 382.04 li
184.893 382.176 li
184.881 382.356 li
185.325 382.774 li
185.471 382.856 li
185.604 382.667 li
185.703 382.375 li
185.821 382.211 li
185.764 382.164 li
185.576 382.147 li
cp
211.313 414.259 mo
211.163 414.286 li
211.043 414.409 li
211.061 414.559 li
211.113 414.74 li
211.064 414.875 li
211.303 414.547 li
211.349 414.444 li
211.316 414.376 li
211.313 414.259 li
cp
188.266 374.537 mo
189.088 374.466 li
189.249 374.415 li
189.488 374.474 li
192.663 373.611 li
192.747 373.543 li
192.6 373.462 li
192.428 373.475 li
190.991 373.543 li
189.904 373.918 li
189.143 373.945 li
188.776 374.217 li
188.108 374.291 li
188.017 374.384 li
188.111 374.438 li
188.108 374.502 li
188.266 374.537 li
cp
196.184 358.756 mo
196.505 359.123 li
196.743 359.53 li
197.312 359.74 li
197.95 359.893 li
198.429 360.107 li
198.942 360.473 li
199.336 360.555 li
200.319 360.424 li
199.224 358.458 li
198.807 357.464 li
198.537 356.41 li
198.455 356.304 li
198.38 356.235 li
198.325 356.153 li
198.319 356.008 li
196.553 358.009 li
196.355 358.294 li
196.411 358.427 li
196.12 358.529 li
196.184 358.756 li
cp
332.039 298.96 mo
331.562 299.541 li
330.85 299.822 li
328.905 300.16 li
328.464 300.658 li
328.737 300.966 li
329.354 301.442 li
329.977 302.059 li
330.262 302.757 li
330.475 303.458 li
328.464 302.657 li
327.124 302.345 li
326.775 302.158 li
326.035 301.98 li
319.899 302.856 li
319.137 302.556 li
318.335 302.072 li
317.292 301.824 li
316.245 301.82 li
315.422 302.059 li
315.305 301.524 li
315.906 301.357 li
317.42 301.46 li
320.233 302.059 li
320.893 302.03 li
321.646 301.842 li
322.256 301.514 li
322.451 301.063 li
322.181 300.73 li
320.636 299.441 li
321.038 299.466 li
321.608 299.744 li
322.63 300.424 li
322.833 300.616 li
323.064 301.029 li
323.25 301.222 li
323.616 301.46 li
323.838 301.519 li
326.565 301.361 li
327.264 301.46 li
328.527 301.87 li
329.126 302.137 li
329.663 302.457 li
329.219 301.973 li
328.634 301.574 li
328.107 301.137 li
327.883 300.542 li
328.129 299.886 li
328.566 299.559 li
328.77 299.249 li
328.281 298.644 li
327.993 298.526 li
327.655 298.477 li
327.381 298.334 li
327.264 297.946 li
327.206 297.622 li
326.943 297.062 li
326.778 296.065 li
326.519 295.445 li
325.846 294.249 li
326.355 294.552 li
326.883 295.097 li
327.295 295.745 li
327.69 297.105 li
328.235 297.521 li
328.895 297.817 li
329.465 298.244 li
329.61 298.607 li
329.585 298.893 li
329.648 299.106 li
330.062 299.242 li
330.411 299.17 li
330.878 298.939 li
331.288 298.637 li
331.462 298.344 li
331.333 298.006 li
330.785 297.676 li
330.665 297.344 li
330.753 296.87 li
330.959 296.955 li
331.28 297.443 li
331.907 297.992 li
332.163 298.465 li
332.039 298.96 li
cp
306.384 313.334 mo
305.945 313.929 li
305.504 314.391 li
304.82 314.865 li
304.255 315.117 li
303.934 315.484 li
303.99 316.3 li
304.147 317.069 li
304.193 319.397 li
304.069 320.299 li
303.73 320.798 li
302.581 321.714 li
302.182 322.25 li
301.52 323.482 li
300.906 323.801 li
301.178 322.931 li
302.257 321.239 li
302.398 320.713 li
302.307 320.432 li
302.125 320.143 li
302.003 319.858 li
302.089 319.605 li
302.26 319.255 li
302.103 318.978 li
301.762 318.797 li
301.38 318.715 li
301.473 318.309 li
301.783 318.155 li
302.188 318.027 li
302.581 317.699 li
302.581 316.791 li
302.609 316.659 li
302.797 316.101 li
302.943 315.246 li
302.89 314.449 li
302.153 312.126 li
302.035 311.36 li
301.939 308.722 li
301.996 308.252 li
302.196 307.874 li
302.556 307.668 li
302.762 307.846 li
302.783 308.233 li
302.581 308.668 li
302.581 308.47 li
302.444 311.176 li
302.631 312.643 li
303.457 313.434 li
303.599 314.135 li
303.698 314.391 li
303.955 314.427 li
304.343 314.28 li
305.016 313.882 li
305.462 313.418 li
306.003 312.368 li
306.412 311.866 li
306.608 312.639 li
306.384 313.334 li
cp
294.418 326.667 mo
294.368 326.896 li
294.187 327.144 li
292.918 327.636 li
292.77 327.725 li
292.057 327.479 li
291.996 326.981 li
292.214 326.324 li
292.37 325.627 li
292.31 325.281 li
292.039 324.612 li
291.972 324.327 li
292.043 324.035 li
292.588 323.113 li
292.398 322.688 li
292.428 321.792 li
292.37 321.313 li
292.143 320.972 li
291.487 320.364 li
291.353 320.004 li
291.17 318.397 li
291.17 316.498 li
290.571 315.281 li
290.939 315.039 li
291.477 315.018 li
291.961 314.907 li
292.171 314.391 li
292.182 313.861 li
292.285 313.586 li
292.552 313.483 li
293.068 313.469 li
293.606 313.59 li
293.773 313.882 li
293.62 314.225 li
293.168 314.505 li
292.349 316.133 li
292.028 317.247 li
292.067 317.507 li
292.517 318.158 li
292.531 318.454 li
292.435 318.775 li
292.37 319.206 li
292.452 319.516 li
292.634 319.754 li
292.837 319.946 li
292.969 320.114 li
293.749 322.414 li
293.876 322.614 li
293.973 322.855 li
293.909 323.49 li
294.361 324.277 li
294.439 324.794 li
294.418 326.667 li
cp
286.134 330.84 mo
285.145 330.834 li
284.226 330.602 li
283.435 330.021 li
283.072 329.352 li
282.876 328.434 li
283.037 327.693 li
283.741 327.543 li
283.484 326.867 li
283.514 325.196 li
283.107 323.486 li
283.044 322.465 li
283.271 321.511 li
283.923 320.895 li
283.901 321.538 li
283.567 322.742 li
283.524 323.33 li
283.6 323.629 li
283.759 324.032 li
283.983 324.377 li
284.24 324.526 li
284.586 324.438 li
284.76 324.209 li
284.882 323.914 li
286.017 321.916 li
286.352 320.752 li
286.747 320.56 li
286.989 320.819 li
286.74 321.514 li
286.708 322.198 li
286.479 322.909 li
286.134 323.572 li
285.743 324.11 li
284.935 324.715 li
284.742 324.929 li
284.699 325.306 li
284.721 325.851 li
284.678 326.332 li
284.439 326.546 li
284.18 326.699 li
284.251 327.044 li
284.465 327.414 li
284.642 327.636 li
284.792 327.959 li
284.734 328.365 li
284.543 329.131 li
284.849 329.732 li
285.579 330.121 li
287.139 330.741 li
286.134 330.84 li
cp
252.068 360.467 mo
251.843 360.801 li
251.416 361.225 li
251.245 361.153 li
251.16 359.505 li
250.91 358.636 li
250.529 357.83 li
250.027 357.208 li
250.395 357.064 li
250.601 356.784 li
250.679 356.418 li
250.646 356.008 li
250.476 355.676 li
249.96 355.188 li
249.846 354.907 li
249.628 354.088 li
249.098 353.956 li
248.446 354.23 li
247.21 355.04 li
246.926 355.132 li
246.452 355.206 li
243.585 355.1 li
242.937 354.789 li
242.396 354.288 li
241.836 353.612 li
240.771 351.521 li
240.529 351.197 li
240.014 350.794 li
239.956 349.904 li
240.216 348.394 li
240.155 348.263 li
239.896 347.913 li
239.839 347.781 li
239.882 347.617 li
239.999 347.343 li
240.155 346.534 li
240.146 346.214 li
239.558 345.32 li
239.365 344.647 li
239.02 340.986 li
239.222 340.986 li
239.365 341.343 li
239.832 341.827 li
240.023 342.166 li
240.066 342.589 li
239.839 343.765 li
239.956 344.558 li
240.248 345.249 li
241.018 346.58 li
241.335 345.359 li
241.615 344.804 li
242.231 344.366 li
242.642 344.288 li
242.56 344.565 li
241.847 345.549 li
241.89 346.642 li
241.836 346.962 li
241.63 347.223 li
241.323 347.507 li
241.142 347.853 li
241.338 348.287 li
241.769 348.847 li
242.068 349.415 li
242.274 350.05 li
242.702 352.236 li
242.937 352.906 li
243.34 353.501 li
244.048 353.924 li
244.903 353.96 li
247.467 353.38 li
249.158 352.742 li
250.683 352.476 li
250.825 352.535 li
250.288 353.266 li
250.341 353.525 li
251.911 355.199 li
252.132 355.912 li
251.743 356.717 li
251.448 357.378 li
251.559 358.091 li
252.061 359.423 li
252.136 359.822 li
252.153 360.153 li
252.068 360.467 li
cp
227.452 350.623 mo
227.139 350.901 li
227.101 351.335 li
227.164 352.037 li
226.916 353.047 li
226.523 354.078 li
226.011 355.028 li
225.395 355.809 li
225.105 356.005 li
224.839 356.111 li
224.653 356.293 li
224.521 356.99 li
224.391 357.183 li
224.251 357.322 li
224.18 357.425 li
224.147 357.912 li
224.176 358.423 li
224.126 358.911 li
223.511 360.074 li
222.659 362.503 li
222.289 363.019 li
221.691 363.237 li
221.438 363.721 li
221.256 364.199 li
220.875 364.42 li
220.377 364.199 li
220.33 363.689 li
220.576 363.092 li
220.968 362.621 li
219.981 362.45 li
217.56 362.354 li
216.67 361.909 li
216.402 361.687 li
215.533 361.146 li
215.271 361.111 li
214.846 361.285 li
214.275 361.265 li
213.731 361.09 li
213.371 360.801 li
214.55 360.623 li
214.817 360.513 li
215.258 360.253 li
215.558 360.203 li
216.05 360.327 li
216.521 360.619 li
217.25 361.305 li
217.853 361.612 li
218.688 361.759 li
220.926 361.767 li
221.463 361.612 li
221.833 361.257 li
221.965 360.613 li
221.809 359.658 li
221.402 358.71 li
220.821 357.866 li
220.167 357.208 li
219.731 356.948 li
219.162 356.702 li
218.147 356.406 li
217.414 356.425 li
216.708 356.546 li
216.031 356.546 li
215.366 356.207 li
215.914 355.997 li
216.608 355.947 li
217.966 356.008 li
217.524 355.156 li
217.81 354.979 li
218.479 355.267 li
219.85 356.297 li
220.79 356.727 li
221.79 356.869 li
223.051 356.343 li
223.489 356.278 li
223.846 356.132 li
223.999 355.708 li
223.98 355.299 li
223.902 354.868 li
223.682 354.53 li
223.289 354.394 li
222.806 354.063 li
222.311 353.306 li
221.926 352.436 li
221.779 351.791 li
222.231 352.144 li
222.806 353.181 li
223.289 353.394 li
223.518 353.583 li
224.578 354.808 li
225.191 353.889 li
225.854 352.571 li
226.089 351.313 li
225.395 350.577 li
225.896 350.292 li
226.74 350.16 li
227.62 350.188 li
228.212 350.396 li
227.452 350.623 li
cp
218.967 366.018 mo
218.436 366.001 li
218.065 366.147 li
217.973 366.41 li
218.535 367.154 li
218.674 367.501 li
218.592 367.87 li
218.247 368.34 li
218.059 368.202 li
217.709 367.763 li
217.207 367.393 li
216.57 367.433 li
216.658 367.554 li
216.708 367.652 li
216.787 367.742 li
216.951 367.834 li
216.608 368.458 li
216.05 368.454 li
214.749 367.731 li
213.909 367.564 li
213.422 367.921 li
212.947 368.408 li
212.154 368.632 li
212.862 367.491 li
212.88 367.026 li
212.143 366.834 li
211.826 366.898 li
211.043 367.133 li
210.839 367.133 li
210.505 367.008 li
210.088 367.086 li
209.34 367.433 li
209.44 366.976 li
209.725 366.799 li
210.559 366.631 li
211.057 366.396 li
211.323 366.179 li
211.755 365.416 li
212.271 366.001 li
212.478 366.468 li
212.802 366.396 li
213.371 366.018 li
214.714 365.962 li
215.384 366.048 li
215.932 366.235 li
216.373 365.523 li
217.218 365.398 li
218.967 365.837 li
218.967 366.018 li
cp
411.871 241.82 mo
411.091 241.899 li
410.788 241.963 li
410.364 242.252 li
410.005 242.32 li
409.635 242.24 li
409.21 242.042 li
408.812 241.782 li
408.506 241.5 li
408.231 241.582 li
407.623 241.681 li
407.057 241.977 li
406.736 241.956 li
406.419 241.882 li
406.087 241.899 li
405.563 242.163 li
405.161 242.44 li
404.728 242.568 li
404.09 242.408 li
403.783 242.562 li
402.957 242.739 li
402.269 242.754 li
402.365 242.408 li
402.771 242.124 li
403.296 241.871 li
403.837 241.76 li
404.289 241.899 li
404.492 241.596 li
404.798 241.472 li
405.15 241.514 li
405.507 241.704 li
405.978 241.28 li
406.757 241.105 li
408.295 241.101 li
408.701 241.038 li
408.911 240.88 li
409.064 240.688 li
409.303 240.5 li
409.894 240.218 li
409.905 240.281 li
410.001 240.247 li
410.368 240.154 li
410.504 240.1 li
410.324 239.652 li
410.119 239.392 li
409.502 238.883 li
409.271 238.591 li
409.058 238.205 li
409.064 237.964 li
409.502 238.103 li
409.602 237.818 li
409.806 237.465 li
410.012 237.249 li
410.104 237.387 li
410.104 238.586 li
410.229 238.883 li
410.511 238.883 li
410.788 238.762 li
410.902 238.683 li
410.83 238.611 li
411.19 238.391 li
411.606 238.209 li
411.703 238.284 li
411.79 238.027 li
411.82 237.465 li
411.991 237.177 li
413.494 235.353 li
413.719 234.845 li
413.498 234.47 li
413.082 234.588 li
411.902 235.488 li
411.29 236.098 li
410.793 236.479 li
410.229 236.635 li
409.702 236.287 li
409.57 236.033 li
409.563 235.841 li
409.698 235.713 li
410.324 235.639 li
410.468 235.535 li
410.508 235.325 li
410.504 234.976 li
410.35 234.556 li
409.99 234.118 li
409.524 233.782 li
409.082 233.672 li
409.191 234.214 li
408.908 234.684 li
408.42 234.845 li
407.921 234.47 li
407.476 234.994 li
406.924 235.129 li
406.312 234.982 li
405.688 234.67 li
404.628 233.826 li
404.125 233.655 li
404.071 234.271 li
403.62 234.103 li
403.42 234.217 li
403.455 234.513 li
403.69 234.887 li
402.672 234.887 li
402.89 235.232 li
403.791 235.98 li
404.176 236.122 li
404.357 235.809 li
404.482 235.356 li
404.67 235.068 li
405.15 235.076 li
405.399 235.399 li
405.383 235.831 li
404.879 236.425 li
405.013 236.71 li
405.507 237.287 li
404.619 237.287 li
404.239 237.618 li
403.986 238.177 li
403.473 238.883 li
403.31 237.985 li
403.377 237.529 li
403.69 237.067 li
402.672 236.885 li
402.719 237.183 li
402.672 237.369 li
402.529 237.461 li
402.277 237.487 li
402.06 237.555 li
402.07 237.714 li
402.131 237.917 li
402.073 238.103 li
401.707 238.349 li
401.328 238.547 li
401.026 238.819 li
400.873 239.285 li
401.131 240.182 li
401.906 240.211 li
403.473 239.701 li
403.274 240.1 li
403.431 240.2 li
403.548 240.257 li
403.688 240.275 li
403.883 240.281 li
404.15 240.229 li
404.212 240.111 li
404.212 239.975 li
404.289 239.883 li
404.787 239.766 li
408.085 239.701 li
407.451 240.231 li
406.608 240.41 li
404.869 240.281 li
405.329 240.617 li
405.507 240.699 li
405.048 240.898 li
404.339 241.069 li
403.638 241.133 li
403.175 240.998 li
402.715 240.798 li
402.104 240.78 li
400.873 240.898 li
401.108 241.158 li
401.433 241.201 li
401.824 241.197 li
402.255 241.301 li
402.255 241.5 li
401.151 241.723 li
398.061 243.099 li
397.817 243.021 li
397.565 242.881 li
397.359 242.65 li
397.259 242.32 li
398.862 241.963 li
399.69 241.642 li
400.059 241.301 li
400.122 240.944 li
400.406 240.295 li
400.475 239.994 li
400.29 239.58 li
399.845 239.277 li
399.308 239.106 li
398.857 239.104 li
399.168 238.669 li
399.627 238.559 li
400.048 238.359 li
400.257 237.686 li
400.502 237.792 li
400.699 237.796 li
400.831 237.668 li
400.873 237.387 li
400.838 237.265 li
400.688 237.095 li
400.656 236.977 li
400.735 236.735 li
400.909 236.743 li
401.113 236.845 li
401.254 236.885 li
401.464 236.917 li
401.735 237.031 li
401.974 237.045 li
402.073 236.778 li
402.135 236.483 li
402.295 236.311 li
402.551 236.25 li
402.871 236.287 li
402.116 235.98 li
401.092 236.016 li
399.16 236.287 li
399.143 236.425 li
398.459 237.177 li
398.331 237.637 li
398.028 237.796 li
397.693 237.722 li
397.44 237.487 li
397.718 237.28 li
397.972 237.002 li
398.161 236.663 li
398.26 236.287 li
397.765 236.147 li
397.758 235.934 li
398.046 235.694 li
398.459 235.488 li
397.746 234.905 li
398.188 234.612 li
399.024 234.52 li
399.479 234.57 li
399.891 234.887 li
400.816 234.865 li
401.764 234.623 li
402.255 234.271 li
401.992 234.231 li
401.896 234.156 li
401.834 234.043 li
401.653 233.873 li
401.934 233.655 li
402.23 233.563 li
402.541 233.573 li
402.871 233.672 li
403.007 233.26 li
403.285 233.049 li
403.459 232.843 li
403.274 232.455 li
404.681 232.729 li
405.189 232.626 li
404.869 231.853 li
404.628 231.703 li
404.281 231.642 li
403.937 231.642 li
403.69 231.674 li
402.255 232.273 li
401.814 232.38 li
401.653 232.455 li
401.625 232.547 li
401.554 232.928 li
401.472 233.071 li
400.582 233.762 li
400.475 233.873 li
399.77 233.747 li
399.881 232.4 li
399.16 232.772 li
398.512 233.545 li
398.359 233.672 li
396.87 233.857 li
396.55 233.971 li
396.273 234.135 li
395.597 234.403 li
395.35 234.57 li
394.876 235.029 li
394.842 235.186 li
394.848 235.578 li
395.026 235.664 li
396.152 235.068 li
396.521 235.15 li
396.746 235.364 li
396.774 235.659 li
396.55 235.98 li
395.853 236.269 li
395.066 236.464 li
394.648 236.792 li
395.063 237.487 li
394.646 237.686 li
394.499 237.404 li
394.353 237.312 li
394.204 237.404 li
394.064 237.686 li
393.865 237.686 li
393.826 237.119 li
393.529 236.597 li
393.074 236.219 li
392.555 236.068 li
392.127 236.219 li
391.617 236.564 li
391.347 236.97 li
391.65 237.287 li
391.4 237.607 li
391.155 237.593 li
390.905 237.473 li
390.648 237.487 li
390.41 237.686 li
389.941 238.383 li
389.534 238.708 li
389.047 238.957 li
388.031 239.285 li
388.143 239.075 li
388.23 238.812 li
388.221 238.583 li
388.031 238.487 li
387.727 238.58 li
387.401 239.007 li
386.675 239.242 li
384.859 240.6 li
383.727 241.8 li
383.225 242.223 li
382.21 242.689 li
381.13 243.401 li
380.567 243.616 li
379.947 243.7 li
378.588 243.69 li
377.942 243.58 li
377.427 243.33 li
377.224 242.899 li
377.333 242.683 li
377.843 242.504 li
378.007 242.32 li
377.986 242.088 li
377.622 241.301 li
377.346 240.108 li
377.116 239.733 li
376.804 240.1 li
376.607 240.1 li
376.525 239.769 li
376.361 239.552 li
375.905 239.192 li
375.806 238.933 li
376.009 237.885 li
376.284 237.995 li
376.52 238.173 li
376.692 238.409 li
376.804 238.683 li
376.928 238.205 li
376.7 237.811 li
376.377 237.426 li
376.209 236.977 li
376.154 236.522 li
375.806 235.068 li
375.524 235.208 li
375.3 235.247 li
375.083 235.197 li
374.809 235.068 li
375.549 234.616 li
376.209 234.071 li
376.544 233.69 li
376.607 233.491 li
376.532 233.231 li
376.427 232.69 li
376.716 231.396 li
376.804 231.253 li
376.49 230.815 li
376.113 230.716 li
375.679 230.738 li
375.19 230.673 li
375.542 230.371 li
375.579 230.132 li
375.408 229.858 li
375.57 229.274 li
375.561 229.007 li
375.408 228.64 li
375.005 228.191 li
374.588 228.155 li
374.172 228.424 li
373.79 228.875 li
373.488 228.541 li
373.26 228.519 li
372.789 228.875 li
372.748 229.011 li
372.808 229.396 li
372.689 229.478 li
372.31 229.499 li
372.163 229.556 li
371.462 229.983 li
371.077 230.101 li
370.699 229.997 li
368.188 228.474 li
367.181 227.689 li
366.782 226.859 li
366.151 227.113 li
365.959 227.259 li
365.803 226.789 li
366.158 225.919 li
366.163 225.425 li
366.021 225.289 li
365.532 225.139 li
365.361 225.041 li
364.962 224.26 li
365.461 224.299 li
365.874 224.281 li
366.023 224.05 li
365.763 223.444 li
366.198 223.156 li
366.462 222.604 li
366.782 221.447 li
367.057 220.844 li
367.359 220.549 li
367.815 220.453 li
374.14 220.852 li
374.809 220.646 li
373.851 220.567 li
372.103 220.186 li
370.208 220.001 li
364.406 220.222 li
363.072 220.752 li
361.945 221.846 li
362.316 221.963 li
362.732 221.91 li
363.152 221.728 li
363.53 221.447 li
363.623 221.554 li
363.965 221.846 li
363.934 222.108 li
363.032 222.418 li
363.164 222.847 li
362.982 222.982 li
362.729 223.135 li
362.47 223.221 li
361.992 223.034 li
361.778 223.23 li
361.611 223.501 li
361.466 223.645 li
361.056 223.517 li
361.092 223.192 li
361.565 222.226 li
360.479 222.558 li
359.2 223.498 li
356.273 226.255 li
354.759 227.149 li
354.639 227.259 li
354.286 227.344 li
353.47 227.771 li
353.071 228.049 li
352.861 228.078 li
352.431 228.057 li
352.23 228.135 li
352.106 228.313 li
352.018 228.509 li
351.921 228.64 li
351.729 228.708 li
351.537 228.705 li
351.341 228.725 li
351.142 228.875 li
351.078 229.003 li
351.024 229.313 li
350.925 229.478 li
350.223 230.182 li
349.842 230.763 li
349.639 230.938 li
349.382 231.02 li
349.02 231.037 li
348.766 231.262 li
348.752 231.774 li
348.926 232.69 li
348.926 235.87 li
349.104 237.387 li
349.054 237.657 li
348.794 238.327 li
348.723 238.683 li
348.983 241.913 li
349.151 242.272 li
349.721 243.099 li
349.375 243.11 li
349.029 243.234 li
348.756 243.37 li
348.623 243.409 li
348.342 243.326 li
348.199 243.608 li
348.107 244.313 li
348.093 244.947 li
348.032 245.289 li
347.638 245.858 li
347.569 246.137 li
347.594 246.417 li
347.705 246.696 li
347.104 246.862 li
346.234 247.276 li
345.465 247.771 li
345.127 248.203 li
345.102 248.551 li
345.009 248.864 li
344.856 249.149 li
344.617 249.409 li
344.472 249.509 li
344.389 249.549 li
344.343 249.62 li
344.293 250.229 li
344.201 250.336 li
344.064 250.357 li
343.912 250.509 li
342.823 252.333 li
342.413 252.825 li
342.128 253.032 li
341.832 253.184 li
341.604 253.362 li
341.397 254.046 li
341.12 254.11 li
340.725 254.058 li
340.294 254.124 li
340.038 254.289 li
339.297 254.939 li
336.537 256.276 li
335.084 256.738 li
334.866 256.752 li
334.321 256.721 li
332.284 256.938 li
330.532 256.738 li
330.069 256.995 li
330.108 258.376 li
330.144 258.544 li
330.269 258.754 li
330.489 258.54 li
330.672 258.872 li
330.073 259.986 li
329.792 260.934 li
329.379 261.517 li
328.888 263.352 li
328.603 264.021 li
328.171 264.539 li
327.175 265.459 li
327.021 265.692 li
326.726 266.415 li
326.594 267.062 li
326.074 268.145 li
325.29 272.458 li
324.671 273.775 li
323.243 275.418 li
323.058 276.094 li
323.436 276.681 li
324.336 276.896 li
326.273 276.81 li
327.057 276.642 li
327.733 276.328 li
326.525 277.298 li
323.261 277.315 li
322.662 277.458 li
322.058 277.988 li
319.963 281.169 li
319.443 281.406 li
318.705 282.433 li
318.214 282.974 li
317.745 283.206 li
317.441 283.306 li
317.168 283.559 li
316.735 284.109 li
316.505 284.491 li
316.568 284.701 li
317.135 285.114 li
317.627 285.813 li
317.759 286.453 li
317.754 287.103 li
317.844 287.817 li
317.929 288.092 li
318.068 288.327 li
318.289 288.562 li
318.646 288.837 li
319.165 289.142 li
319.339 289.313 li
319.443 289.616 li
318.054 288.793 li
317.844 288.526 li
317.487 288.297 li
316.786 288.224 li
316.287 288.405 li
316.537 288.937 li
317.071 289.688 li
317.52 290.773 li
317.603 291.816 li
317.024 292.433 li
316.939 290.923 li
316.794 290.215 li
315.792 288.665 li
316.145 288.224 li
316.868 287.91 li
317.424 287.436 li
317.467 286.76 li
317.185 285.956 li
316.7 285.285 li
316.134 285.004 li
315.387 284.947 li
315.109 285.025 li
314.731 285.313 li
312.228 288.512 li
311.733 288.837 li
311.195 289.067 li
310.151 290.21 li
309.632 290.635 li
308.563 291.037 li
308.236 291.236 li
307.858 291.557 li
307.823 291.717 li
307.933 291.917 li
308.193 293.024 li
308.923 294.053 li
309.015 294.829 li
308.356 294.103 li
307.645 292.829 li
306.839 291.834 li
305.91 291.935 li
304.774 292.604 li
302.164 293.295 li
300.988 293.829 li
303.499 294.63 li
304.632 295.261 li
305.401 296.229 li
304.874 295.777 li
301.26 294.238 li
300.483 294.156 li
300.386 294.647 li
299.753 294.452 li
299.304 294.708 li
298.891 295.132 li
298.371 295.432 li
298.606 295.704 li
299.129 295.763 li
299.371 296.029 li
298.495 296.229 li
295.572 296.229 li
295.572 296.445 li
298.232 297.275 li
299.008 297.842 li
299.57 298.551 li
299.767 298.992 li
299.66 299.474 li
299.632 300.019 li
299.589 300.242 li
299.247 300.822 li
299.19 301.063 li
299.008 301.063 li
298.809 300.456 li
298.855 299.26 li
298.771 298.644 li
298.527 298.138 li
298.164 297.66 li
297.626 297.357 li
297 297.116 li
295.804 296.901 li
294.528 297.304 li
293.535 298.173 li
292.976 299.444 li
293.67 299.081 li
294.318 298.315 li
295.052 297.713 li
295.992 297.842 li
294.094 300.061 li
293.752 299.993 li
293.122 299.709 li
292.787 299.644 li
292.324 299.702 li
291.926 299.844 li
291.177 300.242 li
290.473 300.471 li
290.177 300.652 li
289.959 301.063 li
289.859 301.534 li
289.971 301.721 li
290.258 301.853 li
290.679 302.158 li
291.12 302.761 li
291.303 303.309 li
291.096 303.502 li
290.358 303.06 li
289.19 302.08 li
288.609 301.98 li
288.364 302.761 li
287.987 303.22 li
284.083 304.647 li
283.449 305.024 li
282.84 305.573 li
282.655 306.211 li
283.261 306.558 li
284.24 306.691 li
285.145 306.674 li
285.899 306.542 li
286.245 306.535 li
286.545 306.674 li
285.259 307.033 li
284.699 307.109 li
283.931 307.092 li
282.288 306.877 li
281.526 306.983 li
280.933 307.493 li
282.113 307.967 li
282.688 308.326 li
282.93 308.782 li
282.972 309.704 li
282.812 309.848 li
282.331 309.487 li
281.794 308.483 li
281.398 308.105 li
280.742 308.181 li
280.302 308.554 li
279.312 309.658 li
278.842 309.887 li
278.253 310.011 li
276.736 310.888 li
276.092 310.938 li
274.913 310.748 li
273.916 311.311 li
272.741 311.553 li
272.307 311.87 li
272.11 312.478 li
272.284 313.063 li
272.673 313.604 li
273.121 314.081 li
272.922 314.081 li
272.277 313.932 li
272.015 313.44 li
271.907 312.824 li
271.708 312.286 li
271.455 312.056 li
271.202 312.002 li
270.404 312.07 li
270.124 312.14 li
269.757 312.322 li
269.439 312.558 li
269.308 312.785 li
268.963 313.213 li
268.168 313.526 li
266.69 313.882 li
264.571 314.933 li
263.994 315.086 li
263.46 315.307 li
262.353 316.278 li
261.804 316.498 li
261.517 316.57 li
260.715 316.941 li
260.497 317.098 li
260.387 317.336 li
260.447 317.547 li
260.896 318.099 li
261.572 319.174 li
262.035 319.684 li
262.605 319.897 li
263.211 320.031 li
264.76 320.76 li
265.291 321.115 li
264.6 321.15 li
262.986 320.335 li
262.192 320.114 li
261.85 320.075 li
261.42 319.944 li
261.05 319.723 li
260.28 318.099 li
259.753 318.198 li
257.887 318.922 li
257.374 319.206 li
256.812 319.615 li
255.455 320.286 li
253.692 321.57 li
252.097 322.287 li
250.43 322.668 li
249.037 322.515 li
248.436 322.048 li
247.972 321.527 li
247.474 321.328 li
246.754 321.823 li
246.498 321.909 li
245.75 321.853 li
245.348 322.023 li
245.063 322.232 li
244.465 322.546 li
243.479 322.909 li
242.392 323.095 li
240.583 323.181 li
239.999 323.302 li
239.429 323.515 li
240.027 323.853 li
240.227 323.928 li
239.892 324.035 li
239.547 324.191 li
239.216 324.395 li
238.916 324.629 li
238.678 324.979 li
238.593 325.343 li
238.574 325.652 li
238.527 325.826 li
237.56 326.724 li
236.413 327.543 li
234.586 328.437 li
233.518 329.337 li
232.965 329.591 li
231.598 329.922 li
231.598 330.121 li
232.32 330.324 li
232.663 330.677 li
232.655 331.125 li
232.307 331.632 li
232.028 331.741 li
229.4 331.741 li
229.55 332.706 li
228.813 333.373 li
227.752 333.899 li
226.9 334.444 li
224.476 336.435 li
223.788 337.154 li
224.023 337.489 li
224.194 337.92 li
224.387 338.771 li
224.336 339.552 li
224.387 339.769 li
224.539 339.979 li
224.682 340.039 li
224.828 340.064 li
225.002 340.167 li
225.786 340.77 li
226.445 341.055 li
226.602 341.168 li
226.801 341.542 li
226.876 341.991 li
226.812 342.429 li
226.602 342.768 li
225.701 341.467 li
225.315 341.161 li
224.333 340.748 li
223.036 339.9 li
222.176 339.757 li
221.316 340.018 li
220.47 340.665 li
220.263 340.791 li
219.764 340.901 li
219.575 340.986 li
219.415 341.18 li
219.177 341.592 li
218.974 341.766 li
217.421 342.088 li
216.958 342.367 li
216.716 342.784 li
216.844 343.091 li
217.592 343.586 li
218.696 344.565 li
219.19 344.765 li
218.439 344.602 li
217.891 344.392 li
217.414 344.046 li
216.865 343.485 li
216.54 343.326 li
216.225 343.444 li
215.929 343.653 li
215.373 343.86 li
215.44 344.077 li
215.762 344.466 li
215.946 344.976 li
216.716 345.584 li
216.776 346.183 li
216.548 346.698 li
216.242 347.083 li
215.992 347.518 li
215.939 348.18 li
215.416 347.892 li
215.112 347.546 li
215.038 347.119 li
215.177 346.584 li
215.444 346.164 li
215.68 345.959 li
215.762 345.754 li
215.558 345.363 li
214.622 344.716 li
213.563 344.814 li
212.706 345.47 li
212.346 346.475 li
212.421 346.823 li
212.848 347.774 li
213.059 348.081 li
213.265 348.505 li
213.25 348.971 li
213.189 349.396 li
213.271 349.69 li
213.877 350.114 li
213.959 350.288 li
213.984 350.498 li
214.048 350.728 li
214.141 350.937 li
214.272 351.098 li
214.354 351.414 li
213.849 351.479 li
212.759 351.396 li
212.954 350.843 li
212.749 350.491 li
212.399 350.188 li
212.164 349.794 li
212.193 349.516 li
212.488 348.956 li
212.563 348.679 li
212.467 348.394 li
212.264 348.18 li
212.05 348.009 li
211.961 347.881 li
211.563 346.972 li
210.601 347.019 li
208.347 347.98 li
208.5 348.123 li
208.781 348.446 li
208.945 348.579 li
208.246 348.604 li
207.698 348.686 li
207.215 348.871 li
205.755 349.758 li
205.263 350.166 li
205.131 350.577 li
205.473 350.827 li
208.995 352.283 li
209.546 352.393 li
209.138 352.721 li
208.481 352.464 li
207.763 352.023 li
207.149 351.795 li
206.37 351.642 li
205.594 351.363 li
204.843 351.199 li
204.134 351.396 li
203.738 351.855 li
203.792 352.333 li
204.137 352.82 li
204.632 353.306 li
205.248 353.59 li
206.908 354.023 li
207.35 354.391 li
205.572 354.252 li
205.131 354.391 li
204.999 354.619 li
205.085 355.206 li
204.936 355.609 li
204.597 355.353 li
204.551 355.021 li
204.597 354.634 li
204.532 354.214 li
203.425 352.892 li
202.773 352.781 li
202.072 353.27 li
200.918 354.612 li
201.641 354.651 li
202.249 355.028 li
203.314 356.008 li
204.369 356.643 li
204.532 356.823 li
204.309 357.04 li
203.853 357.04 li
203.36 356.905 li
203.026 356.717 li
201.883 355.58 li
201.184 355.22 li
200.319 355.21 li
199.659 355.521 li
199.451 356.012 li
199.535 357.318 li
199.659 357.646 li
200.197 357.971 li
200.379 358.558 li
200.639 359.138 li
200.7 359.526 li
201.208 359.733 li
203.585 359.563 li
204.333 359.423 li
205.448 359.049 li
206.545 359.038 li
206.545 359.073 li
206.296 359.206 li
206.131 359.526 li
206.079 360.078 li
206.161 360.214 li
206.441 360.52 li
206.847 360.737 li
207.873 360.698 li
208.347 360.805 li
208.026 361.193 li
207.499 361.35 li
206.891 361.335 li
206.349 361.203 li
205.942 360.94 li
205.427 360.234 li
205.131 360.003 li
204.593 359.964 li
201.615 360.595 li
201.12 360.798 li
200.7 361.203 li
203.649 363.288 li
205.166 364.683 li
205.331 365.633 li
205.134 365.498 li
204.75 365.353 li
204.532 365.235 li
204.458 365.347 li
204.333 365.416 li
203.806 364.431 li
203.61 363.739 li
203.314 363.5 li
202.947 363.326 li
202.15 362.817 li
201.947 362.969 li
201.829 363.351 li
201.627 363.729 li
201.251 364.042 li
200.894 364.191 li
199.901 364.238 li
199.638 364.114 li
199.95 363.839 li
200.7 363.423 li
200.975 363.044 li
201.026 362.753 li
200.911 362.497 li
200.7 362.223 li
199.868 361.621 li
199.075 361.671 li
198.255 361.947 li
197.32 362.02 li
197.427 361.745 li
197.614 361.524 li
197.851 361.342 li
198.119 361.203 li
196.897 360.783 li
196.353 360.413 li
196.12 359.914 li
195.836 359.812 li
195.201 360.16 li
194.206 360.916 li
193.801 361.396 li
193.635 361.762 li
193.726 362.087 li
194.105 362.422 li
194.626 362.688 li
195.781 363.105 li
196.319 363.423 li
196.677 362.742 li
197.137 363.006 li
197.584 363.729 li
197.92 364.42 li
196.652 364.21 li
195.24 363.547 li
193.815 363.127 li
192.509 363.618 li
192.213 364.077 li
191.689 365.834 li
190.604 367.504 li
190.6 367.942 li
190.961 368.479 li
191.195 368.597 li
191.707 368.632 li
192.043 368.604 li
192.675 368.479 li
193.005 368.451 li
194.614 367.813 li
197.027 367.472 li
200.918 366.015 li
200.667 366.76 li
199.811 367.215 li
197.92 367.636 li
198.274 367.952 li
198.716 368.066 li
199.701 368.052 li
199.065 368.477 li
198.265 368.437 li
196.723 368.052 li
195.863 368.155 li
194.39 368.707 li
193.606 368.833 li
192.929 369.02 li
192.603 369.5 li
192.575 370.149 li
192.809 370.851 li
193.296 370.947 li
196.12 370.651 li
195.663 370.923 li
194.105 371.25 li
193.599 371.499 li
193.247 371.813 li
192.709 372.667 li
193.384 372.831 li
196.12 372.265 li
198.22 372.446 li
198.67 372.396 li
199.92 372.047 li
199.553 372.66 li
198.933 373.002 li
197.518 373.447 li
196.939 373.747 li
196.659 373.942 li
196.411 374.167 li
196.081 374.353 li
195.682 374.365 li
194.813 374.267 li
194.016 374.355 li
192.457 374.769 li
191.707 374.864 li
189.88 374.872 li
189.019 375.049 li
188.293 375.48 li
188.075 375.264 li
188.293 375.063 li
186.278 375.063 li
184.378 375.264 li
183.895 375.551 li
183.704 376.229 li
183.695 378.86 li
183.85 379.441 li
183.892 379.84 li
183.776 380.178 li
183.783 380.409 li
183.937 380.779 li
184.161 381.121 li
184.378 381.274 li
184.603 381.16 li
185.289 380.627 li
185.676 380.459 li
188.456 379.878 li
188.892 379.563 li
188.997 379.267 li
189.789 378.361 li
189.969 378.233 li
190.51 377.96 li
190.546 377.795 li
190.64 377.588 li
190.771 377.393 li
190.891 377.262 li
191.159 377.058 li
191.48 376.87 li
191.816 376.827 li
192.106 377.063 li
192.05 377.282 li
191.789 377.592 li
190.189 378.96 li
190.273 379.149 li
190.728 379.309 li
191.287 379.416 li
191.689 379.444 li
192.709 379.206 li
193.707 378.86 li
193.22 379.526 li
192.457 379.782 li
190.69 380.078 li
189.871 380.447 li
189.314 380.9 li
188.991 381.539 li
188.892 382.479 li
188.429 382.272 li
188.172 382.496 li
188.065 382.962 li
188.075 383.472 li
190.189 383.155 li
191.118 382.774 li
191.508 381.855 li
191.832 382.072 li
191.832 382.318 li
191.71 382.542 li
191.689 382.692 li
191.943 382.946 li
192.021 382.956 li
192.076 382.838 li
192.987 382.137 li
193.105 382.076 li
193.159 381.795 li
193.069 381.603 li
193.002 381.394 li
193.105 381.058 li
193.543 380.684 li
194.224 380.409 li
195.506 380.078 li
197.282 379.322 li
197.92 379.259 li
197.92 379.444 li
197.194 379.751 li
195.863 380.523 li
195.004 380.677 li
194.394 380.929 li
193.934 381.524 li
193.105 382.891 li
192.106 383.893 li
190.991 384.783 li
190.69 384.942 li
189.859 385.206 li
189.692 385.388 li
189.823 385.669 li
190.69 386.488 li
192.346 387.335 li
194.303 387.578 li
198.319 387.507 li
200.319 387.888 li
200.82 387.898 li
201.316 387.839 li
201.818 387.832 li
203.686 388.45 li
204.023 388.504 li
204.137 388.597 li
204.262 388.771 li
204.43 388.888 li
204.632 388.804 li
204.81 388.687 li
205.053 388.601 li
205.529 388.504 li
206.168 388.536 li
207.367 388.86 li
207.948 388.903 li
208.375 388.788 li
209.269 388.397 li
209.743 388.286 li
210.743 388.341 li
211.185 388.248 li
211.563 387.888 li
211.733 387.457 li
211.794 387.065 li
211.912 386.663 li
212.254 386.199 li
212.356 385.979 li
212.386 385.501 li
212.563 385.287 li
212.802 385.231 li
216.146 385.487 li
216.577 385.569 li
217.955 386.199 li
218.542 386.335 li
219.731 386.421 li
220.174 386.691 li
220.177 387.276 li
220.906 388.119 li
222.406 389.505 li
222.129 389.859 li
221.776 390.036 li
221.377 390.149 li
220.971 390.323 li
221.324 390.526 li
222.007 390.809 li
222.296 391.005 li
222.706 391.546 li
222.969 391.813 li
223.296 391.918 li
223.564 392.204 li
223.852 392.403 li
224.187 392.502 li
224.358 392.443 li
224.807 392.173 li
225.002 392.102 li
225.23 392.129 li
225.644 392.282 li
225.942 392.356 li
226.295 392.396 li
226.641 392.318 li
226.801 392.012 li
227.051 391.734 li
227.609 391.723 li
228.499 391.819 li
228.866 391.72 li
229.365 391.831 li
229.885 392.008 li
230.309 392.102 li
230.38 391.943 li
230.28 391.602 li
230.298 391.261 li
230.714 391.104 li
233.585 390.751 li
234.411 390.904 li
234.893 391.271 li
236.459 393.29 li
237.072 394.501 li
237.41 394.9 li
238.005 394.942 li
238.574 394.522 li
238.863 393.839 li
238.628 393.101 li
239.372 393.099 li
239.914 393.789 li
240.116 394.74 li
239.846 395.519 li
238.311 396.409 li
238.126 396.609 li
237.983 396.398 li
237.986 396.271 li
237.937 396.189 li
237.627 396.118 li
237.311 396.107 li
236.413 396.299 li
236.47 396.637 li
236.598 396.895 li
236.812 397.058 li
237.581 397.24 li
237.763 397.514 li
237.816 397.792 li
237.919 397.913 li
238.577 398.134 li
239.64 399.039 li
240.444 399.13 li
240.099 398.604 li
239.208 397.813 li
239.026 397.215 li
239.276 396.705 li
239.871 396.798 li
241.042 397.314 li
243.596 397.272 li
244.44 397.514 li
245.109 398.016 li
244.589 398.184 li
243.745 398.068 li
243.439 397.735 li
243.087 397.652 li
242.039 397.639 li
241.627 397.735 li
241.381 397.863 li
241.213 398.009 li
240.843 398.515 li
245.889 398.874 li
247.456 398.515 li
247.353 398.422 li
247.164 398.205 li
247.058 398.115 li
247.438 397.813 li
247.264 397.589 li
246.887 397.329 li
246.654 396.916 li
248.119 396.951 li
248.855 397.072 li
249.436 397.314 li
249.041 397.461 li
248.635 397.507 li
248.282 397.606 li
248.036 397.913 li
249.041 397.923 li
252.043 397.514 li
252.897 397.29 li
253.301 397.29 li
253.468 397.624 li
253.514 397.913 li
254.251 399.75 li
254.593 400.1 li
255.131 400.156 li
256.085 400.132 li
256.9 400.324 li
257.904 400.672 li
258.895 400.854 li
259.683 400.53 li
259.781 400.17 li
259.695 399.805 li
259.703 399.548 li
260.08 399.512 li
260.28 399.661 li
260.479 399.942 li
260.786 400.21 li
261.309 400.331 li
262.192 400.331 li
262.374 400.263 li
262.452 400.124 li
262.506 399.982 li
262.869 399.775 li
262.848 399.12 li
263.114 398.913 li
263.532 398.992 li
263.605 399.33 li
263.495 399.915 li
263.877 400.186 li
264.265 400.235 li
265.291 400.132 li
265.644 400.061 li
265.992 399.882 li
266.591 399.423 li
266.989 399.241 li
267.506 399.205 li
268.51 399.334 li
268.695 399.397 li
269.308 399.731 li
269.846 399.056 li
270.747 399.099 li
271.733 399.306 li
272.521 399.13 li
272.36 398.996 li
272.071 398.654 li
271.907 398.515 li
273.449 397.873 li
273.823 397.624 li
274.429 397.432 li
275.252 397.574 li
276.01 397.796 li
276.427 397.823 li
277.396 397.251 li
278.446 396.966 li
279.364 396.531 li
279.953 395.519 li
277.595 395.435 li
277.136 395.299 li
277.609 395.207 li
278.453 394.946 li
278.955 394.9 li
279.45 394.964 li
280.438 395.239 li
280.942 395.299 li
281.181 395.203 li
281.857 394.793 li
282.688 394.579 li
282.823 394.281 li
282.751 393.501 li
283.147 391.968 li
284.162 390.99 li
288.215 388.979 li
288.767 388.528 li
289.272 387.998 li
289.905 387.457 li
290.637 387.134 li
292.178 386.691 li
292.794 386.402 li
293.452 385.957 li
293.977 385.401 li
294.193 384.783 li
294.254 384.511 li
294.514 383.974 li
294.606 383.095 li
294.714 382.76 li
295.177 382.076 li
296.875 380.353 li
299.048 379.241 li
301.547 378.644 li
307.602 378.199 li
307.673 378.041 li
307.662 377.838 li
307.815 377.643 li
308.121 377.475 li
308.236 377.437 li
308.834 377.461 li
309.453 377.422 li
309.893 377.271 li
310.151 376.892 li
310.248 375.288 li
310.134 374.832 li
309.831 374.466 li
309.524 374.868 li
309.19 375.008 li
308.823 375.074 li
308.417 375.264 li
308.065 375.613 li
307.623 376.278 li
307.22 376.553 li
305.896 376.917 li
305.006 377.461 li
303.948 377.656 li
303.403 377.86 li
303.681 377.361 li
304.774 376.852 li
305.141 376.107 li
305.43 375.997 li
305.765 375.954 li
306.018 375.88 li
306.238 375.697 li
306.8 375.063 li
307.381 374.848 li
308.809 374.644 li
309.325 374.365 li
309.311 373.974 li
308.724 373.667 li
307.95 373.391 li
307.42 373.066 li
307.024 373.4 li
306.651 373.361 li
306.259 373.177 li
305.817 373.066 li
305.554 373.051 li
305.433 372.987 li
305.401 372.839 li
305.401 372.561 li
305.446 372.301 li
305.583 372.286 li
305.778 372.333 li
306.018 372.265 li
306.619 371.898 li
306.985 371.738 li
307.319 371.667 li
307.545 371.509 li
308.236 370.453 li
307.573 370.381 li
307.142 370.1 li
307.128 369.793 li
307.716 369.647 li
308.767 369.672 li
309.144 369.563 li
309.632 369.23 li
309.368 368.668 li
309.269 368.373 li
309.232 368.052 li
309.731 368.323 li
310.13 368.354 li
310.483 368.181 li
310.832 367.834 li
310.618 367.119 li
311.228 366.66 li
312.039 366.269 li
312.448 365.733 li
312.377 365.359 li
312.267 365.046 li
312.274 364.722 li
312.542 364.331 li
313.631 363.423 li
313.684 362.746 li
313.175 362.407 li
312.766 362.041 li
313.122 361.305 li
313.514 360.69 li
314.208 358.607 li
315.792 356.165 li
319.037 353.786 li
321.014 351.147 li
320.981 350.797 li
320.24 350.398 li
312.907 348.443 li
320.458 349.794 li
321.423 349.762 li
322.008 349.459 li
322.316 348.871 li
322.559 347.13 li
322.584 346.176 li
322.299 345.467 li
321.458 345.363 li
321.743 345.007 li
322.139 344.851 li
322.491 344.631 li
322.641 344.075 li
322.599 343.571 li
322.256 342.166 li
322.256 339.958 li
322.104 338.952 li
321.458 338.372 li
322.31 338.009 li
322.548 337.952 li
322.886 337.831 li
322.979 337.55 li
322.99 337.22 li
323.058 336.951 li
323.898 336.225 li
324.294 335.794 li
324.457 335.246 li
324.453 333.575 li
324.564 333.237 li
326.152 331.129 li
326.248 330.844 li
326.056 330.605 li
325.472 330.342 li
324.718 330.161 li
322.256 330.121 li
323.032 329.801 li
325.466 329.922 li
325.932 330.032 li
326.398 330.231 li
326.851 330.328 li
327.274 330.121 li
327.851 330.281 li
328.566 329.982 li
330.354 328.597 li
330.711 328.394 li
331.47 328.191 li
331.241 327.932 li
330.489 327.543 li
329.966 327.127 li
329.446 326.531 li
329.047 325.864 li
328.888 325.229 li
328.642 324.647 li
328.058 324.195 li
327.392 323.782 li
326.89 323.33 li
326.929 323.006 li
327.579 323.116 li
328.41 323.458 li
329.283 324.032 li
330.048 324.241 li
330.38 324.431 li
330.935 324.929 li
331.47 325.526 li
332.085 326.546 li
332.377 327.183 li
332.976 327.144 li
333.3 327.051 li
334.079 326.638 li
334.902 326.457 li
335.233 326.239 li
335.54 325.973 li
335.899 325.727 li
336.352 325.603 li
337.434 325.424 li
339.606 324.331 li
339.856 323.875 li
339.518 320.897 li
339.803 321.227 li
339.866 321.553 li
339.862 321.912 li
339.912 322.313 li
340.44 323.266 li
340.514 323.622 li
340.899 324.185 li
341.778 324.078 li
347.431 321.097 li
350.476 320.057 li
351.078 319.669 li
351.322 319.007 li
350.233 318.198 li
349.322 317.098 li
348.596 315.908 li
348.064 315.327 li
347.427 315.086 li
346.662 314.989 li
345.03 314.431 li
343.452 313.376 li
342.805 312.718 li
349.628 315.229 li
351.234 316.394 li
353.139 318.497 li
353.556 318.747 li
353.897 318.8 li
356.337 318.519 li
356.653 318.397 li
357.007 318.049 li
357.085 317.899 li
357.021 317.73 li
356.95 317.301 li
356.96 316.581 li
357.085 315.717 li
357.362 314.986 li
357.852 314.683 li
358.674 314.551 li
359.436 314.324 li
360.184 314.225 li
360.966 314.501 li
361.209 314.704 li
361.562 315.121 li
361.764 315.285 li
362.271 315.431 li
363.199 315.331 li
363.566 315.393 li
364.369 315.783 li
364.592 316.005 li
364.164 316.101 li
363.712 316.14 li
359.307 317.251 li
358.517 317.34 li
358.16 317.472 li
357.872 317.689 li
357.751 317.998 li
358.007 318.112 li
359.193 317.973 li
361.764 317.301 li
363.46 317.172 li
364.275 316.864 li
366.664 316.609 li
367.465 316.328 li
367.979 316.3 li
367.415 316.85 li
367.44 317.24 li
368.576 318.099 li
369.2 318.693 li
369.554 318.896 li
370.222 318.743 li
370.896 319.33 li
371.295 319.497 li
373.21 319.497 li
373.895 319.599 li
373.99 319.533 li
373.068 318.476 li
372.754 317.692 li
372.789 316.888 li
373.21 316.101 li
372.832 315.844 li
372.75 315.506 li
372.946 315.211 li
373.402 315.086 li
373.775 315.229 li
373.797 315.585 li
373.744 316.019 li
373.9 316.398 li
374.239 316.777 li
374.275 316.998 li
374.192 317.247 li
374.192 317.695 li
374.311 318.085 li
374.682 318.743 li
374.809 319.118 li
375.055 318.922 li
375.312 318.821 li
375.57 318.872 li
375.806 319.118 li
375.82 318.922 li
376.009 318.298 li
376.54 318.392 li
377.263 317.695 li
377.622 318.099 li
377.986 317.376 li
378.225 316.545 li
378.307 315.698 li
378.207 314.905 li
378.129 314.759 li
377.887 314.459 li
377.805 314.285 li
377.847 314.142 li
377.95 313.939 li
378.032 313.7 li
378.007 313.465 li
377.676 313.12 li
377.263 312.878 li
376.921 312.583 li
376.804 312.07 li
376.455 312.216 li
375.625 312.884 li
375.507 312.486 li
375.177 312.232 li
374.733 312.105 li
374.301 312.07 li
373.919 312.205 li
373.67 312.515 li
373.466 312.856 li
373.21 313.084 li
372.808 313.167 li
372.701 312.987 li
372.789 312.176 li
372.736 311.688 li
372.569 311.436 li
371.796 311.09 li
371.528 311.826 li
371.394 312.575 li
371.265 312.679 li
370.995 312.437 li
370.717 312.02 li
370.593 311.577 li
370.125 311.515 li
369.075 311.506 li
367.982 311.713 li
367.381 312.286 li
366.735 312.133 li
365.916 312.033 li
365.582 311.811 li
366.362 311.29 li
367.23 311.072 li
369.162 310.979 li
369.994 310.705 li
368.203 310.345 li
367.761 310.107 li
367.52 309.702 li
367.661 309.507 li
368.007 309.559 li
368.377 309.887 li
368.431 309.423 li
367.595 307.689 li
367.063 305.869 li
366.782 305.275 li
365.425 306.022 li
364.055 306.542 li
360.966 307.092 li
356.96 306.315 li
360.803 306.378 li
362.79 306.144 li
364.564 305.673 li
364.898 305.491 li
365.763 304.875 li
366.188 304.825 li
367.185 304.84 li
367.381 304.654 li
367.431 303.105 li
367.548 302.369 li
367.761 301.659 li
364.265 301.859 li
360.239 300.977 li
366.241 301.278 li
366.782 301.225 li
367.24 301.065 li
367.449 300.869 li
367.601 300.631 li
368.292 299.844 li
368.961 298.622 li
369.374 298.046 li
371.626 296.846 li
372.416 296.111 li
373.389 295.777 li
377.337 295.062 li
378.748 294.249 li
379.004 294.046 li
379.129 293.797 li
379.232 293.465 li
379.398 293.174 li
380.613 292.714 li
381.439 292.621 li
381.761 292.537 li
383.036 291.952 li
383.307 291.753 li
383.421 291.539 li
383.492 291.137 li
383.683 290.986 li
383.943 290.886 li
384.219 290.635 li
384.428 290.274 li
384.449 290.109 li
384.41 289.95 li
384.418 289.616 li
384.278 289.049 li
384.339 288.746 li
385.259 288.402 li
385.813 287.881 li
386.255 287.254 li
386.578 286.236 li
388.851 282.604 li
388.69 282.536 li
388.572 282.469 li
388.438 282.415 li
388.23 282.405 li
388.23 282.187 li
389.521 281.688 li
390.211 280.617 li
390.671 279.327 li
391.247 278.209 li
392.786 276.813 li
393.157 276.592 li
393.464 276.5 li
394.086 276.086 li
394.464 275.994 li
394.911 276.051 li
395.243 276.211 li
395.846 276.81 li
396.065 276.617 li
396.263 276.393 li
396.056 276.118 li
395.557 275.659 li
395.442 275.396 li
395.492 274.915 li
395.709 274.674 li
396.02 274.513 li
396.354 274.285 li
396.476 274.118 li
396.764 273.598 li
397.177 273.616 li
397.385 273.583 li
397.551 273.486 li
398.459 272.38 li
399.086 271.934 li
400.403 271.301 li
400.974 270.881 li
401.537 270.11 li
402.095 269.559 li
402.153 269.42 li
401.07 268.494 li
400.552 268.163 li
400.194 267.718 li
400.059 266.867 li
400.146 266.585 li
400.356 266.635 li
400.563 266.899 li
400.656 267.248 li
400.71 267.753 li
400.885 268.034 li
401.191 268.207 li
402.477 268.626 li
402.825 268.483 li
402.89 267.956 li
402.871 267.066 li
403.039 266.475 li
403.441 265.802 li
404.289 264.748 li
409.958 260.207 li
410.468 259.645 li
412.551 256.652 li
412.718 255.941 li
412.17 256.101 li
411.429 256.037 li
410.777 255.742 li
410.504 255.232 li
410.343 255.041 li
409.723 253.434 li
409.702 253.124 li
409.154 253.116 li
408.463 253.487 li
407.487 254.224 li
407.174 254.338 li
405.211 254.673 li
404.905 254.691 li
404.891 254.62 li
405.51 254.324 li
407.27 253.75 li
408.085 253.327 li
408.911 252.672 li
409.282 252.102 li
409.206 251.493 li
407.598 249.409 li
407.188 249.143 li
407.27 249.598 li
407.537 250.189 li
407.687 250.328 li
407.544 250.916 li
407.22 250.998 li
406.906 250.842 li
406.796 250.728 li
406.896 250.545 li
406.768 250.157 li
406.416 249.801 li
405.87 249.713 li
406.06 249.225 li
406.006 248.801 li
405.688 247.911 li
405.653 247.359 li
405.791 246.999 li
406.49 246.296 li
407.037 245.511 li
407.497 244.669 li
408.064 243.94 li
408.9 243.498 li
408.704 243.915 li
409.101 243.996 li
409.713 243.534 li
410.005 243.608 li
409.943 243.786 li
409.449 244.42 li
409.303 244.716 li
409.741 244.62 li
410.428 244.192 li
411.344 244.007 li
411.543 243.779 li
411.65 243.487 li
411.793 243.206 li
412.081 242.928 li
412.658 242.522 li
412.883 242.32 li
413.338 241.631 li
413.697 240.898 li
412.494 241.604 li
411.871 241.82 li
cp
185.948 372.453 mo
187.772 370.943 li
188.274 370.894 li
188.692 371.449 li
188.655 371.792 li
188.743 372.379 li
188.896 372.955 li
189.072 373.266 li
189.285 373.322 li
189.557 373.312 li
189.789 373.197 li
189.998 372.667 li
190.237 372.816 li
190.449 373.109 li
190.51 373.266 li
191.163 373.201 li
191.674 372.935 li
192.007 372.471 li
192.125 371.83 li
192.043 371.2 li
191.804 370.535 li
191.411 369.972 li
190.869 369.668 li
190.6 369.634 li
190.059 369.659 li
187.712 370.23 li
186.975 370.211 li
186.629 370.277 li
186.399 370.712 li
186.063 371.157 li
185.977 371.25 li
185.638 371.453 li
185.289 371.927 li
185.01 372.46 li
184.859 372.845 li
185.478 372.692 li
185.948 372.453 li
cp
184.917 374.237 mo
185.39 374.077 li
185.798 373.91 li
186.16 373.86 li
186.484 373.726 li
186.493 373.576 li
186.075 373.44 li
185.662 373.455 li
185.373 373.615 li
184.917 373.615 li
184.318 373.757 li
184.219 374.014 li
184.206 374.135 li
184.346 374.251 li
184.917 374.237 li
cp
188.459 440.299 mo
188.293 440.038 li
188.541 439.429 li
188.692 439.241 li
188.153 439.369 li
186.677 440.438 li
186.677 440.655 li
187.745 440.462 li
187.984 440.547 li
188.257 440.979 li
188.413 441.146 li
188.692 441.257 li
188.698 440.916 li
188.604 440.594 li
188.459 440.299 li
cp
188.662 383.757 mo
188.208 383.857 li
187.821 384.138 li
187.77 384.533 li
187.854 384.857 li
187.8 384.964 li
187.921 385.028 li
188.208 384.925 li
189.016 384.391 li
189.212 384.166 li
189.063 383.928 li
188.662 383.757 li
cp
185.631 381.425 mo
185.543 381.438 li
185.478 381.595 li
185.51 381.756 li
185.86 381.862 li
185.934 381.835 li
185.934 381.63 li
185.815 381.475 li
185.631 381.425 li
cp
197.427 397.03 mo
197.253 397.016 li
196.815 397.051 li
197.079 397.282 li
197.461 397.592 li
197.421 397.414 li
197.461 397.165 li
197.427 397.03 li
cp
187.159 380.52 mo
187.082 380.369 li
186.871 380.374 li
186.744 380.409 li
186.617 380.409 li
186.115 380.544 li
186.057 380.604 li
186.036 380.736 li
185.882 380.858 li
185.804 380.979 li
185.86 381.064 li
186.215 381.146 li
186.469 381.149 li
187.037 380.689 li
187.159 380.52 li
cp
692.07 317.773 mo
691.463 317.574 li
689.916 316.566 li
689.586 316.477 li
688.533 316.363 li
688.281 316.239 li
687.79 315.886 li
687.585 315.796 li
687.027 315.847 li
686.773 316.174 li
686.581 316.665 li
686.2 317.217 li
685.642 317.443 li
683.358 317.345 li
683.107 317.212 li
682.568 316.69 li
682.525 316.575 li
682.146 316.677 li
682.133 316.915 li
682.234 317.193 li
682.201 317.413 li
681.626 317.689 li
681.073 317.74 li
680.552 317.876 li
680.084 318.404 li
680.704 319.113 li
682.582 318.876 li
683.265 319.297 li
683.665 319.19 li
684.053 319.264 li
684.285 319.234 li
684.231 318.786 li
684.459 318.586 li
684.696 318.742 li
684.939 318.696 li
685.225 318.581 li
685.607 318.556 li
685.963 318.663 li
686.249 318.85 li
686.753 319.368 li
687.198 319.996 li
687.957 322.035 li
687.983 322.793 li
687.416 323.205 li
686.778 323.477 li
686.592 323.799 li
686.265 324.03 li
684.604 324.864 li
684.001 325.041 li
683.748 325.233 li
683.838 325.399 li
684.071 325.562 li
684.242 325.745 li
684.619 327.018 li
684.692 327.623 li
684.642 328.289 li
684.792 328.583 li
685.235 328.742 li
686.787 328.973 li
686.979 328.953 li
687.264 328.348 li
688.463 328.056 li
689.167 327.639 li
689.875 327.498 li
690.164 327.361 li
690.86 327.32 li
691.926 327.427 li
692.695 327.291 li
692.499 326.525 li
692.245 326.331 li
691.596 326.076 li
691.313 325.794 li
690.962 325.234 li
690.896 324.918 li
690.94 324.438 li
690.906 323.733 li
689.821 324.348 li
689.313 323.857 li
689.294 323.457 li
689.389 323.07 li
689.445 322.668 li
689.329 322.235 li
688.667 321.056 li
688.866 320.662 li
690.954 319.535 li
688.758 318.756 li
688.359 318.308 li
688.425 317.572 li
689.016 317.487 li
690.385 317.936 li
691.746 318.148 li
692.446 318.488 li
692.787 319.177 li
692.585 319.746 li
692.057 320.362 li
691.456 320.854 li
691.023 321.079 li
691.111 321.408 li
691.102 321.74 li
690.962 322.474 li
690.988 322.764 li
691.147 322.862 li
691.335 322.784 li
691.459 322.546 li
691.655 321.965 li
691.967 321.489 li
693.534 319.789 li
694.601 318.93 li
695.705 318.603 li
696.632 319.293 li
696.728 318.814 li
696.959 318.474 li
697.284 318.311 li
697.68 318.365 li
697.717 318.173 li
692.07 317.773 li
cp
695.39 334.188 mo
695.348 333.993 li
695.368 333.791 li
695.372 333.594 li
695.271 333.421 li
694.938 333.274 li
694.447 333.209 li
693.934 333.242 li
693.535 333.373 li
693.166 333.671 li
693.226 333.833 li
693.473 334.04 li
693.665 334.474 li
693.581 334.699 li
693.107 335.453 li
692.921 335.679 li
692.998 335.785 li
692.886 335.867 li
692.961 335.98 li
693.072 336.245 li
693.147 336.357 li
693.031 336.787 li
693.567 336.67 li
694.577 336.237 li
694.786 335.591 li
695.107 335.236 li
696.072 334.831 li
695.523 334.357 li
695.39 334.188 li
cp
552.013 430.52 mo
552.023 430.627 li
552.329 430.501 li
552.251 430.463 li
552.013 430.52 li
cp
552.45 430.976 mo
552.461 431.054 li
552.578 431.118 li
552.571 431.04 li
552.45 430.976 li
cp
545.481 486.837 mo
545.089 486.704 li
544.666 486.691 li
544.267 486.775 li
543.782 487.046 li
542.535 488.029 li
542.229 488.375 li
542.266 489.184 li
542.935 489.607 li
543.854 489.765 li
545.054 489.785 li
545.285 489.757 li
545.41 489.564 li
545.445 489.073 li
545.567 488.578 li
545.788 488.087 li
545.923 487.599 li
545.788 487.107 li
545.481 486.837 li
cp
551.67 430.441 mo
551.692 430.398 li
551.653 430.384 li
551.67 430.441 li
cp
553.262 430.872 mo
553.276 430.765 li
553.237 430.775 li
553.262 430.872 li
cp
174.053 523.25 mo
173.179 522.901 li
172.855 522.869 li
172.667 522.937 li
172.289 523.197 li
170.041 523.561 li
169.63 523.55 li
168.822 523.101 li
168.36 522.92 li
167.821 522.869 li
168.055 523.236 li
168.338 523.482 li
169.02 523.87 li
169.279 524.116 li
169.407 524.304 li
169.615 524.426 li
173.635 524.649 li
173.838 524.376 li
174.243 524.429 li
174.646 524.394 li
175.432 524.126 li
176.258 524.009 li
176.669 523.87 li
176.049 523.586 li
174.053 523.25 li
cp
178.475 514.352 mo
178.356 514.009 li
178.465 513.841 li
177.144 514.041 li
176.669 514.026 li
176.732 513.834 li
176.796 513.432 li
176.851 513.244 li
176.463 513.354 li
175.051 513.55 li
174.651 513.535 li
174.14 513.354 li
173.746 513.403 li
173.356 513.546 li
172.855 513.642 li
173.484 514.126 li
173.414 514.771 li
173.061 515.477 li
172.855 516.139 li
172.722 517.04 li
172.35 517.73 li
171.771 518.258 li
167.857 520.023 li
166.724 521.213 li
167.02 522.869 li
167.703 522.264 li
168.084 521.996 li
168.33 521.972 li
168.692 522.335 li
169.028 522.545 li
169.415 522.646 li
169.937 522.67 li
170.368 522.61 li
170.668 522.42 li
170.831 522.11 li
170.837 521.673 li
170.694 521.316 li
170.46 521.113 li
170.159 520.939 li
169.838 520.672 li
170.26 520.676 li
170.937 520.993 li
171.346 521.073 li
171.594 520.957 li
171.43 520.697 li
171.101 520.431 li
170.837 520.272 li
171.225 519.968 li
171.63 520.013 li
172.023 520.263 li
172.343 520.562 li
172.488 520.986 li
172.308 521.442 li
172.017 521.886 li
171.835 522.271 li
172.582 521.965 li
172.921 521.759 li
173.233 521.455 li
173.702 522.089 li
174.536 522.381 li
175.455 522.588 li
176.157 522.97 li
176.611 523.132 li
177.071 522.861 li
177.4 522.371 li
177.467 521.872 li
177.246 521.676 li
176.771 521.459 li
176.246 521.3 li
175.852 521.274 li
175.852 521.073 li
176.094 521.092 li
176.602 521.053 li
176.851 521.073 li
176.727 520.818 li
176.682 520.565 li
176.717 520.313 li
176.851 520.052 li
176.467 520.01 li
175.701 520.077 li
175.25 520.052 li
175.583 519.571 li
175.852 519.055 li
175.232 519.023 li
174.213 518.652 li
173.635 518.656 li
173.635 518.457 li
174.416 518.35 li
175.97 518.464 li
176.669 518.258 li
176.248 518.062 li
175.779 517.954 li
175.296 517.951 li
174.852 518.059 li
175.438 517.585 li
175.67 517.457 li
175.577 517.289 li
175.45 516.857 li
175.643 516.923 li
176.058 516.997 li
176.248 517.057 li
175.97 516.345 li
175.762 516.057 li
175.45 515.839 li
175.951 515.654 li
176.302 515.774 li
176.663 515.85 li
177.168 515.54 li
177.273 515.319 li
177.301 515.092 li
177.387 514.914 li
177.664 514.843 li
178.887 514.843 li
178.692 514.689 li
178.475 514.352 li
cp
553.271 430.603 mo
553.237 430.623 li
553.273 430.677 li
553.271 430.603 li
cp
0 0 0 0 cmyk
f
.25 lw
1 lc
1 lj
4 ml
[] 0 dsh
true sadj
434.062 111.646 mo
434.428 111.39 li
434.729 111.441 li
435.367 111.931 li
435.151 112.148 li
436.34 112.515 li
436.971 112.587 li
437.575 112.524 li
438.163 112.354 li
438.398 112.348 li
438.776 112.385 li
438.907 112.318 li
438.985 112.098 li
438.957 111.81 li
438.733 111.22 li
438.766 110.93 li
439.086 110.688 li
439.502 110.591 li
439.728 110.44 li
439.471 110.041 li
439.172 109.729 li
439.016 109.645 li
438.363 109.932 li
437.077 110.839 li
436.533 111.127 li
436.227 110.981 li
435.99 110.691 li
435.671 110.531 li
434.195 110.558 li
433.973 110.531 li
433.719 110.888 li
433.654 111.387 li
433.772 111.735 li
434.062 111.646 li
cp
436.768 94.9263 mo
437.263 94.8721 li
437.703 94.7358 li
437.964 94.4937 li
437.964 94.1216 li
437.746 93.8188 li
437.486 93.5771 li
437.365 93.3931 li
436.968 93.3687 li
436.223 93.7046 li
435.799 94.2607 li
436.365 94.9082 li
436.768 94.9263 li
cp
429.135 99.7056 mo
429.063 100.059 li
429.354 100.779 li
429.339 101.103 li
428.911 101.369 li
429.196 101.487 li
430.24 101.505 li
430.678 101.388 li
430.738 101.1 li
430.538 100.396 li
430.376 99.9961 li
429.99 99.6479 li
429.531 99.5 li
429.135 99.7056 li
cp
465.425 170.091 mo
465.2 170.359 li
464.028 171.109 li
462.722 172.259 li
462.209 172.506 li
461.244 172.835 li
460.891 173.06 li
460.432 173.506 li
460.143 173.374 li
459.783 173.313 li
459.132 173.306 li
458.637 173.385 li
458.483 173.592 li
458.577 173.91 li
458.829 174.307 li
458.349 174.424 li
457.127 174.307 li
456.682 174.378 li
455.415 174.924 li
455.563 174.128 li
455.784 173.735 li
456.069 172.824 li
457.263 171.131 li
457.415 170.709 li
457.345 170.065 li
457.069 169.716 li
456.635 169.68 li
455.57 170.306 li
455.283 170.091 li
455.187 169.601 li
455.196 169.094 li
455.46 168.019 li
456.03 167.122 li
456.889 166.5 li
458.584 166.14 li
458.761 166.208 li
458.829 166.586 li
458.95 166.708 li
459.229 166.512 li
459.527 166.226 li
459.723 166.076 li
460.403 166.19 li
460.499 166.493 li
460.418 166.944 li
460.613 167.494 li
461.361 166.85 li
461.824 166.647 li
462.027 166.976 li
462.056 167.458 li
462.176 167.805 li
462.448 168.019 li
462.928 168.094 li
463.249 168.058 li
463.684 167.929 li
464.064 167.648 li
464.229 167.176 li
464.35 167.051 li
464.625 167.133 li
464.9 167.341 li
465.021 167.583 li
464.916 168.265 li
464.927 168.384 li
465.115 168.694 li
465.314 169.163 li
465.438 169.673 li
465.425 170.091 li
cp
536.703 136.894 mo
536.236 136.597 li
535.805 136.44 li
535.438 136.386 li
534.538 136.397 li
534.156 136.304 li
533.598 135.893 li
533.227 135.798 li
532.201 135.805 li
531.706 135.75 li
531.226 135.599 li
530.898 135.394 li
530.356 134.937 li
530.004 134.8 li
530.004 134.598 li
530.402 134.286 li
530.032 134.044 li
529.355 133.875 li
522.148 133.594 li
520.994 133.4 li
521.336 133.86 li
521.482 134.184 li
521.378 134.468 li
520.994 134.8 li
520.446 134.995 li
519.146 135.104 li
518.701 135.3 li
518.006 136.143 li
517.618 136.47 li
517.091 136.597 li
516.497 136.631 li
513.579 137.299 li
513.368 137.507 li
513.294 137.846 li
513.113 138.109 li
512.672 138.515 li
512.337 139.029 li
512.006 140.097 li
511.546 140.614 li
510.328 141.14 li
510.149 141.321 li
510.062 141.603 li
509.572 142.32 li
509.577 143.07 li
509.456 143.33 li
509.152 143.648 li
508.263 144.256 li
505.997 145.369 li
505.467 145.744 li
504.763 146.092 li
502.145 146.243 li
501.269 146.424 li
500.941 146.443 li
500.741 146.536 li
500.738 146.745 li
500.758 146.951 li
500.646 147.042 li
500.471 147.096 li
500.342 147.192 li
500.211 147.238 li
500.032 147.141 li
499.716 146.705 li
499.645 146.645 li
497.726 146.645 li
497.352 146.494 li
497.109 146.276 li
496.82 146.144 li
496.325 146.243 li
496.543 146.548 li
496.67 146.954 li
496.596 147.308 li
496.219 147.462 li
495.798 147.407 li
495.422 147.269 li
494.067 146.506 li
493.89 146.322 li
494.214 146.243 li
495.93 146.243 li
494.826 145.759 li
492.102 145.469 li
490.504 144.658 li
488.517 144.428 li
486.753 143.89 li
484.904 143.648 li
483.719 143.194 li
477.871 139.813 li
477.518 140.009 li
477.318 139.921 li
477.194 139.73 li
477.056 139.613 li
476.176 139.613 li
475.82 139.489 li
475.114 138.939 li
474.776 138.814 li
473.93 138.657 li
472.166 137.971 li
471.365 137.816 li
470.649 137.486 li
469.616 135.999 li
469.047 135.599 li
468.654 135.714 li
468.807 136.125 li
469.463 136.996 li
469.861 138.415 li
469.428 138.454 li
468.965 138.566 li
468.594 138.578 li
468.444 138.315 li
468.458 137.816 li
468.42 137.459 li
468.257 137.196 li
467.864 136.996 li
467.301 136.924 li
467.105 137.156 li
466.959 137.462 li
466.539 137.614 li
466.24 137.447 li
465.994 137.133 li
465.698 136.96 li
465.25 137.214 li
464.962 136.785 li
464.795 136.358 li
464.551 136.007 li
464.032 135.798 li
463.926 135.859 li
463.814 136.004 li
463.662 136.149 li
463.43 136.216 li
462.914 136.198 li
462.764 136.137 li
462.614 135.999 li
462.565 135.856 li
462.431 135.2 li
462.477 135.097 li
462.59 134.94 li
462.668 134.764 li
462.614 134.598 li
462.493 134.543 li
462.191 134.495 li
462.035 134.401 li
461.952 134.41 li
461.806 134.453 li
461.629 134.419 li
461.433 134.202 li
461.383 133.993 li
461.425 133.772 li
461.511 133.567 li
461.617 133.4 li
461.475 133.282 li
461.211 132.958 li
461.034 132.783 li
462.402 132.575 li
463.159 132.607 li
463.737 132.892 li
464.139 133.267 li
464.627 133.63 li
465.646 134.202 li
464.73 134.468 li
464.43 134.598 li
464.916 134.966 li
465.36 135.024 li
465.795 134.97 li
466.248 135 li
466.6 135.145 li
467.643 135.798 li
467.529 135.297 li
467.177 134.93 li
466.34 134.301 li
466.094 133.948 li
465.634 133.08 li
465.342 132.692 li
464.936 132.353 li
464.445 132.036 li
463.914 131.77 li
463.43 131.604 li
462.251 131.453 li
461.975 131.262 li
462.216 130.802 li
462.451 130.763 li
462.672 130.93 li
462.818 130.986 li
462.832 130.605 li
462.718 130.361 li
462.306 130.104 li
462.216 129.895 li
462.096 129.465 li
461.558 128.552 li
461.433 128.089 li
461.319 126.918 li
461.034 125.772 li
460.756 125.24 li
460.414 124.965 li
459.413 124.589 li
459.809 124.256 li
459.766 123.749 li
459.549 123.107 li
459.413 122.375 li
459.633 122.375 li
459.769 122.696 li
459.934 122.983 li
460.153 123.216 li
460.435 123.373 li
460.297 122.99 li
460.332 122.139 li
460.235 121.776 li
459.983 121.67 li
459.592 121.619 li
459.299 121.519 li
459.325 121.277 li
459.818 120.614 li
460.25 119.844 li
460.344 119.109 li
459.818 118.562 li
459.631 118.801 li
459.299 119.111 li
458.979 119.272 li
458.836 119.069 li
458.961 118.767 li
459.199 118.446 li
459.385 118.131 li
459.325 117.841 li
459.32 117.675 li
459.413 116.744 li
459.235 115.346 li
459.117 114.958 li
458.99 114.726 li
458.53 114.245 li
458.4 113.933 li
458.438 113.177 li
458.327 112.856 li
457.661 112.409 li
456.461 112.618 li
455.824 112.348 li
455.438 112.745 li
455.666 113.664 li
455.2 113.964 li
455.232 114.291 li
454.994 114.302 li
454.642 114.118 li
454.317 113.858 li
454.243 113.622 li
454.349 113.407 li
454.371 113.195 li
454.021 112.965 li
454.456 112.352 li
454.918 111.84 li
455.286 111.598 li
456.037 111.353 li
456.418 111.147 li
456.988 110.292 li
457.131 110.15 li
457.953 110.237 li
458.255 110.138 li
458.419 109.751 li
458.352 109.267 li
458.053 109.296 li
457.661 109.478 li
457.329 109.433 li
456.938 109.088 li
456.568 108.949 li
456.155 108.976 li
455.625 109.133 li
454.898 109.611 li
454.474 109.781 li
454.11 109.642 li
453.794 109.436 li
453.381 109.381 li
453.015 109.484 li
452.807 109.751 li
452.985 109.783 li
453.406 109.932 li
452.226 110.679 li
451.813 110.601 li
451.61 109.751 li
451.704 109.454 li
451.892 109.166 li
451.992 108.863 li
451.807 108.531 li
451.486 108.45 li
450.642 108.553 li
450.307 108.435 li
450.136 108.099 li
450.229 107.845 li
450.518 107.788 li
450.897 108.035 li
451.208 108.163 li
451.286 107.778 li
451.208 107.034 li
450.987 106.266 li
450.463 106.129 li
449.801 106.118 li
449.193 105.719 li
449.826 105.141 li
449.875 104.391 li
449.541 103.65 li
449.011 103.102 li
448.242 103.8 li
447.945 103.767 li
447.341 103.302 li
447.103 103.193 li
446.995 103.102 li
446.932 103.011 li
446.813 102.779 li
446.635 102.516 li
446.511 102.279 li
446.322 102.134 li
445.35 102.303 li
444.626 102.198 li
444.036 102.198 li
443.797 102.612 li
443.884 103.74 li
444.024 104.218 li
444.278 104.611 li
444.767 104.971 li
445.853 105.304 li
446.375 105.537 li
446.91 106.142 li
446.995 106.217 li
447.119 106.474 li
447.408 106.571 li
447.746 106.617 li
447.992 106.716 li
448.135 107.379 li
447.757 108.09 li
447.543 108.87 li
448.209 109.751 li
448.031 110.043 li
448.046 110.346 li
448.196 110.648 li
448.395 110.93 li
448.538 110.791 li
449.011 110.531 li
449.149 111.251 li
448.662 111.593 li
447.194 111.931 li
447.373 111.992 li
447.543 112.076 li
447.746 112.143 li
447.992 112.148 li
447.808 112.442 li
447.501 112.569 li
447.135 112.635 li
446.778 112.747 li
447.177 112.926 li
447.637 112.984 li
448.594 112.965 li
448.156 113.461 li
447.516 113.468 li
446.816 113.364 li
446.197 113.546 li
446.568 113.821 li
446.721 114.118 li
446.816 114.429 li
446.995 114.744 li
447.296 115.01 li
448.038 115.44 li
448.395 115.727 li
448.669 116.068 li
448.875 116.411 li
449.57 118.216 li
449.698 118.452 li
449.841 118.815 li
449.811 120.357 li
449.897 120.781 li
450.407 121.667 li
450.472 122.037 li
450.746 122.82 li
450.862 123.749 li
451.041 124.181 li
451.354 124.49 li
451.807 124.589 li
451.269 124.867 li
450.748 124.801 li
450.364 124.454 li
450.207 123.873 li
450.226 123.216 li
450.136 122.908 li
449.897 122.775 li
449.491 122.835 li
449.335 122.986 li
449.239 123.18 li
449.011 123.373 li
447.875 123.815 li
446.539 124.09 li
445.236 124.057 li
444.175 123.573 li
443.723 123.131 li
443.278 122.578 li
442.935 121.949 li
442.797 121.277 li
443.167 119.233 li
443.195 118.562 li
443.117 118.131 li
442.975 117.784 li
442.764 117.497 li
441.729 116.459 li
441.49 116.344 li
441.111 116.247 li
440.481 115.821 li
440.18 115.727 li
439.919 115.775 li
438.965 116.144 li
438.815 116.103 li
438.658 115.987 li
438.479 115.924 li
437.796 116.308 li
437.302 116.441 li
436.974 116.622 li
436.613 116.744 li
436.166 116.644 li
435.788 116.135 li
436.123 114.798 li
435.771 114.126 li
435.151 113.924 li
434.225 113.84 li
433.537 113.976 li
433.654 114.465 li
434.136 115.176 li
433.765 115.394 li
433.018 115.421 li
432.354 115.563 li
432.404 114.798 li
432.176 114.126 li
431.54 112.747 li
431.34 112.747 li
430.538 115.945 li
430.258 116.274 li
430.063 116.308 li
429.901 116.105 li
429.737 115.727 li
429.603 115.167 li
429.756 114.91 li
430.044 114.717 li
430.339 114.366 li
430.433 113.483 li
429.795 113.15 li
427.958 113.147 li
426.604 112.905 li
426.145 112.965 li
425.767 113.129 li
425.457 113.353 li
425.189 113.634 li
424.941 113.964 li
424.741 113.746 li
424.688 114.052 li
424.713 114.457 li
424.677 114.811 li
424.436 114.965 li
424.075 114.798 li
423.943 114.402 li
423.915 113.153 li
423.925 112.986 li
423.791 112.875 li
423.326 112.647 li
423.175 112.415 li
423.455 112.185 li
423.875 111.962 li
424.143 111.75 li
423.634 111.643 li
422.594 111.771 li
422.349 111.75 li
422.349 111.55 li
422.833 111.118 li
423.295 110.863 li
424.336 110.44 li
424.76 110.44 li
425.176 111.244 li
425.741 111.35 li
425.604 111.601 li
425.585 111.819 li
425.695 112 li
425.94 112.148 li
426.707 111.81 li
427.127 111.926 li
427.505 112.203 li
428.142 112.348 li
426.387 107.948 li
425.938 107.222 li
425.344 106.716 li
426.564 107.098 li
427.042 107.134 li
427.757 106.917 li
429.11 106.281 li
429.25 106.124 li
428.936 105.918 li
428.588 105.921 li
427.341 106.317 li
426.535 106.272 li
426.134 106.178 li
425.841 106.018 li
425.464 105.7 li
425.325 105.618 li
425.344 105.02 li
425.258 104.624 li
424.934 104.106 li
424.941 103.719 li
425.118 103.517 li
425.727 103.205 li
425.94 102.903 li
425.714 102.688 li
425.481 102.518 li
425.226 102.394 li
424.941 102.322 li
424.941 102.104 li
425.607 102.074 li
425.674 101.578 li
425.143 100.286 li
425.902 100.534 li
426.365 101.115 li
426.959 102.503 li
427.085 102.035 li
427.151 101.511 li
427.092 101.009 li
426.621 100.229 li
426.216 99.022 li
426.145 98.6138 li
426.64 98.5439 li
429.054 98.6465 li
429.94 98.5259 li
429.235 98.3477 li
428.424 98.2563 li
427.768 98.0449 li
427.54 97.5068 li
427.598 97.1865 li
427.686 97.1582 li
427.803 97.2041 li
427.958 97.1069 li
427.972 97.1582 li
428.035 97.2227 li
428.135 97.2554 li
428.241 97.2065 li
428.316 97.0771 li
428.253 97.0225 li
428.159 96.9893 li
428.142 96.9077 li
428.316 96.5146 li
428.296 96.3486 li
427.54 96.0908 li
426.325 95.4131 li
425.382 94.5488 li
423.745 92.4941 li
423.23 92.0229 li
422.796 91.7383 li
422.49 91.3877 li
422.349 90.6953 li
422.433 90.3774 li
422.59 90.126 li
422.633 89.8569 li
422.349 89.4785 li
422.031 89.3301 li
421.286 89.3301 li
420.93 89.2793 li
420.382 89.0371 li
419.067 88.2451 li
418.712 87.8789 li
418.662 87.3496 li
418.701 86.5962 li
418.594 85.8828 li
418.113 85.4653 li
418.772 84.9355 li
419.274 84.3555 li
419.396 83.7803 li
418.915 83.2661 li
418.277 83.0884 li
416.344 82.8789 li
415.807 82.9585 li
415.586 83.2817 li
415.403 83.6597 li
415.151 83.9072 li
414.701 83.8472 li
414.488 83.6172 li
414.406 83.2603 li
414.45 82.873 li
414.603 82.5771 li
414.701 82.0811 li
414.566 80.4951 li
414.701 79.8516 li
415.022 80.1626 li
415.251 80.4834 li
415.403 80.8374 li
415.496 81.249 li
415.485 81.7842 li
415.386 82.0229 li
415.446 82.0811 li
415.916 82.0684 li
416.048 81.9712 li
416.208 81.5605 li
416.407 81.4697 li
416.586 81.5332 li
416.893 81.8018 li
417.096 81.8481 li
417.512 81.7573 li
418.274 81.4971 li
418.712 81.4697 li
418.676 81.9419 li
419.517 82.1416 li
419.314 82.6851 li
419.969 83.0454 li
420.525 83.5322 li
421.122 83.8379 li
421.929 83.6655 li
421.227 82.5771 li
421.155 82.3135 li
421.354 81.6118 li
421.327 81.249 li
421.034 80.9375 li
419.314 80.0688 li
419.624 79.999 li
419.951 79.8696 li
420.204 79.6641 li
420.311 79.3613 li
420.183 79.1104 li
419.88 78.9985 li
419.132 78.8535 li
419.552 78.6694 li
419.709 78.6328 li
418.598 78.1367 li
418.113 77.8037 li
418.421 77.6533 li
418.951 77.6709 li
420.261 77.8491 li
420.71 78.0518 li
421.095 77.0625 li
420.834 76.3701 li
419.42 75.145 li
417.893 74.1255 li
417.754 73.7744 li
418.915 73.6387 li
418.751 73.2852 li
418.061 72.2568 li
417.814 72.0415 li
417.735 71.9902 li
417.633 71.7427 li
417.512 71.6426 li
417.394 71.6333 li
417.319 71.6973 li
417.291 71.7754 li
417.313 71.8213 li
416.714 71.6973 li
416.116 71.6426 li
415.457 71.2256 li
414.385 69.2559 li
413.9 68.6084 li
414.182 68.8418 li
415.097 69.4258 li
415.919 70.1333 li
416.098 70.2241 li
416.529 69.9155 li
415.636 69.0205 li
415.916 68.6084 li
415.916 68.4272 li
415.258 68.458 li
414.62 68.4004 li
414.121 68.104 li
413.9 67.4077 li
414.079 66.7217 li
414.479 66.1318 li
414.73 65.5327 li
414.5 64.8125 li
413.595 65.4209 li
412.801 66.1289 li
412.641 66.4102 li
412.654 66.5518 li
412.611 66.6519 li
412.28 66.8091 li
412.277 66.7183 li
411.981 66.6309 li
411.589 66.582 li
411.283 66.6094 li
411.354 66.7183 li
411.505 67.0093 li
410.012 66.8394 li
409.307 66.8726 li
408.9 67.2085 li
408.704 67.0093 li
408.982 67.4688 li
409.702 67.7773 li
410.542 67.9526 li
411.19 68.0068 li
411.433 68.1333 li
411.529 68.4185 li
411.461 68.6968 li
411.19 68.8237 li
410.955 68.7329 li
410.767 68.5518 li
410.523 68.4033 li
410.104 68.4272 li
410.154 68.5576 li
410.247 68.8784 li
410.304 69.0078 li
409.973 68.9717 li
409.663 68.8721 li
409.082 68.6084 li
408.99 69.0112 li
408.787 69.4829 li
408.59 69.7969 li
408.506 69.7158 li
408.441 68.9297 li
408.345 68.5723 li
408.195 68.3154 li
407.088 67.3779 li
406.906 67.0093 li
406.987 66.6367 li
407.202 66.2676 li
407.255 65.8687 li
406.906 65.4116 li
406.611 65.5933 li
406.291 65.6538 li
405.974 65.5933 li
405.688 65.4116 li
405.063 65.6265 li
404.606 65.3301 li
404.699 64.9155 li
405.688 64.8125 li
405.134 64.1143 li
404.863 63.9268 li
405.158 63.7363 li
405.87 63.4126 li
406.211 63.8184 li
406.518 63.8184 li
406.761 63.6694 li
406.906 63.6304 li
407.033 63.9268 li
407.059 64.2529 li
407.156 64.5195 li
407.487 64.6279 li
408.704 64.311 li
408.48 63.5786 li
407.914 62.9741 li
407.194 62.5654 li
406.49 62.4141 li
404.805 62.5713 li
403.879 62.4541 li
403.473 61.9121 li
403.292 61.1982 li
402.833 60.7329 li
401.653 59.9946 li
401.147 59.4951 li
400.891 59.1538 li
400.974 58.9995 li
400.126 58.9478 li
399.68 58.9692 li
399.16 59.1963 li
398.666 59.2622 li
398.459 59.4165 li
398.42 59.5864 li
398.481 60.019 li
398.459 60.1968 li
397.86 61.1948 li
397.84 61.4673 li
397.9 61.6611 li
397.765 61.7764 li
397.151 61.8125 li
396.152 61.1045 li
396.108 60.8599 li
396.387 60.603 li
397.041 60.1968 li
397.199 59.9277 li
397.306 59.625 li
397.48 59.3623 li
397.86 59.1987 li
397.476 59.0596 li
397.276 59.0176 li
397.053 58.9995 li
396.8 58.9331 li
396.686 58.7754 li
396.6 58.5728 li
396.444 58.3794 li
396.369 58.2168 li
396.39 58.0225 li
396.34 57.8652 li
396.053 57.7988 li
395.831 57.8618 li
395.709 57.9985 li
395.638 58.1348 li
395.542 58.1982 li
394.652 58.1943 li
394.235 58.0557 li
393.926 57.4111 li
393.595 57.2607 li
393.191 57.3022 li
392.848 57.5991 li
392.52 57.1577 li
392.117 56.8574 li
391.735 56.8735 li
391.446 57.3813 li
391.482 57.8442 li
391.767 58.1768 li
392.146 58.4707 li
392.462 58.7974 li
392.398 58.939 li
392.063 59.4165 li
391.519 58.8149 li
390.959 58.6641 li
389.543 58.7974 li
388.894 58.6968 li
388.327 58.4277 li
387.833 58.0435 li
387.43 57.5991 li
387.159 57.2202 li
386.864 56.7041 li
386.728 56.1504 li
386.924 55.6812 li
387.206 55.5815 li
388.431 55.584 li
389.631 55.1641 li
389.187 54.707 li
389.101 54.4658 li
389.246 54.166 li
388.916 54.2148 li
388.031 54.583 li
388.214 54.1147 li
388.261 53.8452 li
388.23 53.585 li
388.085 53.2222 li
387.896 53.0171 li
387.649 53.0234 li
387.334 53.2764 li
387.334 53.4707 li
387.469 53.749 li
387.537 54.0938 li
387.334 54.4839 li
386.653 54.8315 li
385.924 54.9336 li
385.375 55.1343 li
385.215 55.7808 li
385.617 57.1938 li
385.691 58.0161 li
385.314 58.3794 li
384.898 58.5093 li
384.738 58.8096 li
384.648 59.1538 li
384.418 59.4165 li
384.189 59.4287 li
383.217 59.1987 li
382.891 59.1841 li
382.704 59.2051 li
382.622 59.0449 li
382.645 57.835 li
382.74 57.5356 li
382.918 57.2905 li
383.542 56.6646 li
383.626 56.3286 li
379.727 54.4351 li
378.498 53.4043 li
378.389 52.3701 li
379 52.7715 li
380.422 54.166 li
380.151 52.9414 li
379.161 51.9453 li
377.95 51.0654 li
377.002 50.1704 li
376.679 49.0239 li
376.384 47.312 li
375.949 45.8721 li
375.19 45.5576 li
375.635 46.1841 li
375.813 47.0249 li
375.734 47.8867 li
375.408 48.5737 li
375.119 48.7666 li
375.012 48.564 li
375.022 46.8799 li
374.969 46.502 li
374.809 46.1567 li
374.651 46.4497 li
374.406 46.583 li
374.111 46.5654 li
373.79 46.3931 li
373.937 46.1929 li
374.036 45.9932 li
374.192 45.5576 li
373.858 45.6123 li
373.63 45.7905 li
373.49 46.0625 li
373.409 46.3931 li
372.484 45.8203 li
372.192 45.5576 li
372.462 45.437 li
372.651 45.2642 li
372.765 45.0313 li
372.789 44.7378 li
373.273 44.9829 li
373.488 44.8018 li
373.587 44.1577 li
373.805 43.4229 li
374.03 43.3677 li
374.61 43.5405 li
374.552 43.6763 li
374.471 44.021 li
374.41 44.1577 li
374.827 44.2998 li
375.04 44.6475 li
375.154 44.9946 li
375.297 45.1548 li
375.767 45.1191 li
376.021 44.9893 li
376.139 44.7476 li
376.209 44.3564 li
376.154 42.7876 li
376.377 42.2031 li
377.224 41.7588 li
376.768 41.3506 li
376.43 41.4233 li
376.139 41.7139 li
375.806 41.9404 li
375.294 42.0186 li
371.967 41.7803 li
371.081 42.2671 li
370.169 42.4395 li
369.795 42.7568 li
369.051 42.3975 li
367.346 42.333 li
366.683 42.04 li
366.201 41.7651 li
366.067 42.0586 li
366.105 42.5239 li
366.163 42.7568 li
365.86 43.3047 li
365.663 43.5195 li
365.361 43.7583 li
367.847 44.9927 li
369.025 45.8359 li
374.994 52.3418 li
375.519 52.5688 li
375.896 52.8716 li
376.804 54.7832 li
377.346 55.4087 li
379.107 56.8813 li
379.491 57.3662 li
380.422 59.1987 li
380.817 60.6689 li
380.71 62.1689 li
380.151 63.542 li
379.207 64.6279 li
378.684 64.3984 li
378.109 64.2954 li
377.687 64.4585 li
377.622 65.0273 li
377.839 65.418 li
379.004 66.4282 li
379.691 67.1875 li
380.097 67.478 li
380.603 67.6079 li
381.145 67.5049 li
381.98 67.0996 li
382.423 67.2085 li
382.074 67.5562 li
381.044 68.1885 li
380.802 68.4272 li
380.974 68.7329 li
381.881 69.6069 li
382.201 69.8252 li
382.469 69.0688 li
382.791 68.4004 li
383.323 67.9409 li
384.219 67.8252 li
384.048 68.1523 li
383.802 68.458 li
383.217 69.0078 li
383.413 68.9932 li
383.819 69.0171 li
384.018 69.0078 li
383.018 69.9429 li
382.868 70.4326 li
383.217 71.2222 li
385.731 74.0923 li
385.967 74.2827 li
386.233 74.2378 li
386.333 73.9927 li
386.437 71.8213 li
386.383 71.8301 li
386.299 71.7427 li
386.222 71.5942 li
386.233 71.4219 li
386.508 71.1709 li
386.874 71.0347 li
387.069 70.8413 li
386.818 70.4238 li
387.38 70.0547 li
387.709 69.9067 li
387.933 69.9155 li
388.277 70.3535 li
388.474 70.457 li
388.745 70.3237 li
388.993 70.2358 li
389.32 70.1729 li
389.51 70.0332 li
389.229 69.4561 li
389.392 69.353 li
389.681 69.3774 li
390.433 69.7793 li
391.005 69.7827 li
391.476 69.5254 li
391.65 69.0078 li
391.419 68.5361 li
391.052 67.9858 li
390.935 67.4502 li
391.446 67.0093 li
391.921 68.3911 li
392.245 68.8237 li
392.252 67.7617 li
392.355 67.6079 li
392.679 67.6406 li
392.821 67.7529 li
392.85 67.9707 li
392.848 68.3154 li
393.175 68.4004 li
394.242 68.1333 li
393.766 68.7988 li
393.576 69.4106 li
393.464 69.6069 li
393.093 69.8096 li
392.903 69.7373 li
392.747 69.5977 li
392.462 69.6069 li
391.956 70.0146 li
391.831 70.5625 li
391.816 71.1372 li
391.65 71.6426 li
390.85 70.623 li
390.76 70.998 li
390.813 72.0117 li
390.749 72.2231 li
390.333 72.0996 li
390.015 71.812 li
389.741 71.4824 li
389.448 71.2222 li
389.41 71.3491 li
389.246 71.6426 li
388.681 71.4126 li
388.302 71.7939 li
388.097 72.4717 li
388.031 73.1304 li
387.814 73.6177 li
386.853 74.6768 li
386.637 75.145 li
386.818 75.6929 li
400.021 90.1626 li
401.076 91.8779 li
404.869 96.0908 li
405.802 98.9102 li
406.507 99.9326 li
407.921 99.9048 li
409.282 99.4272 li
409.862 99.0278 li
410.104 98.417 li
409.781 97.7759 li
409.183 97.2856 li
408.9 96.9321 li
409.502 96.7075 li
409.239 96.3389 li
408.818 96.3267 li
408.375 96.3755 li
408.004 96.2002 li
406.397 94.2002 li
406.173 94.0249 li
405.873 93.8496 li
405.617 93.6436 li
405.364 93.0811 li
405.034 92.894 li
404.656 92.7544 li
404.382 92.5947 li
404.157 92.2822 li
403.787 91.6328 li
403.58 91.3784 li
403.355 90.834 li
403.228 90.0654 li
402.971 89.376 li
402.365 89.0796 li
402.167 88.7744 li
400.656 87.062 li
400.781 86.5903 li
401.896 86.1035 li
402.073 85.4653 li
401.914 85.3198 li
401.629 85.1172 li
401.411 84.833 li
401.472 84.4463 li
401.675 84.4277 li
401.995 84.6123 li
402.305 84.8691 li
402.477 85.063 li
402.61 85.7983 li
402.334 86.252 li
401.254 87.062 li
402.167 87.6011 li
402.523 87.9453 li
402.861 88.8193 li
403.701 89.5337 li
403.89 89.978 li
403.915 91.1123 li
404.107 91.6509 li
404.569 91.8779 li
404.963 92.0166 li
405.469 92.3403 li
405.901 92.709 li
406.087 92.9844 li
406.372 93.1626 li
407.762 93.1963 li
408.303 93.2925 li
408.805 93.6621 li
409.129 94.0796 li
409.388 94.5122 li
410.09 95.3467 li
410.282 95.4556 li
410.604 95.4888 li
410.884 95.583 li
411.269 95.9849 li
411.505 96.0908 li
411.793 96.0938 li
412.042 96.0366 li
412.212 95.8853 li
412.28 95.6011 li
412.445 95.5405 li
413.498 95.3105 li
412.975 94.6665 li
412.658 94.4063 li
412.391 94.4004 li
412.152 94.7119 li
412.01 94.8511 li
411.793 94.9082 li
411.521 94.7871 li
411.525 94.5122 li
411.703 94.0918 li
411.396 93.7227 li
411.109 93.5474 li
410.731 93.4961 li
410.204 93.4927 li
409.813 93.3662 li
409.813 92.7339 li
409.502 92.4941 li
410.784 91.666 li
411.226 91.6841 li
411.102 92.4941 li
411.715 91.9048 li
412.035 91.7173 li
412.501 91.6934 li
412.234 92.2646 li
412.135 92.5669 li
412.099 92.894 li
412.123 93.3022 li
412.209 93.4019 li
412.397 93.396 li
412.718 93.4927 li
412.982 93.5107 li
413.234 93.4478 li
413.42 93.5327 li
413.498 93.9922 li
413.598 94.252 li
413.844 94.2607 li
414.168 94.2124 li
414.5 94.3091 li
414.349 94.4243 li
413.9 94.9082 li
414.741 94.5728 li
415.45 93.7676 li
415.838 92.7759 li
415.698 91.8779 li
416.81 92.1348 li
417.096 92.2944 li
417.438 92.7578 li
417.351 93.0215 li
416.987 93.0659 li
416.494 92.875 li
416.369 93.3047 li
416.329 93.5596 li
416.276 93.7744 li
416.098 94.0918 li
415.414 94.811 li
414.962 95.7495 li
414.809 96.4927 li
414.591 96.46 li
414.1 96.0908 li
413.242 95.8672 li
412.95 95.9849 li
413.099 96.5088 li
413.342 96.666 li
413.762 96.7925 li
414.5 96.9077 li
415.025 96.6689 li
415.606 96.2246 li
416.087 95.9673 li
416.315 96.3086 li
416.629 96.1426 li
417.33 95.6035 li
417.615 95.4888 li
418.024 95.459 li
418.438 95.356 li
418.818 95.1743 li
419.132 94.9082 li
419.238 95.1016 li
419.285 95.147 li
419.356 95.1743 li
419.527 95.3105 li
419.428 95.689 li
419.25 95.7944 li
419.004 95.8037 li
418.712 95.9092 li
417.915 96.5088 li
417.042 96.8257 li
416.672 97.0254 li
416.208 97.4067 li
415.735 97.6875 li
415.144 97.8354 li
413.9 97.9058 li
413.438 97.7578 li
413.042 97.543 li
412.722 97.6094 li
412.501 98.3076 li
412.099 98.1265 li
412.29 99.0645 li
412.936 99.5576 li
413.858 99.7295 li
415.577 99.6265 li
415.846 99.4937 li
416.208 99.2148 li
416.689 98.7134 li
416.889 98.7017 li
417.807 99.1665 li
417.854 99.3335 li
417.205 99.8057 li
417.089 100.141 li
417.334 100.468 li
417.686 100.788 li
417.915 101.103 li
417.431 101.554 li
417.313 101.702 li
417.33 101.799 li
417.338 103.323 li
417.451 103.543 li
417.714 103.102 li
417.942 103.438 li
417.665 104.744 li
417.915 105.319 li
418.071 105.25 li
418.53 105.119 li
418.374 105.395 li
417.907 105.721 li
417.714 105.918 li
417.586 106.354 li
417.53 106.835 li
417.411 107.158 li
417.096 107.134 li
416.789 107.724 li
416.494 107.391 li
416.205 106.726 li
415.916 106.317 li
415.928 106.517 li
415.902 106.934 li
415.916 107.134 li
415.325 106.816 li
415.044 106.744 li
414.701 106.716 li
414.859 106.411 li
414.892 106.133 li
414.776 105.894 li
414.5 105.719 li
414.9 105.676 li
415.332 105.534 li
415.624 105.386 li
415.596 105.319 li
415.278 105.277 li
414.1 104.92 li
414.541 104.63 li
414.57 104.3 li
414.289 104.033 li
413.798 103.919 li
413.377 103.698 li
412.718 102.724 li
412.135 102.286 li
411.692 101.323 li
411.283 101.103 li
410.859 101.23 li
410.573 101.544 li
410.104 102.322 li
409.948 101.901 li
409.983 101.501 li
410.304 100.703 li
409.93 100.743 li
409.706 100.903 li
409.585 101.166 li
409.502 101.505 li
409.684 102.851 li
410.546 104.197 li
414.581 108.302 li
416.098 110.531 li
416.646 111.84 li
417.291 114.595 li
418.477 117.935 li
418.815 118.452 li
419.402 118.698 li
420.086 118.507 li
420.721 118.056 li
421.126 117.545 li
421.823 118.056 li
422.066 118.044 li
422.349 117.742 li
422.49 117.412 li
422.672 116.707 li
422.929 116.344 li
423.697 115.876 li
424.677 115.646 li
426.65 115.563 li
428.541 115.836 li
428.424 116.156 li
428.135 116.449 li
427.775 116.662 li
427.44 116.744 li
427.11 117.103 li
427.163 117.756 li
427.59 118.047 li
428.343 117.324 li
428.604 117.756 li
428.809 118.319 li
429.079 118.692 li
429.537 118.562 li
430.101 118.945 li
431.593 119.423 li
431.54 119.741 li
431.782 120.083 li
431.924 120.485 li
431.846 120.82 li
431.439 120.957 li
431.053 120.775 li
429.94 119.741 li
429.222 119.798 li
428.555 120.222 li
427.341 121.396 li
427.369 120.757 li
427.17 120.69 li
425.582 121.804 li
425.143 121.977 li
425.664 122.173 li
427.138 122.396 li
427.722 122.375 li
427.291 122.654 li
426.906 122.69 li
426.04 122.557 li
425.703 122.763 li
425.773 123.216 li
426.145 123.973 li
425.824 124.662 li
425.318 124.338 li
424.894 123.606 li
424.78 122.663 li
423.302 120.346 li
423.355 120.168 li
423.637 119.85 li
423.697 119.544 li
423.401 119.299 li
422.975 119.178 li
421.812 119.466 li
420.987 119.309 li
420.506 119.348 li
420.71 120.158 li
421.948 122.042 li
422.131 122.666 li
422.237 122.923 li
422.929 123.973 li
423.228 124.901 li
424.407 127.152 li
424.842 127.687 li
425.489 128.132 li
425.902 127.968 li
426.742 126.77 li
426.984 126.579 li
427.552 126.286 li
427.84 126.089 li
428.241 125.929 li
428.544 126.047 li
428.694 126.256 li
428.634 126.371 li
427.922 126.607 li
427.529 127.169 li
427.277 127.837 li
426.959 128.389 li
426.632 128.561 li
425.773 128.735 li
425.443 128.896 li
425.183 129.25 li
425.176 129.565 li
425.489 130.908 li
427.177 134.147 li
429.054 139.897 li
429.553 140.357 li
430.447 140.036 li
430.649 140.091 li
430.82 140.184 li
430.938 140.212 li
431.087 140.079 li
431.197 139.746 li
431.34 139.613 li
432.555 139.014 li
432.765 139.456 li
432.658 139.858 li
432.348 140.188 li
431.935 140.432 li
432.224 140.481 li
432.466 140.599 li
432.641 140.783 li
432.755 141.031 li
431.172 141.233 li
429.52 141.246 li
428.132 141.648 li
427.341 143.027 li
427.127 145.805 li
427.231 146.342 li
428.039 146.806 li
428.405 146.443 li
428.658 145.75 li
429.135 145.245 li
429.812 145.302 li
430.158 145.805 li
430.118 146.37 li
429.638 146.645 li
428.72 147.462 li
428.346 147.595 li
428.057 147.634 li
427.803 147.731 li
427.54 148.042 li
427.408 148.36 li
427.306 148.829 li
427.344 149.255 li
427.629 149.44 li
428.104 149.364 li
428.296 149.159 li
428.409 148.868 li
428.634 148.533 li
429.222 148.402 li
430.037 148.608 li
430.621 149.047 li
430.538 149.621 li
430.756 149.842 li
430.98 149.682 li
431.204 149.621 li
431.757 149.621 li
431.223 150.241 li
430.396 150.287 li
429.499 150.193 li
428.72 150.422 li
429.317 150.913 li
429.537 151.04 li
428.943 151.276 li
428.533 151.064 li
428.17 150.686 li
427.722 150.422 li
427.722 150.84 li
427.54 150.84 li
427.352 150.674 li
427.151 150.451 li
427.002 150.166 li
426.959 149.842 li
426.496 149.993 li
425.945 150.075 li
425.403 150.039 li
424.941 149.842 li
424.802 150.274 li
424.947 150.78 li
425.192 151.315 li
425.344 151.838 li
425.308 152.453 li
425.019 153.496 li
424.868 155.217 li
424.648 156.345 li
424.271 157.376 li
423.239 159.226 li
423.003 160.316 li
422.929 165.371 li
422.82 165.882 li
422.633 166.318 li
422.55 166.759 li
422.743 167.279 li
422.295 167.38 li
422.124 167.685 li
422.131 168.585 li
422.066 168.967 li
421.789 169.663 li
421.551 170.73 li
421.109 171.338 li
417.602 174.203 li
416.315 174.959 li
414.9 175.325 li
411.002 175.107 li
410.354 175.255 li
402.871 178.921 li
399.851 179.974 li
398.523 180.809 li
397.658 182.119 li
397.273 183.513 li
397.127 184.859 li
397.299 186.196 li
397.86 187.551 li
398.744 188.723 li
399.81 189.617 li
403.78 191.914 li
405.472 192.358 li
410.461 192.971 li
412.042 193.359 li
413.501 194.003 li
414.701 194.979 li
416.407 197.07 li
416.963 197.604 li
420.079 199.88 li
420.78 200.232 li
421.528 200.375 li
423.32 200.514 li
425.674 201.19 li
428.049 201.173 li
428.809 201.28 li
430.433 201.87 li
432.476 202.861 li
435.151 205.204 li
435.738 206.027 li
437.964 207.804 li
438.427 208.466 li
438.812 209.243 li
439.363 210.82 li
439.742 212.729 li
440.199 213.419 li
441.181 213.616 li
442.108 213.334 li
442.818 212.768 li
443.366 212.027 li
443.797 211.219 li
443.982 211.219 li
443.955 211.952 li
443.711 212.547 li
443.306 213.017 li
442.797 213.398 li
442.146 213.783 li
441.782 213.936 li
441.396 214.018 li
440.92 213.968 li
440.6 213.875 li
440.418 213.979 li
440.304 215.14 li
439.938 216.817 li
439.681 217.33 li
439.638 217.58 li
439.666 218.014 li
439.755 218.459 li
439.948 218.915 li
439.755 219.008 li
439.487 219.043 li
439.273 219.046 li
439.178 219.118 li
439.175 219.286 li
439.2 219.478 li
439.187 219.627 li
439.021 220.304 li
438.917 221.948 li
438.672 222.546 li
438.359 223.045 li
437.569 225.041 li
436.193 227.379 li
434.556 229.478 li
432.822 230.909 li
432.555 231.354 li
431.935 232.69 li
431.843 233.419 li
431.757 233.711 li
431.54 234.071 li
431.283 234.339 li
430.944 234.605 li
430.574 234.809 li
430.24 234.887 li
429.891 235.011 li
429.378 235.546 li
429.035 235.667 li
428.809 235.852 li
429.029 236.24 li
429.378 236.589 li
429.537 236.667 li
429.652 237.059 li
429.66 237.358 li
429.513 237.618 li
429.135 237.885 li
428.755 237.123 li
428.459 237.138 li
428.073 237.473 li
427.44 237.686 li
426.995 237.967 li
426.279 239.217 li
425.543 239.727 li
424.41 240.773 li
423.925 241.101 li
422.597 241.301 li
422.066 241.518 li
421.728 242.098 li
422.003 243.114 li
423.074 243.946 li
424.499 244.509 li
425.841 244.716 li
426.226 244.58 li
426.586 244.313 li
426.925 244.12 li
427.231 244.206 li
427.558 244.389 li
427.875 244.337 li
428.145 244.15 li
428.343 243.915 li
428.526 243.248 li
428.109 242.96 li
426.742 242.7 li
426.906 242.227 li
427.156 241.871 li
427.498 241.578 li
427.958 241.301 li
428.569 241.083 li
429.432 240.973 li
430.2 241.14 li
430.538 241.8 li
430.4 242.543 li
429.762 243.694 li
429.537 244.313 li
429.569 245.029 li
429.766 245.563 li
429.82 246.043 li
429.438 246.603 li
429.499 246.849 li
429.895 247.152 li
430.538 247.511 li
431.006 247.593 li
431.329 247.554 li
431.607 247.391 li
433.042 246.215 li
433.712 245.858 li
434.463 245.713 li
435.257 245.781 li
438.752 246.799 li
439.076 247.003 li
439.207 247.315 li
438.733 249.499 li
438.766 249.912 li
438.957 250.267 li
439.207 250.563 li
439.335 250.888 li
439.187 251.326 li
439.645 251.617 li
439.919 252.53 li
440.379 252.726 li
442.623 252.562 li
443.099 252.419 li
444.061 251.593 li
444.549 251.326 li
446.558 250.717 li
453.003 246.913 li
454.716 246.244 li
456.18 245.442 li
457.263 244.574 li
461.725 241.8 li
464.69 238.662 li
465.314 237.555 li
466.248 234.887 li
466.571 234.274 li
467.077 233.608 li
467.696 233.075 li
469.146 232.618 li
469.599 232.052 li
470.061 230.673 li
471.083 228.722 li
471.757 227.886 li
472.886 225.692 li
473.081 225.425 li
473.291 225.303 li
473.769 225.254 li
473.967 225.15 li
474.553 224.31 li
474.708 223.987 li
474.829 223.647 li
474.872 223.352 li
475.133 222.978 li
476.875 221.646 li
478.573 219.531 li
479.142 219.388 li
479.868 219.523 li
480.585 219.484 li
481.088 218.83 li
481.41 216.746 li
483.288 213.797 li
482.985 213.833 li
482.715 213.957 li
482.479 214.161 li
482.287 214.417 li
482.39 213.825 li
482.656 213.338 li
483.383 212.529 li
483.708 212.352 li
483.972 212.487 li
484.221 212.714 li
484.506 212.815 li
484.748 212.732 li
486.019 211.828 li
487.201 210.51 li
487.92 209.42 li
488.387 208.416 li
488.47 208.281 li
488.841 207.835 li
488.9 207.7 li
488.918 207.504 li
488.865 206.764 li
488.89 206.383 li
489.018 206.105 li
489.42 205.617 li
490.044 204.427 li
491.02 201.853 li
491.415 201.283 li
491.564 201.201 li
492.02 201.055 li
492.134 200.991 li
492.187 200.795 li
492.17 200.624 li
492.134 200.485 li
492.134 200.375 li
492.799 198.419 li
493.024 198.096 li
493.697 197.893 li
494.064 197.718 li
494.377 197.494 li
494.513 197.27 li
494.819 196.547 li
495.339 195.97 li
495.442 195.571 li
494.513 195.378 li
493.519 195.478 li
493.006 195.468 li
492.621 195.279 li
492.415 195.122 li
491.652 194.673 li
491.175 194.474 li
491.001 194.306 li
490.812 194.317 li
490.517 194.745 li
490.435 195.101 li
490.488 195.728 li
490.371 195.899 li
489.876 195.628 li
489.947 194.805 li
490.517 193.256 li
490.343 190.532 li
490.133 189.93 li
489.802 189.605 li
489.47 189.399 li
489.217 189.135 li
489.117 188.648 li
489.138 188.138 li
489.237 187.753 li
489.444 187.421 li
489.813 187.052 li
490.133 186.241 li
490.235 186.149 li
490.916 185.733 li
491.971 184.844 li
492.683 184.094 li
493.078 183.522 li
493.388 182.875 li
493.512 182.227 li
493.856 181.874 li
497.874 180.376 li
503.295 178.308 li
504.058 177.767 li
504.332 177.835 li
504.595 178.028 li
504.958 178.141 li
509.693 178.244 li
514.324 178.41 li
514.766 178.541 li
515.656 179.024 li
515.966 179.14 li
516.343 178.686 li
516.896 178.655 li
517.315 178.889 li
517.295 179.23 li
517.02 179.56 li
516.76 179.98 li
516.532 180.458 li
516.383 180.938 li
516.354 181.801 li
516.578 182.738 li
517.383 184.535 li
517.824 184.155 li
518.288 183.861 li
518.651 183.531 li
518.903 182.593 li
519.599 181.121 li
521.197 179.837 li
520.788 179.1 li
519.822 178.713 li
517.796 178.541 li
518.013 177.958 li
518.401 177.527 li
518.633 177.101 li
518.38 176.525 li
518.587 176.036 li
518.668 174.89 li
519.064 174.024 li
519.381 172.31 li
519.406 170.776 li
519.594 170.122 li
520.107 169.393 li
520.174 169.055 li
519.926 168.734 li
519.381 168.277 li
519.316 168.142 li
519.228 167.83 li
519.214 167.678 li
519.245 167.33 li
519.352 167.31 li
519.544 167.373 li
519.798 167.279 li
520.41 166.92 li
521.15 166.768 li
521.895 166.901 li
523.049 167.742 li
523.569 167.524 li
526.55 165.456 li
529.844 162.573 li
530.012 162.334 li
529.986 160.44 li
530.114 160.184 li
531.219 159.733 li
531.418 159.484 li
531.439 159.071 li
531.269 158.759 li
530.969 158.55 li
530.605 158.45 li
530.803 158.069 li
530.873 157.428 li
531.005 157.05 li
531.471 156.645 li
531.729 156.366 li
531.824 156.034 li
531.518 155.644 li
530.958 155.132 li
530.546 154.546 li
530.717 153.947 li
531.157 153.441 li
531.507 152.864 li
531.604 152.277 li
530.873 151.043 li
531.157 150.586 li
531.749 150.229 li
532.222 149.842 li
532.383 149.077 li
532.072 148.438 li
531.642 147.828 li
531.418 147.141 li
531.514 146.827 li
531.734 146.542 li
532.222 146.043 li
532.547 145.577 li
533.367 143.741 li
533.786 143.1 li
534.84 142.517 li
535.246 141.793 li
535.838 140.432 li
536.949 139.513 li
537.493 138.775 li
537.742 138.515 li
537.8 138.019 li
537.344 137.426 li
536.703 136.894 li
cp
430.361 231.283 mo
431.469 230.317 li
431.966 229.602 li
431.906 229.449 li
431.646 229.349 li
431.482 229.374 li
431.259 229.399 li
431.103 229.478 li
430.824 229.993 li
430.671 230.18 li
429.773 230.888 li
429.662 231.03 li
429.599 231.193 li
429.698 231.344 li
429.891 231.404 li
430.361 231.283 li
cp
456.387 105.552 mo
456.632 105.601 li
456.821 105.719 li
456.874 105.828 li
456.885 105.927 li
456.863 106.018 li
456.821 106.1 li
456.731 106.227 li
456.696 106.338 li
456.764 106.438 li
457.134 106.583 li
457.373 106.634 li
457.493 106.646 li
457.684 106.653 li
457.864 106.641 li
458.053 106.602 li
458.234 106.535 li
458.095 106.245 li
457.907 106.054 li
457.658 105.951 li
457.329 105.918 li
457.009 105.15 li
456.821 104.92 li
456.022 105.119 li
456.165 105.435 li
456.387 105.552 li
cp
443.758 94.8325 mo
442.996 94.0918 li
443.195 94.7905 li
443.864 95.3833 li
444.695 95.6768 li
445.378 95.4888 li
445.585 95.7104 li
445.682 95.8735 li
445.688 96.0518 li
445.593 96.3086 li
446.297 96.1729 li
446.547 96.1636 li
446.778 96.3086 li
446.875 96.5654 li
446.941 97.3037 li
447.095 97.6094 li
447.405 97.6001 li
447.839 97.3945 li
448.223 97.2944 li
448.395 97.6094 li
448.409 97.9785 li
448.509 98.3291 li
448.729 98.5469 li
449.144 98.5078 li
449.417 98.2896 li
449.99 97.3071 li
449.751 97.1499 li
449.193 96.5088 li
449.168 96.3931 li
449.195 96.2544 li
449.199 96.1426 li
449.104 96.0908 li
448.935 96.0693 li
448.769 96.0034 li
448.615 95.9121 li
448.491 95.8096 li
448.122 95.3047 li
448.124 94.9629 li
448.288 94.6421 li
448.395 94.2002 li
448.544 93.9673 li
448.814 93.665 li
448.958 93.4053 li
448.697 93.2925 li
448.419 93.2446 li
447.668 92.9907 li
446.902 92.6064 li
446.482 92.2583 li
446.421 91.9233 li
446.995 91.6934 li
446.119 91.1641 li
445.994 90.9854 li
445.924 90.6226 li
445.728 90.3501 li
445.474 90.1719 li
445.178 90.0776 li
444.421 90.1685 li
444.086 90.6226 li
444.195 91.21 li
444.777 91.6934 li
444.449 91.9893 li
444.071 92.1011 li
443.195 92.0957 li
443.537 92.585 li
444.125 92.8335 li
444.526 93.084 li
444.278 93.5923 li
444.182 93.9102 li
444.241 94.3003 li
444.25 94.6699 li
443.982 94.9082 li
443.758 94.8325 li
cp
224.187 394.381 mo
224.286 394.287 li
224.309 394.131 li
224.223 393.981 li
224.094 394.057 li
223.73 394.091 li
223.639 394.17 li
223.945 394.191 li
224.187 394.381 li
cp
220.07 416.22 mo
220.284 416.114 li
220.294 415.975 li
220.387 415.958 li
220.502 415.837 li
220.373 415.577 li
220.095 415.619 li
219.696 415.541 li
219.536 415.723 li
219.654 415.854 li
219.811 415.954 li
219.807 416.21 li
220.07 416.22 li
cp
219.729 404.069 mo
220.063 403.843 li
220.373 403.348 li
219.992 403.131 li
219.601 403.059 li
219.169 403.095 li
218.831 403.29 li
218.71 403.678 li
218.892 404.059 li
219.287 404.167 li
219.729 404.069 li
cp
212.608 416.235 mo
211.912 416.556 li
211.563 416.969 li
211.797 417.317 li
212.463 417.17 li
213.176 416.819 li
213.561 416.57 li
213.279 416.183 li
212.608 416.235 li
cp
234.811 411.381 mo
235.16 411.467 li
235.486 411.495 li
235.811 411.355 li
235.889 411.163 li
236.071 410.416 li
236.214 410.138 li
235.982 410.054 li
235.719 409.89 li
235.505 409.679 li
235.412 409.448 li
235.313 409.334 li
235.092 409.377 li
234.704 409.537 li
234.323 409.558 li
232.745 409.949 li
232.417 409.939 li
232.417 409.739 li
232.646 409.639 li
232.783 409.52 li
232.884 409.361 li
232.994 409.159 li
231.847 408.803 li
231.103 408.667 li
230.298 408.255 li
229.999 408.158 li
229.357 408.394 li
228.336 409.297 li
227.602 409.358 li
229.023 407.983 li
229.109 407.66 li
228.813 407.093 li
229.365 406.897 li
231.018 406.943 li
230.818 407.344 li
233.468 407.521 li
234.194 407.344 li
234.194 407.162 li
233.597 406.943 li
234.173 406.563 li
233.819 406.196 li
233.154 405.926 li
232.795 405.844 li
232.623 405.445 li
232.21 405.175 li
231.719 404.938 li
231.306 404.644 li
228.695 402.104 li
228.183 401.703 li
227.624 401.374 li
226.249 400.887 li
225.921 400.939 li
225.512 401.229 li
225.13 401.382 li
224.682 401.328 li
223.896 401.129 li
223.008 401.149 li
222.356 401.303 li
221.943 401.728 li
221.79 402.551 li
221.722 402.71 li
221.608 402.855 li
221.559 403.022 li
221.684 403.236 li
221.819 403.379 li
221.908 403.504 li
221.954 403.647 li
221.969 403.835 li
221.854 404.053 li
221.627 404.27 li
221.502 404.525 li
221.684 404.843 li
222.67 405.872 li
223.055 406.499 li
223.207 407.162 li
223.141 407.567 li
222.973 407.885 li
222.484 408.457 li
222.104 408.696 li
221.242 408.696 li
220.879 408.85 li
220.739 409.479 li
220.964 410.259 li
221.078 410.961 li
220.572 411.355 li
220.177 411.331 li
219.828 411.204 li
219.45 411.125 li
218.974 411.246 li
218.279 411.566 li
217.973 411.762 li
217.674 412.055 li
217.446 412.464 li
217.449 412.792 li
217.549 413.13 li
217.592 413.571 li
217.446 413.935 li
217.246 414.241 li
217.253 414.512 li
217.756 414.754 li
216.744 415.099 li
216.146 415.423 li
215.58 415.481 li
215.28 415.669 li
214.938 416.133 li
214.579 416.845 li
214.395 417.589 li
214.558 418.151 li
215.156 418.287 li
216.153 418.241 li
217.14 418.073 li
217.674 417.877 li
218.09 417.461 li
218.61 417.079 li
218.98 417.076 li
218.974 417.787 li
219.892 417.107 li
220.216 416.73 li
220.572 416.171 li
218.792 416.645 li
217.884 416.763 li
217.353 416.371 li
218.207 416.164 li
219.711 415.338 li
220.174 415.573 li
220.362 414.86 li
220.373 414.754 li
220.597 414.655 li
221.085 414.572 li
221.694 414.185 li
221.933 414.397 li
222.126 414.817 li
222.406 415.171 li
222.77 415.207 li
223.831 415.089 li
224.286 415.26 li
224.674 415.506 li
225.184 415.665 li
225.701 415.677 li
226.097 415.463 li
226.634 414.978 li
228.46 413.807 li
229.201 413.571 li
231.018 413.354 li
233.197 413.354 li
232.859 412.902 li
233.873 413.204 li
234.194 413.055 li
234.009 412.337 li
234.165 412.129 li
234.811 412.153 li
235.034 412.275 li
235.252 412.652 li
235.412 412.757 li
235.637 412.768 li
235.943 412.733 li
236.159 412.643 li
236.11 412.457 li
235.735 412.168 li
234.411 411.557 li
234.411 411.355 li
234.811 411.381 li
cp
235.796 407.668 mo
235.814 407.471 li
235.583 407.269 li
235.345 407.396 li
235.256 407.617 li
235.615 407.71 li
235.796 407.668 li
cp
415.87 237.964 mo
415.799 237.739 li
415.314 237.686 li
414.935 237.811 li
414.603 238.049 li
414.221 238.252 li
413.697 238.284 li
413.883 238.611 li
414.182 238.804 li
414.535 238.839 li
414.9 238.683 li
414.923 239.221 li
414.45 239.706 li
413.798 239.887 li
413.299 239.502 li
411.793 240.798 li
411.525 240.927 li
410.813 240.877 li
410.504 240.898 li
410.407 240.944 li
410.095 241.175 li
409.948 241.297 li
409.937 241.297 li
409.918 241.301 li
409.94 241.301 li
411.429 241.362 li
411.881 241.301 li
412.174 241.151 li
412.9 240.656 li
413.299 240.5 li
413.818 240.482 li
414.36 240.521 li
414.885 240.496 li
415.314 240.281 li
415.511 239.939 li
415.691 239.067 li
415.916 238.683 li
415.817 238.295 li
415.87 237.964 li
cp
241.844 345.553 mo
241.836 345.563 li
241.84 345.559 li
241.844 345.553 li
cp
245.657 402.716 mo
245.319 402.967 li
244.896 403.095 li
244.44 403.131 li
244.682 403.497 li
244.995 403.778 li
245.191 404.038 li
245.056 404.345 li
245.333 404.069 li
245.943 403.586 li
246.302 402.98 li
245.839 402.332 li
245.657 402.716 li
cp
399.05 230.788 mo
398.648 230.524 li
398.302 230.18 li
397.86 229.858 li
397.687 230.186 li
397.633 230.55 li
397.687 230.92 li
397.86 231.253 li
397.946 231.144 li
398.26 230.855 li
398.409 231.184 li
398.388 231.479 li
398.198 231.709 li
397.86 231.853 li
397.817 231.97 li
397.811 232.07 li
397.776 232.17 li
397.658 232.273 li
398.037 232.436 li
398.462 232.416 li
398.891 232.273 li
399.261 232.07 li
399.347 231.942 li
399.431 231.732 li
399.556 231.54 li
399.756 231.454 li
400.475 231.253 li
400.649 231.112 li
400.991 230.745 li
401.166 230.673 li
401.753 230.702 li
401.874 230.673 li
402.055 230.335 li
402.167 229.577 li
402.255 229.274 li
402.384 229.113 li
402.808 228.715 li
402.971 228.64 li
403.11 228.551 li
403.054 228.356 li
402.871 228.057 li
403.159 227.301 li
403.263 226.895 li
403.274 226.479 li
403.139 226.047 li
402.989 226.226 li
402.672 227.06 li
402.404 227.387 li
402.135 227.622 li
401.472 228.057 li
402.477 228.057 li
402.018 228.366 li
401.099 228.594 li
400.873 228.875 li
400.728 228.395 li
400.81 227.867 li
400.792 227.433 li
400.368 227.259 li
400.115 227.383 li
399.969 227.657 li
399.855 228.057 li
399.542 227.992 li
399.46 227.75 li
399.425 227.519 li
399.261 227.476 li
399.1 227.732 li
398.729 228.848 li
398.658 229.274 li
398.744 229.756 li
398.979 230.14 li
399.297 230.439 li
399.655 230.673 li
399.655 230.855 li
399.05 230.788 li
cp
193.782 373.742 mo
194.511 373.742 li
195.697 373.391 li
195.815 373.301 li
195.794 373.134 li
195.651 373.002 li
193.88 372.877 li
193.537 373.012 li
193.263 373.244 li
193.263 373.412 li
193.471 373.486 li
193.338 373.597 li
193.782 373.742 li
cp
185.576 382.147 mo
185.322 382.059 li
185.057 382.04 li
184.893 382.176 li
184.881 382.356 li
185.325 382.774 li
185.471 382.856 li
185.604 382.667 li
185.703 382.375 li
185.821 382.211 li
185.764 382.164 li
185.576 382.147 li
cp
211.313 414.259 mo
211.163 414.286 li
211.043 414.409 li
211.061 414.559 li
211.113 414.74 li
211.064 414.875 li
211.303 414.547 li
211.349 414.444 li
211.316 414.376 li
211.313 414.259 li
cp
188.266 374.537 mo
189.088 374.466 li
189.249 374.415 li
189.488 374.474 li
192.663 373.611 li
192.747 373.543 li
192.6 373.462 li
192.428 373.475 li
190.991 373.543 li
189.904 373.918 li
189.143 373.945 li
188.776 374.217 li
188.108 374.291 li
188.017 374.384 li
188.111 374.438 li
188.108 374.502 li
188.266 374.537 li
cp
196.184 358.756 mo
196.505 359.123 li
196.743 359.53 li
197.312 359.74 li
197.95 359.893 li
198.429 360.107 li
198.942 360.473 li
199.336 360.555 li
200.319 360.424 li
199.224 358.458 li
198.807 357.464 li
198.537 356.41 li
198.455 356.304 li
198.38 356.235 li
198.325 356.153 li
198.319 356.008 li
196.553 358.009 li
196.355 358.294 li
196.411 358.427 li
196.12 358.529 li
196.184 358.756 li
cp
332.039 298.96 mo
331.562 299.541 li
330.85 299.822 li
328.905 300.16 li
328.464 300.658 li
328.737 300.966 li
329.354 301.442 li
329.977 302.059 li
330.262 302.757 li
330.475 303.458 li
328.464 302.657 li
327.124 302.345 li
326.775 302.158 li
326.035 301.98 li
319.899 302.856 li
319.137 302.556 li
318.335 302.072 li
317.292 301.824 li
316.245 301.82 li
315.422 302.059 li
315.305 301.524 li
315.906 301.357 li
317.42 301.46 li
320.233 302.059 li
320.893 302.03 li
321.646 301.842 li
322.256 301.514 li
322.451 301.063 li
322.181 300.73 li
320.636 299.441 li
321.038 299.466 li
321.608 299.744 li
322.63 300.424 li
322.833 300.616 li
323.064 301.029 li
323.25 301.222 li
323.616 301.46 li
323.838 301.519 li
326.565 301.361 li
327.264 301.46 li
328.527 301.87 li
329.126 302.137 li
329.663 302.457 li
329.219 301.973 li
328.634 301.574 li
328.107 301.137 li
327.883 300.542 li
328.129 299.886 li
328.566 299.559 li
328.77 299.249 li
328.281 298.644 li
327.993 298.526 li
327.655 298.477 li
327.381 298.334 li
327.264 297.946 li
327.206 297.622 li
326.943 297.062 li
326.778 296.065 li
326.519 295.445 li
325.846 294.249 li
326.355 294.552 li
326.883 295.097 li
327.295 295.745 li
327.69 297.105 li
328.235 297.521 li
328.895 297.817 li
329.465 298.244 li
329.61 298.607 li
329.585 298.893 li
329.648 299.106 li
330.062 299.242 li
330.411 299.17 li
330.878 298.939 li
331.288 298.637 li
331.462 298.344 li
331.333 298.006 li
330.785 297.676 li
330.665 297.344 li
330.753 296.87 li
330.959 296.955 li
331.28 297.443 li
331.907 297.992 li
332.163 298.465 li
332.039 298.96 li
cp
306.384 313.334 mo
305.945 313.929 li
305.504 314.391 li
304.82 314.865 li
304.255 315.117 li
303.934 315.484 li
303.99 316.3 li
304.147 317.069 li
304.193 319.397 li
304.069 320.299 li
303.73 320.798 li
302.581 321.714 li
302.182 322.25 li
301.52 323.482 li
300.906 323.801 li
301.178 322.931 li
302.257 321.239 li
302.398 320.713 li
302.307 320.432 li
302.125 320.143 li
302.003 319.858 li
302.089 319.605 li
302.26 319.255 li
302.103 318.978 li
301.762 318.797 li
301.38 318.715 li
301.473 318.309 li
301.783 318.155 li
302.188 318.027 li
302.581 317.699 li
302.581 316.791 li
302.609 316.659 li
302.797 316.101 li
302.943 315.246 li
302.89 314.449 li
302.153 312.126 li
302.035 311.36 li
301.939 308.722 li
301.996 308.252 li
302.196 307.874 li
302.556 307.668 li
302.762 307.846 li
302.783 308.233 li
302.581 308.668 li
302.581 308.47 li
302.444 311.176 li
302.631 312.643 li
303.457 313.434 li
303.599 314.135 li
303.698 314.391 li
303.955 314.427 li
304.343 314.28 li
305.016 313.882 li
305.462 313.418 li
306.003 312.368 li
306.412 311.866 li
306.608 312.639 li
306.384 313.334 li
cp
294.418 326.667 mo
294.368 326.896 li
294.187 327.144 li
292.918 327.636 li
292.77 327.725 li
292.057 327.479 li
291.996 326.981 li
292.214 326.324 li
292.37 325.627 li
292.31 325.281 li
292.039 324.612 li
291.972 324.327 li
292.043 324.035 li
292.588 323.113 li
292.398 322.688 li
292.428 321.792 li
292.37 321.313 li
292.143 320.972 li
291.487 320.364 li
291.353 320.004 li
291.17 318.397 li
291.17 316.498 li
290.571 315.281 li
290.939 315.039 li
291.477 315.018 li
291.961 314.907 li
292.171 314.391 li
292.182 313.861 li
292.285 313.586 li
292.552 313.483 li
293.068 313.469 li
293.606 313.59 li
293.773 313.882 li
293.62 314.225 li
293.168 314.505 li
292.349 316.133 li
292.028 317.247 li
292.067 317.507 li
292.517 318.158 li
292.531 318.454 li
292.435 318.775 li
292.37 319.206 li
292.452 319.516 li
292.634 319.754 li
292.837 319.946 li
292.969 320.114 li
293.749 322.414 li
293.876 322.614 li
293.973 322.855 li
293.909 323.49 li
294.361 324.277 li
294.439 324.794 li
294.418 326.667 li
cp
286.134 330.84 mo
285.145 330.834 li
284.226 330.602 li
283.435 330.021 li
283.072 329.352 li
282.876 328.434 li
283.037 327.693 li
283.741 327.543 li
283.484 326.867 li
283.514 325.196 li
283.107 323.486 li
283.044 322.465 li
283.271 321.511 li
283.923 320.895 li
283.901 321.538 li
283.567 322.742 li
283.524 323.33 li
283.6 323.629 li
283.759 324.032 li
283.983 324.377 li
284.24 324.526 li
284.586 324.438 li
284.76 324.209 li
284.882 323.914 li
286.017 321.916 li
286.352 320.752 li
286.747 320.56 li
286.989 320.819 li
286.74 321.514 li
286.708 322.198 li
286.479 322.909 li
286.134 323.572 li
285.743 324.11 li
284.935 324.715 li
284.742 324.929 li
284.699 325.306 li
284.721 325.851 li
284.678 326.332 li
284.439 326.546 li
284.18 326.699 li
284.251 327.044 li
284.465 327.414 li
284.642 327.636 li
284.792 327.959 li
284.734 328.365 li
284.543 329.131 li
284.849 329.732 li
285.579 330.121 li
287.139 330.741 li
286.134 330.84 li
cp
252.068 360.467 mo
251.843 360.801 li
251.416 361.225 li
251.245 361.153 li
251.16 359.505 li
250.91 358.636 li
250.529 357.83 li
250.027 357.208 li
250.395 357.064 li
250.601 356.784 li
250.679 356.418 li
250.646 356.008 li
250.476 355.676 li
249.96 355.188 li
249.846 354.907 li
249.628 354.088 li
249.098 353.956 li
248.446 354.23 li
247.21 355.04 li
246.926 355.132 li
246.452 355.206 li
243.585 355.1 li
242.937 354.789 li
242.396 354.288 li
241.836 353.612 li
240.771 351.521 li
240.529 351.197 li
240.014 350.794 li
239.956 349.904 li
240.216 348.394 li
240.155 348.263 li
239.896 347.913 li
239.839 347.781 li
239.882 347.617 li
239.999 347.343 li
240.155 346.534 li
240.146 346.214 li
239.558 345.32 li
239.365 344.647 li
239.02 340.986 li
239.222 340.986 li
239.365 341.343 li
239.832 341.827 li
240.023 342.166 li
240.066 342.589 li
239.839 343.765 li
239.956 344.558 li
240.248 345.249 li
241.018 346.58 li
241.335 345.359 li
241.615 344.804 li
242.231 344.366 li
242.642 344.288 li
242.56 344.565 li
241.847 345.549 li
241.89 346.642 li
241.836 346.962 li
241.63 347.223 li
241.323 347.507 li
241.142 347.853 li
241.338 348.287 li
241.769 348.847 li
242.068 349.415 li
242.274 350.05 li
242.702 352.236 li
242.937 352.906 li
243.34 353.501 li
244.048 353.924 li
244.903 353.96 li
247.467 353.38 li
249.158 352.742 li
250.683 352.476 li
250.825 352.535 li
250.288 353.266 li
250.341 353.525 li
251.911 355.199 li
252.132 355.912 li
251.743 356.717 li
251.448 357.378 li
251.559 358.091 li
252.061 359.423 li
252.136 359.822 li
252.153 360.153 li
252.068 360.467 li
cp
227.452 350.623 mo
227.139 350.901 li
227.101 351.335 li
227.164 352.037 li
226.916 353.047 li
226.523 354.078 li
226.011 355.028 li
225.395 355.809 li
225.105 356.005 li
224.839 356.111 li
224.653 356.293 li
224.521 356.99 li
224.391 357.183 li
224.251 357.322 li
224.18 357.425 li
224.147 357.912 li
224.176 358.423 li
224.126 358.911 li
223.511 360.074 li
222.659 362.503 li
222.289 363.019 li
221.691 363.237 li
221.438 363.721 li
221.256 364.199 li
220.875 364.42 li
220.377 364.199 li
220.33 363.689 li
220.576 363.092 li
220.968 362.621 li
219.981 362.45 li
217.56 362.354 li
216.67 361.909 li
216.402 361.687 li
215.533 361.146 li
215.271 361.111 li
214.846 361.285 li
214.275 361.265 li
213.731 361.09 li
213.371 360.801 li
214.55 360.623 li
214.817 360.513 li
215.258 360.253 li
215.558 360.203 li
216.05 360.327 li
216.521 360.619 li
217.25 361.305 li
217.853 361.612 li
218.688 361.759 li
220.926 361.767 li
221.463 361.612 li
221.833 361.257 li
221.965 360.613 li
221.809 359.658 li
221.402 358.71 li
220.821 357.866 li
220.167 357.208 li
219.731 356.948 li
219.162 356.702 li
218.147 356.406 li
217.414 356.425 li
216.708 356.546 li
216.031 356.546 li
215.366 356.207 li
215.914 355.997 li
216.608 355.947 li
217.966 356.008 li
217.524 355.156 li
217.81 354.979 li
218.479 355.267 li
219.85 356.297 li
220.79 356.727 li
221.79 356.869 li
223.051 356.343 li
223.489 356.278 li
223.846 356.132 li
223.999 355.708 li
223.98 355.299 li
223.902 354.868 li
223.682 354.53 li
223.289 354.394 li
222.806 354.063 li
222.311 353.306 li
221.926 352.436 li
221.779 351.791 li
222.231 352.144 li
222.806 353.181 li
223.289 353.394 li
223.518 353.583 li
224.578 354.808 li
225.191 353.889 li
225.854 352.571 li
226.089 351.313 li
225.395 350.577 li
225.896 350.292 li
226.74 350.16 li
227.62 350.188 li
228.212 350.396 li
227.452 350.623 li
cp
218.967 366.018 mo
218.436 366.001 li
218.065 366.147 li
217.973 366.41 li
218.535 367.154 li
218.674 367.501 li
218.592 367.87 li
218.247 368.34 li
218.059 368.202 li
217.709 367.763 li
217.207 367.393 li
216.57 367.433 li
216.658 367.554 li
216.708 367.652 li
216.787 367.742 li
216.951 367.834 li
216.608 368.458 li
216.05 368.454 li
214.749 367.731 li
213.909 367.564 li
213.422 367.921 li
212.947 368.408 li
212.154 368.632 li
212.862 367.491 li
212.88 367.026 li
212.143 366.834 li
211.826 366.898 li
211.043 367.133 li
210.839 367.133 li
210.505 367.008 li
210.088 367.086 li
209.34 367.433 li
209.44 366.976 li
209.725 366.799 li
210.559 366.631 li
211.057 366.396 li
211.323 366.179 li
211.755 365.416 li
212.271 366.001 li
212.478 366.468 li
212.802 366.396 li
213.371 366.018 li
214.714 365.962 li
215.384 366.048 li
215.932 366.235 li
216.373 365.523 li
217.218 365.398 li
218.967 365.837 li
218.967 366.018 li
cp
411.871 241.82 mo
411.091 241.899 li
410.788 241.963 li
410.364 242.252 li
410.005 242.32 li
409.635 242.24 li
409.21 242.042 li
408.812 241.782 li
408.506 241.5 li
408.231 241.582 li
407.623 241.681 li
407.057 241.977 li
406.736 241.956 li
406.419 241.882 li
406.087 241.899 li
405.563 242.163 li
405.161 242.44 li
404.728 242.568 li
404.09 242.408 li
403.783 242.562 li
402.957 242.739 li
402.269 242.754 li
402.365 242.408 li
402.771 242.124 li
403.296 241.871 li
403.837 241.76 li
404.289 241.899 li
404.492 241.596 li
404.798 241.472 li
405.15 241.514 li
405.507 241.704 li
405.978 241.28 li
406.757 241.105 li
408.295 241.101 li
408.701 241.038 li
408.911 240.88 li
409.064 240.688 li
409.303 240.5 li
409.894 240.218 li
409.905 240.281 li
410.001 240.247 li
410.368 240.154 li
410.504 240.1 li
410.324 239.652 li
410.119 239.392 li
409.502 238.883 li
409.271 238.591 li
409.058 238.205 li
409.064 237.964 li
409.502 238.103 li
409.602 237.818 li
409.806 237.465 li
410.012 237.249 li
410.104 237.387 li
410.104 238.586 li
410.229 238.883 li
410.511 238.883 li
410.788 238.762 li
410.902 238.683 li
410.83 238.611 li
411.19 238.391 li
411.606 238.209 li
411.703 238.284 li
411.79 238.027 li
411.82 237.465 li
411.991 237.177 li
413.494 235.353 li
413.719 234.845 li
413.498 234.47 li
413.082 234.588 li
411.902 235.488 li
411.29 236.098 li
410.793 236.479 li
410.229 236.635 li
409.702 236.287 li
409.57 236.033 li
409.563 235.841 li
409.698 235.713 li
410.324 235.639 li
410.468 235.535 li
410.508 235.325 li
410.504 234.976 li
410.35 234.556 li
409.99 234.118 li
409.524 233.782 li
409.082 233.672 li
409.191 234.214 li
408.908 234.684 li
408.42 234.845 li
407.921 234.47 li
407.476 234.994 li
406.924 235.129 li
406.312 234.982 li
405.688 234.67 li
404.628 233.826 li
404.125 233.655 li
404.071 234.271 li
403.62 234.103 li
403.42 234.217 li
403.455 234.513 li
403.69 234.887 li
402.672 234.887 li
402.89 235.232 li
403.791 235.98 li
404.176 236.122 li
404.357 235.809 li
404.482 235.356 li
404.67 235.068 li
405.15 235.076 li
405.399 235.399 li
405.383 235.831 li
404.879 236.425 li
405.013 236.71 li
405.507 237.287 li
404.619 237.287 li
404.239 237.618 li
403.986 238.177 li
403.473 238.883 li
403.31 237.985 li
403.377 237.529 li
403.69 237.067 li
402.672 236.885 li
402.719 237.183 li
402.672 237.369 li
402.529 237.461 li
402.277 237.487 li
402.06 237.555 li
402.07 237.714 li
402.131 237.917 li
402.073 238.103 li
401.707 238.349 li
401.328 238.547 li
401.026 238.819 li
400.873 239.285 li
401.131 240.182 li
401.906 240.211 li
403.473 239.701 li
403.274 240.1 li
403.431 240.2 li
403.548 240.257 li
403.688 240.275 li
403.883 240.281 li
404.15 240.229 li
404.212 240.111 li
404.212 239.975 li
404.289 239.883 li
404.787 239.766 li
408.085 239.701 li
407.451 240.231 li
406.608 240.41 li
404.869 240.281 li
405.329 240.617 li
405.507 240.699 li
405.048 240.898 li
404.339 241.069 li
403.638 241.133 li
403.175 240.998 li
402.715 240.798 li
402.104 240.78 li
400.873 240.898 li
401.108 241.158 li
401.433 241.201 li
401.824 241.197 li
402.255 241.301 li
402.255 241.5 li
401.151 241.723 li
398.061 243.099 li
397.817 243.021 li
397.565 242.881 li
397.359 242.65 li
397.259 242.32 li
398.862 241.963 li
399.69 241.642 li
400.059 241.301 li
400.122 240.944 li
400.406 240.295 li
400.475 239.994 li
400.29 239.58 li
399.845 239.277 li
399.308 239.106 li
398.857 239.104 li
399.168 238.669 li
399.627 238.559 li
400.048 238.359 li
400.257 237.686 li
400.502 237.792 li
400.699 237.796 li
400.831 237.668 li
400.873 237.387 li
400.838 237.265 li
400.688 237.095 li
400.656 236.977 li
400.735 236.735 li
400.909 236.743 li
401.113 236.845 li
401.254 236.885 li
401.464 236.917 li
401.735 237.031 li
401.974 237.045 li
402.073 236.778 li
402.135 236.483 li
402.295 236.311 li
402.551 236.25 li
402.871 236.287 li
402.116 235.98 li
401.092 236.016 li
399.16 236.287 li
399.143 236.425 li
398.459 237.177 li
398.331 237.637 li
398.028 237.796 li
397.693 237.722 li
397.44 237.487 li
397.718 237.28 li
397.972 237.002 li
398.161 236.663 li
398.26 236.287 li
397.765 236.147 li
397.758 235.934 li
398.046 235.694 li
398.459 235.488 li
397.746 234.905 li
398.188 234.612 li
399.024 234.52 li
399.479 234.57 li
399.891 234.887 li
400.816 234.865 li
401.764 234.623 li
402.255 234.271 li
401.992 234.231 li
401.896 234.156 li
401.834 234.043 li
401.653 233.873 li
401.934 233.655 li
402.23 233.563 li
402.541 233.573 li
402.871 233.672 li
403.007 233.26 li
403.285 233.049 li
403.459 232.843 li
403.274 232.455 li
404.681 232.729 li
405.189 232.626 li
404.869 231.853 li
404.628 231.703 li
404.281 231.642 li
403.937 231.642 li
403.69 231.674 li
402.255 232.273 li
401.814 232.38 li
401.653 232.455 li
401.625 232.547 li
401.554 232.928 li
401.472 233.071 li
400.582 233.762 li
400.475 233.873 li
399.77 233.747 li
399.881 232.4 li
399.16 232.772 li
398.512 233.545 li
398.359 233.672 li
396.87 233.857 li
396.55 233.971 li
396.273 234.135 li
395.597 234.403 li
395.35 234.57 li
394.876 235.029 li
394.842 235.186 li
394.848 235.578 li
395.026 235.664 li
396.152 235.068 li
396.521 235.15 li
396.746 235.364 li
396.774 235.659 li
396.55 235.98 li
395.853 236.269 li
395.066 236.464 li
394.648 236.792 li
395.063 237.487 li
394.646 237.686 li
394.499 237.404 li
394.353 237.312 li
394.204 237.404 li
394.064 237.686 li
393.865 237.686 li
393.826 237.119 li
393.529 236.597 li
393.074 236.219 li
392.555 236.068 li
392.127 236.219 li
391.617 236.564 li
391.347 236.97 li
391.65 237.287 li
391.4 237.607 li
391.155 237.593 li
390.905 237.473 li
390.648 237.487 li
390.41 237.686 li
389.941 238.383 li
389.534 238.708 li
389.047 238.957 li
388.031 239.285 li
388.143 239.075 li
388.23 238.812 li
388.221 238.583 li
388.031 238.487 li
387.727 238.58 li
387.401 239.007 li
386.675 239.242 li
384.859 240.6 li
383.727 241.8 li
383.225 242.223 li
382.21 242.689 li
381.13 243.401 li
380.567 243.616 li
379.947 243.7 li
378.588 243.69 li
377.942 243.58 li
377.427 243.33 li
377.224 242.899 li
377.333 242.683 li
377.843 242.504 li
378.007 242.32 li
377.986 242.088 li
377.622 241.301 li
377.346 240.108 li
377.116 239.733 li
376.804 240.1 li
376.607 240.1 li
376.525 239.769 li
376.361 239.552 li
375.905 239.192 li
375.806 238.933 li
376.009 237.885 li
376.284 237.995 li
376.52 238.173 li
376.692 238.409 li
376.804 238.683 li
376.928 238.205 li
376.7 237.811 li
376.377 237.426 li
376.209 236.977 li
376.154 236.522 li
375.806 235.068 li
375.524 235.208 li
375.3 235.247 li
375.083 235.197 li
374.809 235.068 li
375.549 234.616 li
376.209 234.071 li
376.544 233.69 li
376.607 233.491 li
376.532 233.231 li
376.427 232.69 li
376.716 231.396 li
376.804 231.253 li
376.49 230.815 li
376.113 230.716 li
375.679 230.738 li
375.19 230.673 li
375.542 230.371 li
375.579 230.132 li
375.408 229.858 li
375.57 229.274 li
375.561 229.007 li
375.408 228.64 li
375.005 228.191 li
374.588 228.155 li
374.172 228.424 li
373.79 228.875 li
373.488 228.541 li
373.26 228.519 li
372.789 228.875 li
372.748 229.011 li
372.808 229.396 li
372.689 229.478 li
372.31 229.499 li
372.163 229.556 li
371.462 229.983 li
371.077 230.101 li
370.699 229.997 li
368.188 228.474 li
367.181 227.689 li
366.782 226.859 li
366.151 227.113 li
365.959 227.259 li
365.803 226.789 li
366.158 225.919 li
366.163 225.425 li
366.021 225.289 li
365.532 225.139 li
365.361 225.041 li
364.962 224.26 li
365.461 224.299 li
365.874 224.281 li
366.023 224.05 li
365.763 223.444 li
366.198 223.156 li
366.462 222.604 li
366.782 221.447 li
367.057 220.844 li
367.359 220.549 li
367.815 220.453 li
374.14 220.852 li
374.809 220.646 li
373.851 220.567 li
372.103 220.186 li
370.208 220.001 li
364.406 220.222 li
363.072 220.752 li
361.945 221.846 li
362.316 221.963 li
362.732 221.91 li
363.152 221.728 li
363.53 221.447 li
363.623 221.554 li
363.965 221.846 li
363.934 222.108 li
363.032 222.418 li
363.164 222.847 li
362.982 222.982 li
362.729 223.135 li
362.47 223.221 li
361.992 223.034 li
361.778 223.23 li
361.611 223.501 li
361.466 223.645 li
361.056 223.517 li
361.092 223.192 li
361.565 222.226 li
360.479 222.558 li
359.2 223.498 li
356.273 226.255 li
354.759 227.149 li
354.639 227.259 li
354.286 227.344 li
353.47 227.771 li
353.071 228.049 li
352.861 228.078 li
352.431 228.057 li
352.23 228.135 li
352.106 228.313 li
352.018 228.509 li
351.921 228.64 li
351.729 228.708 li
351.537 228.705 li
351.341 228.725 li
351.142 228.875 li
351.078 229.003 li
351.024 229.313 li
350.925 229.478 li
350.223 230.182 li
349.842 230.763 li
349.639 230.938 li
349.382 231.02 li
349.02 231.037 li
348.766 231.262 li
348.752 231.774 li
348.926 232.69 li
348.926 235.87 li
349.104 237.387 li
349.054 237.657 li
348.794 238.327 li
348.723 238.683 li
348.983 241.913 li
349.151 242.272 li
349.721 243.099 li
349.375 243.11 li
349.029 243.234 li
348.756 243.37 li
348.623 243.409 li
348.342 243.326 li
348.199 243.608 li
348.107 244.313 li
348.093 244.947 li
348.032 245.289 li
347.638 245.858 li
347.569 246.137 li
347.594 246.417 li
347.705 246.696 li
347.104 246.862 li
346.234 247.276 li
345.465 247.771 li
345.127 248.203 li
345.102 248.551 li
345.009 248.864 li
344.856 249.149 li
344.617 249.409 li
344.472 249.509 li
344.389 249.549 li
344.343 249.62 li
344.293 250.229 li
344.201 250.336 li
344.064 250.357 li
343.912 250.509 li
342.823 252.333 li
342.413 252.825 li
342.128 253.032 li
341.832 253.184 li
341.604 253.362 li
341.397 254.046 li
341.12 254.11 li
340.725 254.058 li
340.294 254.124 li
340.038 254.289 li
339.297 254.939 li
336.537 256.276 li
335.084 256.738 li
334.866 256.752 li
334.321 256.721 li
332.284 256.938 li
330.532 256.738 li
330.069 256.995 li
330.108 258.376 li
330.144 258.544 li
330.269 258.754 li
330.489 258.54 li
330.672 258.872 li
330.073 259.986 li
329.792 260.934 li
329.379 261.517 li
328.888 263.352 li
328.603 264.021 li
328.171 264.539 li
327.175 265.459 li
327.021 265.692 li
326.726 266.415 li
326.594 267.062 li
326.074 268.145 li
325.29 272.458 li
324.671 273.775 li
323.243 275.418 li
323.058 276.094 li
323.436 276.681 li
324.336 276.896 li
326.273 276.81 li
327.057 276.642 li
327.733 276.328 li
326.525 277.298 li
323.261 277.315 li
322.662 277.458 li
322.058 277.988 li
319.963 281.169 li
319.443 281.406 li
318.705 282.433 li
318.214 282.974 li
317.745 283.206 li
317.441 283.306 li
317.168 283.559 li
316.735 284.109 li
316.505 284.491 li
316.568 284.701 li
317.135 285.114 li
317.627 285.813 li
317.759 286.453 li
317.754 287.103 li
317.844 287.817 li
317.929 288.092 li
318.068 288.327 li
318.289 288.562 li
318.646 288.837 li
319.165 289.142 li
319.339 289.313 li
319.443 289.616 li
318.054 288.793 li
317.844 288.526 li
317.487 288.297 li
316.786 288.224 li
316.287 288.405 li
316.537 288.937 li
317.071 289.688 li
317.52 290.773 li
317.603 291.816 li
317.024 292.433 li
316.939 290.923 li
316.794 290.215 li
315.792 288.665 li
316.145 288.224 li
316.868 287.91 li
317.424 287.436 li
317.467 286.76 li
317.185 285.956 li
316.7 285.285 li
316.134 285.004 li
315.387 284.947 li
315.109 285.025 li
314.731 285.313 li
312.228 288.512 li
311.733 288.837 li
311.195 289.067 li
310.151 290.21 li
309.632 290.635 li
308.563 291.037 li
308.236 291.236 li
307.858 291.557 li
307.823 291.717 li
307.933 291.917 li
308.193 293.024 li
308.923 294.053 li
309.015 294.829 li
308.356 294.103 li
307.645 292.829 li
306.839 291.834 li
305.91 291.935 li
304.774 292.604 li
302.164 293.295 li
300.988 293.829 li
303.499 294.63 li
304.632 295.261 li
305.401 296.229 li
304.874 295.777 li
301.26 294.238 li
300.483 294.156 li
300.386 294.647 li
299.753 294.452 li
299.304 294.708 li
298.891 295.132 li
298.371 295.432 li
298.606 295.704 li
299.129 295.763 li
299.371 296.029 li
298.495 296.229 li
295.572 296.229 li
295.572 296.445 li
298.232 297.275 li
299.008 297.842 li
299.57 298.551 li
299.767 298.992 li
299.66 299.474 li
299.632 300.019 li
299.589 300.242 li
299.247 300.822 li
299.19 301.063 li
299.008 301.063 li
298.809 300.456 li
298.855 299.26 li
298.771 298.644 li
298.527 298.138 li
298.164 297.66 li
297.626 297.357 li
297 297.116 li
295.804 296.901 li
294.528 297.304 li
293.535 298.173 li
292.976 299.444 li
293.67 299.081 li
294.318 298.315 li
295.052 297.713 li
295.992 297.842 li
294.094 300.061 li
293.752 299.993 li
293.122 299.709 li
292.787 299.644 li
292.324 299.702 li
291.926 299.844 li
291.177 300.242 li
290.473 300.471 li
290.177 300.652 li
289.959 301.063 li
289.859 301.534 li
289.971 301.721 li
290.258 301.853 li
290.679 302.158 li
291.12 302.761 li
291.303 303.309 li
291.096 303.502 li
290.358 303.06 li
289.19 302.08 li
288.609 301.98 li
288.364 302.761 li
287.987 303.22 li
284.083 304.647 li
283.449 305.024 li
282.84 305.573 li
282.655 306.211 li
283.261 306.558 li
284.24 306.691 li
285.145 306.674 li
285.899 306.542 li
286.245 306.535 li
286.545 306.674 li
285.259 307.033 li
284.699 307.109 li
283.931 307.092 li
282.288 306.877 li
281.526 306.983 li
280.933 307.493 li
282.113 307.967 li
282.688 308.326 li
282.93 308.782 li
282.972 309.704 li
282.812 309.848 li
282.331 309.487 li
281.794 308.483 li
281.398 308.105 li
280.742 308.181 li
280.302 308.554 li
279.312 309.658 li
278.842 309.887 li
278.253 310.011 li
276.736 310.888 li
276.092 310.938 li
274.913 310.748 li
273.916 311.311 li
272.741 311.553 li
272.307 311.87 li
272.11 312.478 li
272.284 313.063 li
272.673 313.604 li
273.121 314.081 li
272.922 314.081 li
272.277 313.932 li
272.015 313.44 li
271.907 312.824 li
271.708 312.286 li
271.455 312.056 li
271.202 312.002 li
270.404 312.07 li
270.124 312.14 li
269.757 312.322 li
269.439 312.558 li
269.308 312.785 li
268.963 313.213 li
268.168 313.526 li
266.69 313.882 li
264.571 314.933 li
263.994 315.086 li
263.46 315.307 li
262.353 316.278 li
261.804 316.498 li
261.517 316.57 li
260.715 316.941 li
260.497 317.098 li
260.387 317.336 li
260.447 317.547 li
260.896 318.099 li
261.572 319.174 li
262.035 319.684 li
262.605 319.897 li
263.211 320.031 li
264.76 320.76 li
265.291 321.115 li
264.6 321.15 li
262.986 320.335 li
262.192 320.114 li
261.85 320.075 li
261.42 319.944 li
261.05 319.723 li
260.28 318.099 li
259.753 318.198 li
257.887 318.922 li
257.374 319.206 li
256.812 319.615 li
255.455 320.286 li
253.692 321.57 li
252.097 322.287 li
250.43 322.668 li
249.037 322.515 li
248.436 322.048 li
247.972 321.527 li
247.474 321.328 li
246.754 321.823 li
246.498 321.909 li
245.75 321.853 li
245.348 322.023 li
245.063 322.232 li
244.465 322.546 li
243.479 322.909 li
242.392 323.095 li
240.583 323.181 li
239.999 323.302 li
239.429 323.515 li
240.027 323.853 li
240.227 323.928 li
239.892 324.035 li
239.547 324.191 li
239.216 324.395 li
238.916 324.629 li
238.678 324.979 li
238.593 325.343 li
238.574 325.652 li
238.527 325.826 li
237.56 326.724 li
236.413 327.543 li
234.586 328.437 li
233.518 329.337 li
232.965 329.591 li
231.598 329.922 li
231.598 330.121 li
232.32 330.324 li
232.663 330.677 li
232.655 331.125 li
232.307 331.632 li
232.028 331.741 li
229.4 331.741 li
229.55 332.706 li
228.813 333.373 li
227.752 333.899 li
226.9 334.444 li
224.476 336.435 li
223.788 337.154 li
224.023 337.489 li
224.194 337.92 li
224.387 338.771 li
224.336 339.552 li
224.387 339.769 li
224.539 339.979 li
224.682 340.039 li
224.828 340.064 li
225.002 340.167 li
225.786 340.77 li
226.445 341.055 li
226.602 341.168 li
226.801 341.542 li
226.876 341.991 li
226.812 342.429 li
226.602 342.768 li
225.701 341.467 li
225.315 341.161 li
224.333 340.748 li
223.036 339.9 li
222.176 339.757 li
221.316 340.018 li
220.47 340.665 li
220.263 340.791 li
219.764 340.901 li
219.575 340.986 li
219.415 341.18 li
219.177 341.592 li
218.974 341.766 li
217.421 342.088 li
216.958 342.367 li
216.716 342.784 li
216.844 343.091 li
217.592 343.586 li
218.696 344.565 li
219.19 344.765 li
218.439 344.602 li
217.891 344.392 li
217.414 344.046 li
216.865 343.485 li
216.54 343.326 li
216.225 343.444 li
215.929 343.653 li
215.373 343.86 li
215.44 344.077 li
215.762 344.466 li
215.946 344.976 li
216.716 345.584 li
216.776 346.183 li
216.548 346.698 li
216.242 347.083 li
215.992 347.518 li
215.939 348.18 li
215.416 347.892 li
215.112 347.546 li
215.038 347.119 li
215.177 346.584 li
215.444 346.164 li
215.68 345.959 li
215.762 345.754 li
215.558 345.363 li
214.622 344.716 li
213.563 344.814 li
212.706 345.47 li
212.346 346.475 li
212.421 346.823 li
212.848 347.774 li
213.059 348.081 li
213.265 348.505 li
213.25 348.971 li
213.189 349.396 li
213.271 349.69 li
213.877 350.114 li
213.959 350.288 li
213.984 350.498 li
214.048 350.728 li
214.141 350.937 li
214.272 351.098 li
214.354 351.414 li
213.849 351.479 li
212.759 351.396 li
212.954 350.843 li
212.749 350.491 li
212.399 350.188 li
212.164 349.794 li
212.193 349.516 li
212.488 348.956 li
212.563 348.679 li
212.467 348.394 li
212.264 348.18 li
212.05 348.009 li
211.961 347.881 li
211.563 346.972 li
210.601 347.019 li
208.347 347.98 li
208.5 348.123 li
208.781 348.446 li
208.945 348.579 li
208.246 348.604 li
207.698 348.686 li
207.215 348.871 li
205.755 349.758 li
205.263 350.166 li
205.131 350.577 li
205.473 350.827 li
208.995 352.283 li
209.546 352.393 li
209.138 352.721 li
208.481 352.464 li
207.763 352.023 li
207.149 351.795 li
206.37 351.642 li
205.594 351.363 li
204.843 351.199 li
204.134 351.396 li
203.738 351.855 li
203.792 352.333 li
204.137 352.82 li
204.632 353.306 li
205.248 353.59 li
206.908 354.023 li
207.35 354.391 li
205.572 354.252 li
205.131 354.391 li
204.999 354.619 li
205.085 355.206 li
204.936 355.609 li
204.597 355.353 li
204.551 355.021 li
204.597 354.634 li
204.532 354.214 li
203.425 352.892 li
202.773 352.781 li
202.072 353.27 li
200.918 354.612 li
201.641 354.651 li
202.249 355.028 li
203.314 356.008 li
204.369 356.643 li
204.532 356.823 li
204.309 357.04 li
203.853 357.04 li
203.36 356.905 li
203.026 356.717 li
201.883 355.58 li
201.184 355.22 li
200.319 355.21 li
199.659 355.521 li
199.451 356.012 li
199.535 357.318 li
199.659 357.646 li
200.197 357.971 li
200.379 358.558 li
200.639 359.138 li
200.7 359.526 li
201.208 359.733 li
203.585 359.563 li
204.333 359.423 li
205.448 359.049 li
206.545 359.038 li
206.545 359.073 li
206.296 359.206 li
206.131 359.526 li
206.079 360.078 li
206.161 360.214 li
206.441 360.52 li
206.847 360.737 li
207.873 360.698 li
208.347 360.805 li
208.026 361.193 li
207.499 361.35 li
206.891 361.335 li
206.349 361.203 li
205.942 360.94 li
205.427 360.234 li
205.131 360.003 li
204.593 359.964 li
201.615 360.595 li
201.12 360.798 li
200.7 361.203 li
203.649 363.288 li
205.166 364.683 li
205.331 365.633 li
205.134 365.498 li
204.75 365.353 li
204.532 365.235 li
204.458 365.347 li
204.333 365.416 li
203.806 364.431 li
203.61 363.739 li
203.314 363.5 li
202.947 363.326 li
202.15 362.817 li
201.947 362.969 li
201.829 363.351 li
201.627 363.729 li
201.251 364.042 li
200.894 364.191 li
199.901 364.238 li
199.638 364.114 li
199.95 363.839 li
200.7 363.423 li
200.975 363.044 li
201.026 362.753 li
200.911 362.497 li
200.7 362.223 li
199.868 361.621 li
199.075 361.671 li
198.255 361.947 li
197.32 362.02 li
197.427 361.745 li
197.614 361.524 li
197.851 361.342 li
198.119 361.203 li
196.897 360.783 li
196.353 360.413 li
196.12 359.914 li
195.836 359.812 li
195.201 360.16 li
194.206 360.916 li
193.801 361.396 li
193.635 361.762 li
193.726 362.087 li
194.105 362.422 li
194.626 362.688 li
195.781 363.105 li
196.319 363.423 li
196.677 362.742 li
197.137 363.006 li
197.584 363.729 li
197.92 364.42 li
196.652 364.21 li
195.24 363.547 li
193.815 363.127 li
192.509 363.618 li
192.213 364.077 li
191.689 365.834 li
190.604 367.504 li
190.6 367.942 li
190.961 368.479 li
191.195 368.597 li
191.707 368.632 li
192.043 368.604 li
192.675 368.479 li
193.005 368.451 li
194.614 367.813 li
197.027 367.472 li
200.918 366.015 li
200.667 366.76 li
199.811 367.215 li
197.92 367.636 li
198.274 367.952 li
198.716 368.066 li
199.701 368.052 li
199.065 368.477 li
198.265 368.437 li
196.723 368.052 li
195.863 368.155 li
194.39 368.707 li
193.606 368.833 li
192.929 369.02 li
192.603 369.5 li
192.575 370.149 li
192.809 370.851 li
193.296 370.947 li
196.12 370.651 li
195.663 370.923 li
194.105 371.25 li
193.599 371.499 li
193.247 371.813 li
192.709 372.667 li
193.384 372.831 li
196.12 372.265 li
198.22 372.446 li
198.67 372.396 li
199.92 372.047 li
199.553 372.66 li
198.933 373.002 li
197.518 373.447 li
196.939 373.747 li
196.659 373.942 li
196.411 374.167 li
196.081 374.353 li
195.682 374.365 li
194.813 374.267 li
194.016 374.355 li
192.457 374.769 li
191.707 374.864 li
189.88 374.872 li
189.019 375.049 li
188.293 375.48 li
188.075 375.264 li
188.293 375.063 li
186.278 375.063 li
184.378 375.264 li
183.895 375.551 li
183.704 376.229 li
183.695 378.86 li
183.85 379.441 li
183.892 379.84 li
183.776 380.178 li
183.783 380.409 li
183.937 380.779 li
184.161 381.121 li
184.378 381.274 li
184.603 381.16 li
185.289 380.627 li
185.676 380.459 li
188.456 379.878 li
188.892 379.563 li
188.997 379.267 li
189.789 378.361 li
189.969 378.233 li
190.51 377.96 li
190.546 377.795 li
190.64 377.588 li
190.771 377.393 li
190.891 377.262 li
191.159 377.058 li
191.48 376.87 li
191.816 376.827 li
192.106 377.063 li
192.05 377.282 li
191.789 377.592 li
190.189 378.96 li
190.273 379.149 li
190.728 379.309 li
191.287 379.416 li
191.689 379.444 li
192.709 379.206 li
193.707 378.86 li
193.22 379.526 li
192.457 379.782 li
190.69 380.078 li
189.871 380.447 li
189.314 380.9 li
188.991 381.539 li
188.892 382.479 li
188.429 382.272 li
188.172 382.496 li
188.065 382.962 li
188.075 383.472 li
190.189 383.155 li
191.118 382.774 li
191.508 381.855 li
191.832 382.072 li
191.832 382.318 li
191.71 382.542 li
191.689 382.692 li
191.943 382.946 li
192.021 382.956 li
192.076 382.838 li
192.987 382.137 li
193.105 382.076 li
193.159 381.795 li
193.069 381.603 li
193.002 381.394 li
193.105 381.058 li
193.543 380.684 li
194.224 380.409 li
195.506 380.078 li
197.282 379.322 li
197.92 379.259 li
197.92 379.444 li
197.194 379.751 li
195.863 380.523 li
195.004 380.677 li
194.394 380.929 li
193.934 381.524 li
193.105 382.891 li
192.106 383.893 li
190.991 384.783 li
190.69 384.942 li
189.859 385.206 li
189.692 385.388 li
189.823 385.669 li
190.69 386.488 li
192.346 387.335 li
194.303 387.578 li
198.319 387.507 li
200.319 387.888 li
200.82 387.898 li
201.316 387.839 li
201.818 387.832 li
203.686 388.45 li
204.023 388.504 li
204.137 388.597 li
204.262 388.771 li
204.43 388.888 li
204.632 388.804 li
204.81 388.687 li
205.053 388.601 li
205.529 388.504 li
206.168 388.536 li
207.367 388.86 li
207.948 388.903 li
208.375 388.788 li
209.269 388.397 li
209.743 388.286 li
210.743 388.341 li
211.185 388.248 li
211.563 387.888 li
211.733 387.457 li
211.794 387.065 li
211.912 386.663 li
212.254 386.199 li
212.356 385.979 li
212.386 385.501 li
212.563 385.287 li
212.802 385.231 li
216.146 385.487 li
216.577 385.569 li
217.955 386.199 li
218.542 386.335 li
219.731 386.421 li
220.174 386.691 li
220.177 387.276 li
220.906 388.119 li
222.406 389.505 li
222.129 389.859 li
221.776 390.036 li
221.377 390.149 li
220.971 390.323 li
221.324 390.526 li
222.007 390.809 li
222.296 391.005 li
222.706 391.546 li
222.969 391.813 li
223.296 391.918 li
223.564 392.204 li
223.852 392.403 li
224.187 392.502 li
224.358 392.443 li
224.807 392.173 li
225.002 392.102 li
225.23 392.129 li
225.644 392.282 li
225.942 392.356 li
226.295 392.396 li
226.641 392.318 li
226.801 392.012 li
227.051 391.734 li
227.609 391.723 li
228.499 391.819 li
228.866 391.72 li
229.365 391.831 li
229.885 392.008 li
230.309 392.102 li
230.38 391.943 li
230.28 391.602 li
230.298 391.261 li
230.714 391.104 li
233.585 390.751 li
234.411 390.904 li
234.893 391.271 li
236.459 393.29 li
237.072 394.501 li
237.41 394.9 li
238.005 394.942 li
238.574 394.522 li
238.863 393.839 li
238.628 393.101 li
239.372 393.099 li
239.914 393.789 li
240.116 394.74 li
239.846 395.519 li
238.311 396.409 li
238.126 396.609 li
237.983 396.398 li
237.986 396.271 li
237.937 396.189 li
237.627 396.118 li
237.311 396.107 li
236.413 396.299 li
236.47 396.637 li
236.598 396.895 li
236.812 397.058 li
237.581 397.24 li
237.763 397.514 li
237.816 397.792 li
237.919 397.913 li
238.577 398.134 li
239.64 399.039 li
240.444 399.13 li
240.099 398.604 li
239.208 397.813 li
239.026 397.215 li
239.276 396.705 li
239.871 396.798 li
241.042 397.314 li
243.596 397.272 li
244.44 397.514 li
245.109 398.016 li
244.589 398.184 li
243.745 398.068 li
243.439 397.735 li
243.087 397.652 li
242.039 397.639 li
241.627 397.735 li
241.381 397.863 li
241.213 398.009 li
240.843 398.515 li
245.889 398.874 li
247.456 398.515 li
247.353 398.422 li
247.164 398.205 li
247.058 398.115 li
247.438 397.813 li
247.264 397.589 li
246.887 397.329 li
246.654 396.916 li
248.119 396.951 li
248.855 397.072 li
249.436 397.314 li
249.041 397.461 li
248.635 397.507 li
248.282 397.606 li
248.036 397.913 li
249.041 397.923 li
252.043 397.514 li
252.897 397.29 li
253.301 397.29 li
253.468 397.624 li
253.514 397.913 li
254.251 399.75 li
254.593 400.1 li
255.131 400.156 li
256.085 400.132 li
256.9 400.324 li
257.904 400.672 li
258.895 400.854 li
259.683 400.53 li
259.781 400.17 li
259.695 399.805 li
259.703 399.548 li
260.08 399.512 li
260.28 399.661 li
260.479 399.942 li
260.786 400.21 li
261.309 400.331 li
262.192 400.331 li
262.374 400.263 li
262.452 400.124 li
262.506 399.982 li
262.869 399.775 li
262.848 399.12 li
263.114 398.913 li
263.532 398.992 li
263.605 399.33 li
263.495 399.915 li
263.877 400.186 li
264.265 400.235 li
265.291 400.132 li
265.644 400.061 li
265.992 399.882 li
266.591 399.423 li
266.989 399.241 li
267.506 399.205 li
268.51 399.334 li
268.695 399.397 li
269.308 399.731 li
269.846 399.056 li
270.747 399.099 li
271.733 399.306 li
272.521 399.13 li
272.36 398.996 li
272.071 398.654 li
271.907 398.515 li
273.449 397.873 li
273.823 397.624 li
274.429 397.432 li
275.252 397.574 li
276.01 397.796 li
276.427 397.823 li
277.396 397.251 li
278.446 396.966 li
279.364 396.531 li
279.953 395.519 li
277.595 395.435 li
277.136 395.299 li
277.609 395.207 li
278.453 394.946 li
278.955 394.9 li
279.45 394.964 li
280.438 395.239 li
280.942 395.299 li
281.181 395.203 li
281.857 394.793 li
282.688 394.579 li
282.823 394.281 li
282.751 393.501 li
283.147 391.968 li
284.162 390.99 li
288.215 388.979 li
288.767 388.528 li
289.272 387.998 li
289.905 387.457 li
290.637 387.134 li
292.178 386.691 li
292.794 386.402 li
293.452 385.957 li
293.977 385.401 li
294.193 384.783 li
294.254 384.511 li
294.514 383.974 li
294.606 383.095 li
294.714 382.76 li
295.177 382.076 li
296.875 380.353 li
299.048 379.241 li
301.547 378.644 li
307.602 378.199 li
307.673 378.041 li
307.662 377.838 li
307.815 377.643 li
308.121 377.475 li
308.236 377.437 li
308.834 377.461 li
309.453 377.422 li
309.893 377.271 li
310.151 376.892 li
310.248 375.288 li
310.134 374.832 li
309.831 374.466 li
309.524 374.868 li
309.19 375.008 li
308.823 375.074 li
308.417 375.264 li
308.065 375.613 li
307.623 376.278 li
307.22 376.553 li
305.896 376.917 li
305.006 377.461 li
303.948 377.656 li
303.403 377.86 li
303.681 377.361 li
304.774 376.852 li
305.141 376.107 li
305.43 375.997 li
305.765 375.954 li
306.018 375.88 li
306.238 375.697 li
306.8 375.063 li
307.381 374.848 li
308.809 374.644 li
309.325 374.365 li
309.311 373.974 li
308.724 373.667 li
307.95 373.391 li
307.42 373.066 li
307.024 373.4 li
306.651 373.361 li
306.259 373.177 li
305.817 373.066 li
305.554 373.051 li
305.433 372.987 li
305.401 372.839 li
305.401 372.561 li
305.446 372.301 li
305.583 372.286 li
305.778 372.333 li
306.018 372.265 li
306.619 371.898 li
306.985 371.738 li
307.319 371.667 li
307.545 371.509 li
308.236 370.453 li
307.573 370.381 li
307.142 370.1 li
307.128 369.793 li
307.716 369.647 li
308.767 369.672 li
309.144 369.563 li
309.632 369.23 li
309.368 368.668 li
309.269 368.373 li
309.232 368.052 li
309.731 368.323 li
310.13 368.354 li
310.483 368.181 li
310.832 367.834 li
310.618 367.119 li
311.228 366.66 li
312.039 366.269 li
312.448 365.733 li
312.377 365.359 li
312.267 365.046 li
312.274 364.722 li
312.542 364.331 li
313.631 363.423 li
313.684 362.746 li
313.175 362.407 li
312.766 362.041 li
313.122 361.305 li
313.514 360.69 li
314.208 358.607 li
315.792 356.165 li
319.037 353.786 li
321.014 351.147 li
320.981 350.797 li
320.24 350.398 li
312.907 348.443 li
320.458 349.794 li
321.423 349.762 li
322.008 349.459 li
322.316 348.871 li
322.559 347.13 li
322.584 346.176 li
322.299 345.467 li
321.458 345.363 li
321.743 345.007 li
322.139 344.851 li
322.491 344.631 li
322.641 344.075 li
322.599 343.571 li
322.256 342.166 li
322.256 339.958 li
322.104 338.952 li
321.458 338.372 li
322.31 338.009 li
322.548 337.952 li
322.886 337.831 li
322.979 337.55 li
322.99 337.22 li
323.058 336.951 li
323.898 336.225 li
324.294 335.794 li
324.457 335.246 li
324.453 333.575 li
324.564 333.237 li
326.152 331.129 li
326.248 330.844 li
326.056 330.605 li
325.472 330.342 li
324.718 330.161 li
322.256 330.121 li
323.032 329.801 li
325.466 329.922 li
325.932 330.032 li
326.398 330.231 li
326.851 330.328 li
327.274 330.121 li
327.851 330.281 li
328.566 329.982 li
330.354 328.597 li
330.711 328.394 li
331.47 328.191 li
331.241 327.932 li
330.489 327.543 li
329.966 327.127 li
329.446 326.531 li
329.047 325.864 li
328.888 325.229 li
328.642 324.647 li
328.058 324.195 li
327.392 323.782 li
326.89 323.33 li
326.929 323.006 li
327.579 323.116 li
328.41 323.458 li
329.283 324.032 li
330.048 324.241 li
330.38 324.431 li
330.935 324.929 li
331.47 325.526 li
332.085 326.546 li
332.377 327.183 li
332.976 327.144 li
333.3 327.051 li
334.079 326.638 li
334.902 326.457 li
335.233 326.239 li
335.54 325.973 li
335.899 325.727 li
336.352 325.603 li
337.434 325.424 li
339.606 324.331 li
339.856 323.875 li
339.518 320.897 li
339.803 321.227 li
339.866 321.553 li
339.862 321.912 li
339.912 322.313 li
340.44 323.266 li
340.514 323.622 li
340.899 324.185 li
341.778 324.078 li
347.431 321.097 li
350.476 320.057 li
351.078 319.669 li
351.322 319.007 li
350.233 318.198 li
349.322 317.098 li
348.596 315.908 li
348.064 315.327 li
347.427 315.086 li
346.662 314.989 li
345.03 314.431 li
343.452 313.376 li
342.805 312.718 li
349.628 315.229 li
351.234 316.394 li
353.139 318.497 li
353.556 318.747 li
353.897 318.8 li
356.337 318.519 li
356.653 318.397 li
357.007 318.049 li
357.085 317.899 li
357.021 317.73 li
356.95 317.301 li
356.96 316.581 li
357.085 315.717 li
357.362 314.986 li
357.852 314.683 li
358.674 314.551 li
359.436 314.324 li
360.184 314.225 li
360.966 314.501 li
361.209 314.704 li
361.562 315.121 li
361.764 315.285 li
362.271 315.431 li
363.199 315.331 li
363.566 315.393 li
364.369 315.783 li
364.592 316.005 li
364.164 316.101 li
363.712 316.14 li
359.307 317.251 li
358.517 317.34 li
358.16 317.472 li
357.872 317.689 li
357.751 317.998 li
358.007 318.112 li
359.193 317.973 li
361.764 317.301 li
363.46 317.172 li
364.275 316.864 li
366.664 316.609 li
367.465 316.328 li
367.979 316.3 li
367.415 316.85 li
367.44 317.24 li
368.576 318.099 li
369.2 318.693 li
369.554 318.896 li
370.222 318.743 li
370.896 319.33 li
371.295 319.497 li
373.21 319.497 li
373.895 319.599 li
373.99 319.533 li
373.068 318.476 li
372.754 317.692 li
372.789 316.888 li
373.21 316.101 li
372.832 315.844 li
372.75 315.506 li
372.946 315.211 li
373.402 315.086 li
373.775 315.229 li
373.797 315.585 li
373.744 316.019 li
373.9 316.398 li
374.239 316.777 li
374.275 316.998 li
374.192 317.247 li
374.192 317.695 li
374.311 318.085 li
374.682 318.743 li
374.809 319.118 li
375.055 318.922 li
375.312 318.821 li
375.57 318.872 li
375.806 319.118 li
375.82 318.922 li
376.009 318.298 li
376.54 318.392 li
377.263 317.695 li
377.622 318.099 li
377.986 317.376 li
378.225 316.545 li
378.307 315.698 li
378.207 314.905 li
378.129 314.759 li
377.887 314.459 li
377.805 314.285 li
377.847 314.142 li
377.95 313.939 li
378.032 313.7 li
378.007 313.465 li
377.676 313.12 li
377.263 312.878 li
376.921 312.583 li
376.804 312.07 li
376.455 312.216 li
375.625 312.884 li
375.507 312.486 li
375.177 312.232 li
374.733 312.105 li
374.301 312.07 li
373.919 312.205 li
373.67 312.515 li
373.466 312.856 li
373.21 313.084 li
372.808 313.167 li
372.701 312.987 li
372.789 312.176 li
372.736 311.688 li
372.569 311.436 li
371.796 311.09 li
371.528 311.826 li
371.394 312.575 li
371.265 312.679 li
370.995 312.437 li
370.717 312.02 li
370.593 311.577 li
370.125 311.515 li
369.075 311.506 li
367.982 311.713 li
367.381 312.286 li
366.735 312.133 li
365.916 312.033 li
365.582 311.811 li
366.362 311.29 li
367.23 311.072 li
369.162 310.979 li
369.994 310.705 li
368.203 310.345 li
367.761 310.107 li
367.52 309.702 li
367.661 309.507 li
368.007 309.559 li
368.377 309.887 li
368.431 309.423 li
367.595 307.689 li
367.063 305.869 li
366.782 305.275 li
365.425 306.022 li
364.055 306.542 li
360.966 307.092 li
356.96 306.315 li
360.803 306.378 li
362.79 306.144 li
364.564 305.673 li
364.898 305.491 li
365.763 304.875 li
366.188 304.825 li
367.185 304.84 li
367.381 304.654 li
367.431 303.105 li
367.548 302.369 li
367.761 301.659 li
364.265 301.859 li
360.239 300.977 li
366.241 301.278 li
366.782 301.225 li
367.24 301.065 li
367.449 300.869 li
367.601 300.631 li
368.292 299.844 li
368.961 298.622 li
369.374 298.046 li
371.626 296.846 li
372.416 296.111 li
373.389 295.777 li
377.337 295.062 li
378.748 294.249 li
379.004 294.046 li
379.129 293.797 li
379.232 293.465 li
379.398 293.174 li
380.613 292.714 li
381.439 292.621 li
381.761 292.537 li
383.036 291.952 li
383.307 291.753 li
383.421 291.539 li
383.492 291.137 li
383.683 290.986 li
383.943 290.886 li
384.219 290.635 li
384.428 290.274 li
384.449 290.109 li
384.41 289.95 li
384.418 289.616 li
384.278 289.049 li
384.339 288.746 li
385.259 288.402 li
385.813 287.881 li
386.255 287.254 li
386.578 286.236 li
388.851 282.604 li
388.69 282.536 li
388.572 282.469 li
388.438 282.415 li
388.23 282.405 li
388.23 282.187 li
389.521 281.688 li
390.211 280.617 li
390.671 279.327 li
391.247 278.209 li
392.786 276.813 li
393.157 276.592 li
393.464 276.5 li
394.086 276.086 li
394.464 275.994 li
394.911 276.051 li
395.243 276.211 li
395.846 276.81 li
396.065 276.617 li
396.263 276.393 li
396.056 276.118 li
395.557 275.659 li
395.442 275.396 li
395.492 274.915 li
395.709 274.674 li
396.02 274.513 li
396.354 274.285 li
396.476 274.118 li
396.764 273.598 li
397.177 273.616 li
397.385 273.583 li
397.551 273.486 li
398.459 272.38 li
399.086 271.934 li
400.403 271.301 li
400.974 270.881 li
401.537 270.11 li
402.095 269.559 li
402.153 269.42 li
401.07 268.494 li
400.552 268.163 li
400.194 267.718 li
400.059 266.867 li
400.146 266.585 li
400.356 266.635 li
400.563 266.899 li
400.656 267.248 li
400.71 267.753 li
400.885 268.034 li
401.191 268.207 li
402.477 268.626 li
402.825 268.483 li
402.89 267.956 li
402.871 267.066 li
403.039 266.475 li
403.441 265.802 li
404.289 264.748 li
409.958 260.207 li
410.468 259.645 li
412.551 256.652 li
412.718 255.941 li
412.17 256.101 li
411.429 256.037 li
410.777 255.742 li
410.504 255.232 li
410.343 255.041 li
409.723 253.434 li
409.702 253.124 li
409.154 253.116 li
408.463 253.487 li
407.487 254.224 li
407.174 254.338 li
405.211 254.673 li
404.905 254.691 li
404.891 254.62 li
405.51 254.324 li
407.27 253.75 li
408.085 253.327 li
408.911 252.672 li
409.282 252.102 li
409.206 251.493 li
407.598 249.409 li
407.188 249.143 li
407.27 249.598 li
407.537 250.189 li
407.687 250.328 li
407.544 250.916 li
407.22 250.998 li
406.906 250.842 li
406.796 250.728 li
406.896 250.545 li
406.768 250.157 li
406.416 249.801 li
405.87 249.713 li
406.06 249.225 li
406.006 248.801 li
405.688 247.911 li
405.653 247.359 li
405.791 246.999 li
406.49 246.296 li
407.037 245.511 li
407.497 244.669 li
408.064 243.94 li
408.9 243.498 li
408.704 243.915 li
409.101 243.996 li
409.713 243.534 li
410.005 243.608 li
409.943 243.786 li
409.449 244.42 li
409.303 244.716 li
409.741 244.62 li
410.428 244.192 li
411.344 244.007 li
411.543 243.779 li
411.65 243.487 li
411.793 243.206 li
412.081 242.928 li
412.658 242.522 li
412.883 242.32 li
413.338 241.631 li
413.697 240.898 li
412.494 241.604 li
411.871 241.82 li
cp
185.948 372.453 mo
187.772 370.943 li
188.274 370.894 li
188.692 371.449 li
188.655 371.792 li
188.743 372.379 li
188.896 372.955 li
189.072 373.266 li
189.285 373.322 li
189.557 373.312 li
189.789 373.197 li
189.998 372.667 li
190.237 372.816 li
190.449 373.109 li
190.51 373.266 li
191.163 373.201 li
191.674 372.935 li
192.007 372.471 li
192.125 371.83 li
192.043 371.2 li
191.804 370.535 li
191.411 369.972 li
190.869 369.668 li
190.6 369.634 li
190.059 369.659 li
187.712 370.23 li
186.975 370.211 li
186.629 370.277 li
186.399 370.712 li
186.063 371.157 li
185.977 371.25 li
185.638 371.453 li
185.289 371.927 li
185.01 372.46 li
184.859 372.845 li
185.478 372.692 li
185.948 372.453 li
cp
184.917 374.237 mo
185.39 374.077 li
185.798 373.91 li
186.16 373.86 li
186.484 373.726 li
186.493 373.576 li
186.075 373.44 li
185.662 373.455 li
185.373 373.615 li
184.917 373.615 li
184.318 373.757 li
184.219 374.014 li
184.206 374.135 li
184.346 374.251 li
184.917 374.237 li
cp
188.459 440.299 mo
188.293 440.038 li
188.541 439.429 li
188.692 439.241 li
188.153 439.369 li
186.677 440.438 li
186.677 440.655 li
187.745 440.462 li
187.984 440.547 li
188.257 440.979 li
188.413 441.146 li
188.692 441.257 li
188.698 440.916 li
188.604 440.594 li
188.459 440.299 li
cp
188.662 383.757 mo
188.208 383.857 li
187.821 384.138 li
187.77 384.533 li
187.854 384.857 li
187.8 384.964 li
187.921 385.028 li
188.208 384.925 li
189.016 384.391 li
189.212 384.166 li
189.063 383.928 li
188.662 383.757 li
cp
185.631 381.425 mo
185.543 381.438 li
185.478 381.595 li
185.51 381.756 li
185.86 381.862 li
185.934 381.835 li
185.934 381.63 li
185.815 381.475 li
185.631 381.425 li
cp
197.427 397.03 mo
197.253 397.016 li
196.815 397.051 li
197.079 397.282 li
197.461 397.592 li
197.421 397.414 li
197.461 397.165 li
197.427 397.03 li
cp
187.159 380.52 mo
187.082 380.369 li
186.871 380.374 li
186.744 380.409 li
186.617 380.409 li
186.115 380.544 li
186.057 380.604 li
186.036 380.736 li
185.882 380.858 li
185.804 380.979 li
185.86 381.064 li
186.215 381.146 li
186.469 381.149 li
187.037 380.689 li
187.159 380.52 li
cp
692.07 317.773 mo
691.463 317.574 li
689.916 316.566 li
689.586 316.477 li
688.533 316.363 li
688.281 316.239 li
687.79 315.886 li
687.585 315.796 li
687.027 315.847 li
686.773 316.174 li
686.581 316.665 li
686.2 317.217 li
685.642 317.443 li
683.358 317.345 li
683.107 317.212 li
682.568 316.69 li
682.525 316.575 li
682.146 316.677 li
682.133 316.915 li
682.234 317.193 li
682.201 317.413 li
681.626 317.689 li
681.073 317.74 li
680.552 317.876 li
680.084 318.404 li
680.704 319.113 li
682.582 318.876 li
683.265 319.297 li
683.665 319.19 li
684.053 319.264 li
684.285 319.234 li
684.231 318.786 li
684.459 318.586 li
684.696 318.742 li
684.939 318.696 li
685.225 318.581 li
685.607 318.556 li
685.963 318.663 li
686.249 318.85 li
686.753 319.368 li
687.198 319.996 li
687.957 322.035 li
687.983 322.793 li
687.416 323.205 li
686.778 323.477 li
686.592 323.799 li
686.265 324.03 li
684.604 324.864 li
684.001 325.041 li
683.748 325.233 li
683.838 325.399 li
684.071 325.562 li
684.242 325.745 li
684.619 327.018 li
684.692 327.623 li
684.642 328.289 li
684.792 328.583 li
685.235 328.742 li
686.787 328.973 li
686.979 328.953 li
687.264 328.348 li
688.463 328.056 li
689.167 327.639 li
689.875 327.498 li
690.164 327.361 li
690.86 327.32 li
691.926 327.427 li
692.695 327.291 li
692.499 326.525 li
692.245 326.331 li
691.596 326.076 li
691.313 325.794 li
690.962 325.234 li
690.896 324.918 li
690.94 324.438 li
690.906 323.733 li
689.821 324.348 li
689.313 323.857 li
689.294 323.457 li
689.389 323.07 li
689.445 322.668 li
689.329 322.235 li
688.667 321.056 li
688.866 320.662 li
690.954 319.535 li
688.758 318.756 li
688.359 318.308 li
688.425 317.572 li
689.016 317.487 li
690.385 317.936 li
691.746 318.148 li
692.446 318.488 li
692.787 319.177 li
692.585 319.746 li
692.057 320.362 li
691.456 320.854 li
691.023 321.079 li
691.111 321.408 li
691.102 321.74 li
690.962 322.474 li
690.988 322.764 li
691.147 322.862 li
691.335 322.784 li
691.459 322.546 li
691.655 321.965 li
691.967 321.489 li
693.534 319.789 li
694.601 318.93 li
695.705 318.603 li
696.632 319.293 li
696.728 318.814 li
696.959 318.474 li
697.284 318.311 li
697.68 318.365 li
697.717 318.173 li
692.07 317.773 li
cp
695.39 334.188 mo
695.348 333.993 li
695.368 333.791 li
695.372 333.594 li
695.271 333.421 li
694.938 333.274 li
694.447 333.209 li
693.934 333.242 li
693.535 333.373 li
693.166 333.671 li
693.226 333.833 li
693.473 334.04 li
693.665 334.474 li
693.581 334.699 li
693.107 335.453 li
692.921 335.679 li
692.998 335.785 li
692.886 335.867 li
692.961 335.98 li
693.072 336.245 li
693.147 336.357 li
693.031 336.787 li
693.567 336.67 li
694.577 336.237 li
694.786 335.591 li
695.107 335.236 li
696.072 334.831 li
695.523 334.357 li
695.39 334.188 li
cp
552.013 430.52 mo
552.023 430.627 li
552.329 430.501 li
552.251 430.463 li
552.013 430.52 li
cp
552.45 430.976 mo
552.461 431.054 li
552.578 431.118 li
552.571 431.04 li
552.45 430.976 li
cp
545.481 486.837 mo
545.089 486.704 li
544.666 486.691 li
544.267 486.775 li
543.782 487.046 li
542.535 488.029 li
542.229 488.375 li
542.266 489.184 li
542.935 489.607 li
543.854 489.765 li
545.054 489.785 li
545.285 489.757 li
545.41 489.564 li
545.445 489.073 li
545.567 488.578 li
545.788 488.087 li
545.923 487.599 li
545.788 487.107 li
545.481 486.837 li
cp
551.67 430.441 mo
551.692 430.398 li
551.653 430.384 li
551.67 430.441 li
cp
553.262 430.872 mo
553.276 430.765 li
553.237 430.775 li
553.262 430.872 li
cp
174.053 523.25 mo
173.179 522.901 li
172.855 522.869 li
172.667 522.937 li
172.289 523.197 li
170.041 523.561 li
169.63 523.55 li
168.822 523.101 li
168.36 522.92 li
167.821 522.869 li
168.055 523.236 li
168.338 523.482 li
169.02 523.87 li
169.279 524.116 li
169.407 524.304 li
169.615 524.426 li
173.635 524.649 li
173.838 524.376 li
174.243 524.429 li
174.646 524.394 li
175.432 524.126 li
176.258 524.009 li
176.669 523.87 li
176.049 523.586 li
174.053 523.25 li
cp
178.475 514.352 mo
178.356 514.009 li
178.465 513.841 li
177.144 514.041 li
176.669 514.026 li
176.732 513.834 li
176.796 513.432 li
176.851 513.244 li
176.463 513.354 li
175.051 513.55 li
174.651 513.535 li
174.14 513.354 li
173.746 513.403 li
173.356 513.546 li
172.855 513.642 li
173.484 514.126 li
173.414 514.771 li
173.061 515.477 li
172.855 516.139 li
172.722 517.04 li
172.35 517.73 li
171.771 518.258 li
167.857 520.023 li
166.724 521.213 li
167.02 522.869 li
167.703 522.264 li
168.084 521.996 li
168.33 521.972 li
168.692 522.335 li
169.028 522.545 li
169.415 522.646 li
169.937 522.67 li
170.368 522.61 li
170.668 522.42 li
170.831 522.11 li
170.837 521.673 li
170.694 521.316 li
170.46 521.113 li
170.159 520.939 li
169.838 520.672 li
170.26 520.676 li
170.937 520.993 li
171.346 521.073 li
171.594 520.957 li
171.43 520.697 li
171.101 520.431 li
170.837 520.272 li
171.225 519.968 li
171.63 520.013 li
172.023 520.263 li
172.343 520.562 li
172.488 520.986 li
172.308 521.442 li
172.017 521.886 li
171.835 522.271 li
172.582 521.965 li
172.921 521.759 li
173.233 521.455 li
173.702 522.089 li
174.536 522.381 li
175.455 522.588 li
176.157 522.97 li
176.611 523.132 li
177.071 522.861 li
177.4 522.371 li
177.467 521.872 li
177.246 521.676 li
176.771 521.459 li
176.246 521.3 li
175.852 521.274 li
175.852 521.073 li
176.094 521.092 li
176.602 521.053 li
176.851 521.073 li
176.727 520.818 li
176.682 520.565 li
176.717 520.313 li
176.851 520.052 li
176.467 520.01 li
175.701 520.077 li
175.25 520.052 li
175.583 519.571 li
175.852 519.055 li
175.232 519.023 li
174.213 518.652 li
173.635 518.656 li
173.635 518.457 li
174.416 518.35 li
175.97 518.464 li
176.669 518.258 li
176.248 518.062 li
175.779 517.954 li
175.296 517.951 li
174.852 518.059 li
175.438 517.585 li
175.67 517.457 li
175.577 517.289 li
175.45 516.857 li
175.643 516.923 li
176.058 516.997 li
176.248 517.057 li
175.97 516.345 li
175.762 516.057 li
175.45 515.839 li
175.951 515.654 li
176.302 515.774 li
176.663 515.85 li
177.168 515.54 li
177.273 515.319 li
177.301 515.092 li
177.387 514.914 li
177.664 514.843 li
178.887 514.843 li
178.692 514.689 li
178.475 514.352 li
cp
553.271 430.603 mo
553.237 430.623 li
553.273 430.677 li
553.271 430.603 li
cp
0 0 0 .800003 cmyk
@
.694118 .631373 .619608 .584314 cmyk
%ADOBeginSubsetFont: Roboto-Light Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2014 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Roboto-Light def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 46 /period put
dup 67 /C put
dup 70 /F put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
dup 169 /copyright put
def
/FontBBox {-474 -271 1146 1048} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
21 dict dup begin
/.notdef <1C60D8A8C9B879BEDE> |-
/space <1C60D8A8C9B879BEDE> |-
/period <1C60D8A8C9B87DE052DAF2DBC128D720E2595608> |-
/C <1C60D8A8C9B6747BB44E91F5A44E5C956708D717B186230360326090175A
105638B12D17F3AC56A3C73AFDAA1267720B3D2E06ADE5219664A5624677528A
D814928CC4455730E265C6EDB81AD8D69A18111B229AC6DD702EB8C791958844
5A2699E9C5CA6B8562FBBD77F404EFF3BD046C0E2BB5BE53544F682DB39E9A4F
A2F254961613514FF36508FBE9CC6D> |-
/F <1C60D8A8C9B794D334AF09011CC83D8A977AFE03EC1D2F2DE390B5D7B3EA
6F76B640B6A63A0C815E> |-
/M <1C60D8A8C9B69378631BE188059E53E4B0080F861F384715EC0BDFF820AF
00774B70B3BAE7AA1FD29A541423D92F990337D7ABCE6713FB412F7215> |-
/V <1C60D8A8C9B7D61BE5BD453F6CE069F883283535B8C041214E48F8AD05F6
7BCF0DB080E83A6DECB6240DA9> |-
/a <1C60D8A8C9B78181CF89FCCF642CFE9EA6860C048952730488D11972FFEE
454EAE8147B085ECC51C14F2897E6117DABCAB72FE1ED473CAD7F18C8494C8C1
EBD2F54783164370942B3FBFC1978D6849E7BBC91E8ADADEED9273932B7FF0AC
EC898A546F97A1B13DA54B5370218EA8788537DE9A067188DC72373D17CFBF8F
73C671DB956E1560A6369F5C55C4D3D5734D8578607E5E98913D41FDDA7382BB
88DCA9F5C6EF831843BFC1BDAE6363C6E97350D63CB9FDC98FF7D578907FC031
5822326454DF4E798DDB1EE58AB2> |-
/c <1C60D8A8C9B7B8EB2AF4F306B0D6054C19C1100BB8EF910A7C2387FADFBE
8BA460E0F8B2E67F3AEFEE1B757C6462BF91EE64FA2ED1578CFB5F7FC23D1A6A
2F2A2EC073233E551E5C08B968C9ED4BEB89AF03BC9A1E0A1C6EECF86B26B395
27E8BEC6482A6534E0230E984E8CBB58A89EBBDD4DF0B271BEFF724002F1659A
1DD1B63A6EC2BB6B743D3B695BE2> |-
/e <1C60D8A8C9B7B8EB25DC2A432E78D8DA98C5FEEB76418C2F5064D222355A
7086482E15C640DD4B7F96D1F43F6126435F8E587B207D9D65A9B7DB8063419B
40A41ED24A5A60C52C860B3E9A51095FF96BBAAA1615B5FFE93EE676EC26509C
F848CA40EC2A4CDB277A71453CE0687463F31333B7432E3D96EFEF982FAD1041
943512AA033006D3FB56ACEDF00C47C33ECA641BE647436052> |-
/g <1C60D8A8C9B7EE7C2DEFD0A56810F6CDACEEEF2661D4FF881B8E16C2C732
DA2729524484103FE172C569A096BCE4C6EE4DFAF6FC1CB07F12B09876A4FD8F
33BD222FAED433206AF10BDCA98DE9AF100E71C29D23281662946AAA4EA1A7F3
73D049155C858618A9A3F748FDF253610758CEE2EC115E62C84F96F2A37BFEC9
91ED94DB82E6F6BFFEB3A8A5B9A3F5E7EC0651FA6546116E4E6E0AEEEDE3A083
2AE07420BFFB7298EAC473DA0581187316A8D652B7F4D176A5881E1F0C7D702A
3DCCD7AAF60B11156EF890> |-
/h <1C60D8A8C9B7EE7C19EBED65F02B761F1813C716406D53F6EA9D29B36E4B
6B390233946C6E2CD668292FB8E6A433746CF9CCB6DEB193B97083EAED70B9D8
B47FD427314477CC033276DAFDFA829454390C4AF85EF429FC53A1> |-
/i <1C60D8A8C9B88997F3B61BAB998BFD8FBD37E68D323462A94E3AF8765121
3078> |-
/m <1C60D8A8C9B598EE57AEB6092C0E332C5F9B7408DF718656450BF4C04040
0E781C99815404E2F3CF07415B0F8E868BD72F13023D0294C2C77B3D8E5BE3AA
BF0E17DD8E0E3D5BDCA59C9AB9AC9E27669B204FB720F1C4021FC2185084767F
C423839651E331CB839F5237CD5586A3D8557ABF6DAC6E8E5F998CE3EBEF5DCB
F035E2A20BAE0099EEA78440029311DCCF2B1223A9581C07999F335779BE0F13
7D844AC50683A585E1> |-
/o <1C60D8A8C9B7EE7C596447C564123A2E2BD67D1934DBBF29AFAEAAE04814
BEF077BE3496F670F616A330629EA9C4677BBCA1C86B76B01830B2BDB3932F3A
916103FE53FAF170DEC8E0DAFE3DBC54A604A64A4ACBB42989FE66B5FB794440
662F252A670E5BF88802F0E866A771484384E2C1C1D66B2BE82BDF5B0525896D
2B3ED74412F9B5> |-
/p <1C60D8A8C9B7EE7C16066AEB31BC1D50A6012C82270105001EFEF0953BF7
0FA5E6D6D83D8E07C7420211D9F7F0A1DD198AE9D0AB70BD9441A811F2EE300E
78BBF1A11D737D4F80AE2B9CCAE0DCBD1C505ACF935A89BF6AA7808E109ED0F7
F5C88605060BB873A7D34149F8052782E193AF05F2BD1E1A86554C4CBD2A2FB4
52D2A90FC666DD567D828DC65C7BE16024059424> |-
/r <1C60D8A8C9B817A07448DA411068A6A5D634984EA5F4DDF4059DDFD27DDB
85BEC7E37A35C1F63BF3BBD58A537A4788380A704976A4955F50B98222F6AF57
7BEB65610B536F276AAAF8B3A6> |-
/s <1C60D8A8C9B7BEB14137006B992FAE68FE5C96301D8EDFA7AE3DA0CFA208
5E264538EF8D8D756FF879D9A35E10594E6943D640F22941A67079BCC7F6CBA8
7DBC1AEF51BA8C845F9FE7CB104CE4FF51A31278ACFB6F21FF5DB94975ED1348
3711DDBF9896E80332BAEB6DB3BDEEB53F9042AAF8D89E5274566A33092268CD
46067083DD8B5236D3995D079C162CC11A47734D96EC3852BCF927B436DFF2A7
D69CFD689322AD0D226558BE820A6AE99E73E1333BA8261FEB3A0069AFF42613
A230> |-
/t <1C60D8A8C9B8286E8459EA799CD6F16BCE45FB2AA24DC8BD95A27140F603
BC94D3B91D09A52066E565A99576D2D453A7D7AC28C85225E88B769EEC1146D0
B04CD852FC9DD43F10116E3E92361EFB151C1B431290FCAE5CA2BA0B35250C0C
C5DB794B9027> |-
/y <1C60D8A8C9B752AB6199BEE42C14215B0ABE7188848D65C43051962701F9
A6317C00A5A63FE4868A0782B6276A2426FAB3497953848B3B66F66A2681BE71
FC40E1AC93CE4CE2010739A26873116A847C1A8D47057B059A8DDFEF30A0B525
38F618E8BF77> |-
/copyright <1C60D8A8C9B6D24F7C03A9BBA01D6C0EBAF6168E7A2762D828F0
B616BABD1F873A4DFA8615677547CFA0EB8C8055162519E8489159447DAC04B6
94B3F0941CEFEFA5ACB093A8069032CF7B563D13957CE80F4BC27CCBE470E3F3
BCBE6C6285452D5D1882F5AD8878BE994CAFF0A0766274E4F400A566DB092C0D
D205F4AD83739D622C2EB7404E616364E4EC08CF594A5F0D5F0E643DBCEE6335
0125AD0D58CFD6BB4FCDEF64AB0CDA06B2EB0E7C470B0E781D966660787799AB
00D6E1E876943F764EB36FC8A3BF6333255E8D68592AFD0D34E2B5A384F59C67
A781090B654BDFC3546B527E7C3319D06211D7E829AA3AA4F5A470D0BCE44F57
C0D6CFEF21D2661E651E4477> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/OTQQPV+Roboto-Light /Roboto-Light findfont ct_VMDictPut
/OTQQPV+Roboto-Light*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period 20{/.notdef}rp /C 2{/.notdef}rp /F 
6{/.notdef}rp /M 8{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c 
/.notdef /e /.notdef /g /h /i 3{/.notdef}rp /m 
/.notdef /o /p /.notdef /r /s /t 4{/.notdef}rp 
/y 47{/.notdef}rp /copyright 86{/.notdef}rp]
OTQQPV+Roboto-Light nf
OTQQPV+Roboto-Light*1 [8 0 0 -8 0 0 ]msf
584.112 528 mo
(Copyright \251 Free Vector Maps.com)
[5.20898 4.5332 4.49023 3.99365 2.81055 1.89648 4.5332 4.5332 2.6543 2.0249 6.47461 2.02539 
4.38477 2.73633 4.19727 4.19678 2.02539 4.81445 4.19727 4.19727 2.6543 4.53271 2.81055 2.02539 
6.97852 4.38086 4.5332 4.1543 1.98975 4.19727 4.5332 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/OTQQPV+Roboto-Light*1 uf
/OTQQPV+Roboto-Light uf
/Roboto-Light uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Ted) ()
%%Title: (NZ-EPS-01-1001.eps)
%%CreationDate: 3/4/2014 8:28 PM
%AI9_DataStream
%Gb"-6BmUf>YqZ%1c_LMjSA^6u>N@?kdkeGm(`OJUFJMIu(*?%t84\>$!Xo(_;1AJG]mBqk+\TPkGnZ3LJq]eb?E.eESp0'4/?\1!
%Zha4/iZB97o"=3u^"R$\n+']O]_h+=Ae1f?DNc=&bMZ`5i[=3Q1H$7*cE8guoC[atibZ20%2Th=jm%KTnC;(+qg@rS^7"W-R9j,L
%Id@Lr->,!\HVP@J27.eAGe.!1m[h^q^K@C@5J"S?\sQ4<%r;GU?<f.W'-HkLTJNY5]%9/R4In[HR/SeQ.%^)"q-JMLoJ4)T]hY'i
%X/j52jlG^G.qt@CnkQem5C`7gEcO?r8(.-9n^.("?,FAX:Bg..mHs=I>[4J`bK5(8PR$ViGd_o!;cgd+l>9n3?;,<t!(Ums!dmd=
%Af&p[`U\&TmeJ(3QJB#(<mWj/+T*e[Hh4S%lgs?C=J+h<Facd:KI?E4UZm(6c[^;;.2dU6bobEbrW("`\0cir4fUj9b+(Y+^96E^
%PN>N(pMPKXE;FrO,G$LLhq^Rd0L=Kj8(4LFIfYU^VndEoB5]VT2S$P(F'j:!'ms9Dl1&lN^I$#!m](epF1O-;poh=gJ6mG@r%Bt_
%r.L]#?J0DtS-KQopl'eD<*@OmppuP+nr3ksj>M,nBDD#ho'0\iT$gqcFk/'0VSBMFXB;dYmeW[iRaSWK7=Rqa\ETkTbbdURd/1_&
%E^!dOg@ps"8$d]^)M\B<[$&AFl\k#uMtmeU;FRgEVuQA-q=K7T=)L75R,E"_;aUMN(69idkL2<V[u5$lr==3sVVh@:qXSb!C5P-H
%P_\&/Ra*!.^8-eGF[Zf#!IB=sj3#0k1]aM;VD\#(F'L[nMAYi3_d"DRG96g)hI"R"cfQ>17<.D3!39:8iQ,#E,8C(?EcrK13#'&p
%s$u*0Wfqplrf_6;,coVH\P>h)4;iSh0kK%ckDuh\j8&LiEJ^`IS*&N-OSKm)a2R&KHlN*Ymf:?"eZF&0^%G.R*<5t`Z(A)uj2JCW
%<6)e*I[Kj"U-9W*0,M=7b`W`;-`cM%1K^j6S>#+A)$\l=G.!dTj,_M6c_"""ndE/r5+=-T<1[Ahs)EED?*7NcY#gh_q=15da`9+#
%IXXGl+P[d^BC"UTj'M.9j$j%,UX)To\FrI.WdjM>:Tjf15+^'G-`\'(dnBPFSm@j^O(#qu:G4(gi;:Qqc9qEi`UrqQZ+^3U1@+&9
%3W94Blk2e#l5d(2J0Db;G/n7IbN3hpp'UetNh7p?0;nE>';5*4WfORdn_)peQ/Go=5FZ!)k-I)'*f=Hps4Q)d@_Pqd^Nano@QH_[
%&iYC]c]9_,B@nf'<`l0X/)\TikOn+brSq@0%?i\S/<AC9QIDi32*&9T:QI04JUGXNJt8OMq@bdFTX0Q7$"-r\iuQL?bK9&9qLX#m
%fD+IbY9uuQ#=#qi>Wh%Z#]S>;S)UqRoDkidr5=&iRXLdb^5]jf"$#_0O,)/;j"]A=4JnSKb;d%\D"lcG<qlA$pQ@H/XNc"giqQ=A
%5X9C_Dn++PgeVgtc[EBCpK[jpSm>X73kiA?5aqI7#P82Wr'bYt(O"Chr8lrTM^;3C'SP*Y88WK3i<N/#4Hnjo#sW`F81$/6PNhV*
%:</T;T/-+S]GXO?mCjIIRW5B2nq`^ARDO'iq1/ok^<f%qOrG1b`9o^Zr@gS=:W>9LHHf6sDY<2HmWlcYYA#au.JVIUO2oH`rF\nI
%Y<WqPd/+IfP/ml;1unDb!d0,+H;@GhWM;t3HeeJk\CHfI^uN2b,-8T''PHn)np:0-e^[V91d1=7o\]aDqjM]VT<@CiqT4AJC\[JL
%jl6.%hYc'deiU?4Fm2&VXC$KQ#[Ck^V^F1tZcBNToQ9eZ!fn\7X#i85I.Z^pl/H0\\ho'h`',8plL>M.$O1qWl1`X_co,bL+F\WY
%4^1\m61k6>aDu`Zc6HY%Y?piB0,>AT8SK;Sg#,.-o0*+3&$a./*WTRHq][+W5Y.&i5<IVSJ'7T[TH3bJnlX6^QICYHre01TnFo3O
%I7C9GXiKh4lk,_2r-LO2([B[i%U*V.2GTe<`T7h<R_;3E-<CJmQ7#8I6i%=Z!Z4!*D%LeO#K(J"Pq7GO5c"%dROkWPg0,;Vq./0R
%0+9dZV?[dmFrbHhY_^jTgIsWfh7NQ0B'9]dBa_=/5Npr&@QpDh:=":5bm];=CkJH3h&DlJQMD+@Rf0OCX+i.?<L"UX=5m"Qk&=mC
%<h'k6\44HA(r4ZTR\DD9>ZK_j=-Q-Nj@**[q+2'Z-QhHfI$"*o"uQ+:=1QWt+=cqEca&aNS;jg_2TY_tPLWg$q97eBDS>Wrp#kBf
%s1B,e0jQ$:rl+ip?4>e-kc2$T2Z$LEH(9)Iopt]Gbkr#aT'&;Qm";PJ/)Y+VpaYMXjN9D6q9f36Rsr+:kR[Qcrj[G5a9FYd83(Vk
%5H"cp:_0!\IkV]J#G]+[Duu*HLW-J;\tL3H__A0Ic#>?V%S+G,n77cC^n)GZUN5EbIT2<DW#dgkrb*u(N^ff6k[^3CF!/GBm)FKZ
%NPi7I2rjm^0HOtY@*Ermc;f"id(/G$X$KYrs)1uREt(1^:bV.\[[+h^2/6FWj>ojc?4`b0?CJNL[=??[EdU`6>jpJrK-etYIcH!:
%E$*[s;gmBS6eLM1f2$o&E;(0e#omr=MDt`Z$KN%P_O/f%J.Hf[dae]&m">WjLMiBa$5Lg&,NHcUSl#Fpl9hDof,5P$JL5-)N='@;
%!Nd&T>;eGAqAB;S%=k$bTWAJKbQ4OT0VMYL"K65A<&akmCi&P"8p8gt9+,$/&K3Du\dI]e[+?m8d<)L%rO_Y33tSU0>Q_TmFN%$<
%X1WMoFH't"ofD%>0V0QE2#\32Vh3Kqgp0FTCDLTDd"7!&SO;69pj$okZp/F)491>&qVrro^%'ZZ&H?Kp8"ThB\8uN?1Yog09D=MG
%%6Gfl\@2@#LL.@>kVpsg3A+*8l3gZSmj],YmJ:_YL2I,f/VE:@@'_k#q;?&GpjjN5@"s-s:LH2?WiUSJ<HZhkrG#/g.Zh0j8]Y;U
%E-o1S6P\n5KL$H0;)kP]\psr7CKFS[W11A*%r5RRoa-^e!?9]N<>-;Kkr6Lle;P?>-!7M_rfqo`p\iHoRt/g8QQHU%7iou]*dPD=
%H.]%7jcRk6QNp\<:(IVhgC(cO$i.JVI-(/5nU0KqbkICo1[k(IhB<2U14Z2$bCK[<*n*jD0a`!U*3epOQ#Jan?m=P:E7Jp$FRA)l
%Or6;V17'ftd0@U/0'cFgP&NU']WWKXhC&<G*;Do]E'_,Q3Nj7eMnBkY*_c!XBdo`'-PXO!eGrke<RIJ)Z91sL([C9!FWl0m5nsCb
%!a<a#_?/($;V@]]_Qo]I<1a_]3V^WOed!\j_r?]9c5b3!#:dW`IQ]qW]Ch1\>1#=&[/e]W"/R0CNBn"6+Y#i?@k-dX%j0b^!0rg;
%A]X+u`fS>nHu?WMRKP0@:=9.J&:h2cNu.l=i:8$kQ+1OYRKCi6%Fd4D=s?R*&a+_*OER'IkZ1)3pba[J!R$-pL/cS4NSria-@Xss
%B5dV/h[&8>L+!jGN.5[uhUY]T^Nd<?jn1B72-s;K$9)44pB$9m0TjTHX2"6EZnKj\kdT1T,bC9dN8r7*Y+],'\b^J,G1Cs@Xk#nL
%HrY?8]:<0'?%lR`YTsAR0VVHbP$G85l-I_Z6#uX^X5OG.pkErt]L$X=alQ`nCL(Maa=:k1D=oDp?c/)Q2==_bQ\M8pCYR0CkLFKX
%Uq+old:;obYg!Xu2UPub)hreFo%*nl/GcTCOC&&<i8bB!*VMd2f>LNLnCEbIC^u3U$'<77V#131.S0IU3-#1M)7afSg->kZ&%M>8
%G6/-7!HIZk"Q8P[n93m^"f["inbj%jJ0E!b5"Gd?#m$iSY<^0ZUaSK7TFlYTKEhm0lQ'BR"->$]cs1=I0bm8!LZS\0+&jjK@')ti
%,EPVRG`YeLH&u'Xj;'QU.9;VRP2k[0)0\CmN+=Ufaep0fp/b5SYLrJLS<1d#6kYcu(4D@QY_0l<J_gc1*XkOW>!^_]T'2,1dnKF\
%eU,gnXOYb'Q/?5hlsKe?[e5E@7g^Y@.h`9JotQ=bQj/cV+q4N(74RNJ5VO*a.R4p)9a+k%J2IS-"/^`[LCOC5!E2<NP`W:$@7ZX0
%-VC=o&h5T%O;9#t!'Qt^-e'j::d`ueV=`-/#[$om/ukR;l(TrEE2(;f7NI>nOIrI_\7+4\QZqh4;g*&c\H-3Nj4aF^Uafbo40G`F
%h3>6nq6oIB0Q+Yc-Fpch2N)\6r,/!OhK#"e<_jWKEMuttU=Gq@:a*Z<[TAXKa0L"BEg^JnbMGK>(1\o999c0=aN5%9_`l2S5S=MP
%(WrY7jN`Ql8DC&Y>etXdBXE39D^.cn;2Hu@^q>1D!V:gTi;pIgH1r+7B\N9dlX>;7Y/_ROK]hB%kC&@P*HsO2E809_[tF$`gssX%
%EAmthfZCXmj%e02X?0O.D^G:Hp+5Z7>Dnq^]S'E/_u04B?9N,g>kF%"bTtK/LH39j*5h.9C$*(PfiWJIbneNnK5HR[F$s9>#*.qU
%;hOa8F+de]B*c%X7XT2@>d5W)=OoKP60*Q0blH!##B[i[Pj^?YA%BW80/okcI'+fC$Km.(>Xha1bmZ:\^.>b;A/t1tr0J'])[T#E
%DH;[;X%^)n?7(%.I^;6[s7O?WAA9hqL=nLmMN9aecO6r!BK<Y-dGAY\o*#sABXMjIq#QFmqK(*!!9;2U]b'3qp/<Vc%W&^GUP#4X
%Y$#lTPi`fJEp9ntJ6W*m3s1$"S2lth))+m25iQDHk%O%<WsKe@j:!/DP;?hO0N<'QTfZX5/uKn53X'Ocou6GX-C6t%N2If]P:-*'
%9b&Rn%A4AL/C&g:*)S"B#gaGhP;<P+U,\si)231X%]RTU;AskchubZd+pgNQ&;7Wm1^oMXW&t5..WeT\OCd>)+#NjOpH&0\Z%25J
%ru1KIZ_';WMIc\s>6/%4=TS)Dd0eZTa&X<gK4/O)o%"]^>D"a4A0E()cKl[4JKPC*m952d6(qmXV:qcIlr%=5WB4Bu6<=3QW^aU"
%WU`N$.k57M7;f_aA5`fiU)(1B.#6`:6+VHUZXsH^TBtXlK(66'gkbK^Z1#C"X3\e:Jc?)Ojo(h>rjFnSGQ!V^dd?IMf]bZ8\CV*D
%I[/CA5*$1TguU/.kk"5nS^%$MG;eo)1t]jWVg1e5;h%'E)>5k+;^]jkG3[Nd:A-@/?JN<"GJUX+OMc37/m$o?.JN2u:>2u;Suj8s
%bO0dl#3PB9S1.rg`HGPb*7e+;Ip[f>k3/-CDbdI8P+5Y>l;s<RD=7E&L<G(B'&VbcSiHa%!!%nTQ`IDBfVN!W^&#i.BO0b-!fY#B
%FO7SB%EtNX'+39(8?SaBI4<"B9#@D^"e3oq&Aqfo^5CVFn1ZUs;,T8@X5+n9e/+Kq]nI'p,.g6`iBNu<Uh*%g.arI&BFb3/?V&dB
%dn8-mV/2jnK#:S2WP$<V`e%59#q%El@mD3!o:[<0AVa:qbE.po_NCRQ<8N_dK"2'ea@L'Nekf4?!Ik=7*'42\@"#itV$@?7%EP(!
%!*2CZKp"b1BL\X^VU#8IU@O8u2PgQoR)[OiLHe=KRF$++Ta"!s9ltQq@rAt)N`,f6BTc895u_,]q>stsafK'Sd`U(?<9k3dN>,U;
%.oGRF6B5,i^u`%4a_('T/K]/$gFp@pKb^e2jdR&og]FnL[?^<TCaQg*.J"I4dm<-Il^2q7r?e5D0o@?W#NS_]a.B@BfRE*#I3$)4
%H,dfR)Z?D'4Ha(D&C5%T*A>Z!Y+F$lH:H"0TYAgVLRc$\K,rgr[[3MtUBC(cTKd#:5FQo@fnZfV6Q3Z"jrl&5Sbbn-9A8:mP4&",
%7P?1rR'*?o0i)N8LVD#7C7\>rVd%0\f$##,0Xl\SIM.nTJMD&!^3&S?Rmkha^hcgc:mf71U(:RE/Pg%sA@**s1#5sUAi-A(O4d!@
%lA]_<hDQemkTTK;$e9B5Nh\DX.j(`cl#)U2*DdSO?B!AZhYF:\[n2!"qRcDq=ghut;IQ@gp=D)@1*nD%VOi..8>+WcU!-&uRsAu1
%K$6@"1+Z,;ii]0"ID??oFIS#B^`*2oP\3^]3W.h+4B,G><udq(h#i97Z!k>tPIH-[Yej]]TGVsRF?@W2&'HFRSZEA2+#5FFbdiJ6
%kkV=3PXbn=<mmNt_8?/lJb$Gi$lQE)EDSqkQSgH"XH8(Zm]2's<5h]@1m[do9sAS$18)tukH*%BV(GCmcQci!1Y@3LTe8qg*A![)
%,edULNp8Aqqt.<N9)j@o_Ro*SkBR4=IoHSQ]K%9\&PDM"?o8EAVj5%HpM_YCJo;"7?W0*?IA#\PTnXd/0hbEbS$ZsL!?:_?-,6=n
%CF]4tl0Y>%T&:)tWm6SQmcK!IaNMK;W?@n1^8+qm`$XdsXnF2<Z/q;uX6V+YCr\?a8H`K5NV\gfP>tc#ZtD`ur8_rq[2Gai#e^@\
%ReF-Br>fSrV"NFT6_n%,8P7-0*Z@bodGB0Gk9]V!-,%iY9p4!Ek>hPejic6DfMY`@e8F6HpE;ui)N)j@A8OkJ:?$:]Mof*ic8:6@
%/d`rX@F;SQ(JV47`tgOk]kR/;e"_)Y3r06VV6),SFdR@@UjoM\N0>Z%N*uqVPo"4/mA%n,OYi6SQYa.bEeh<h$#sjEAcdrDj+hZ&
%2ParcL7[%?+pGH(.8nDm/TME`DHV[r!Fd&lPDG,:O]4ZM<dQkhJ5EW7ll.-p;smS%jZOn*f7]C[oHW`BGDZ5DR#_JrlqNV70a7R)
%PgF=7+\`#T7=88N#E:X'Y6Iup9)3S2ZsltPH"XV]A=DRdClG@<2e0EWNio$cBH>n]%_=a92;C)f;FtY%:rVnG*\&*p,q/tc`]&tk
%W$a4,;)fF^3ei<[U)?<%(pS1V]2$aTbbOB^UD#0;GS,mb4`6dsCFf./2L..Lj9l>op:[#JmkXUFRsLU;\!N*3QtEhd9Xsaja2AWm
%6>$E+1]4AM8B(ZTkcjqYUNP`j[Z6&6Z"iiP<iKlQ7M#_j'FK7[/_r=BI>0\>"%6<,>@"Mf?'4PG\uS/-JIu]U^UoWD:5Ko+(0Xk7
%7<;qKi@$.TOj^_7<P'fE>=a$EROZ^f3hr-"Xt`0_P5$W_F_TT7F_]OV2CCq;\72"Ek2]?Z-97EGI6[)kd2We+ZoN%-/8E:Z*6,Qa
%ZB+sMlG5c(PF(@)KI"I@8ErKF3"nO'es]",U8tEiMX.=Q2UQ+_nQ)Wm5dOgTel1=!:+K.FUS2EI-C%]n,u75Np*US-C:#K?>h$&J
%;EK(:0'Z9B4D0/#,X6(fe+d(1E1KJHP!V`ek+U*/4%ImPbCjLTj(junDT(u;s.g7_(lRj[&dG\q)Ub_`-I()P(pcqFp5tQU[NP-'
%e[EJ0e)dHnln4*Q[[kS3(]dC<50>H;+0CK_"(cdr^LJ%1c;/eI>cT]5kG]ZneVFsn-_<4i$8eM@)(eJ9(,"-f@/GVqY2i`$>F%^u
%[cCTW[l(`VGHf%h(M[Z,YGL>sMuK'"V4,U7Bmu<nQaZ(0XjRfH<0D-j'WpLS';^saC8l/(V8-9[aRc*OTb[sGc>50TECnba1d`dn
%Kc/jDg4l,nXQ,>p2K;n6Y*T?YLR-OQORTX>[an%"04q_[U]tYE&6#Dpm6`Q#FX_GXm@76U%"Jf:VAa9[B_SP3)d2^HWjX<l>O1g'
%c,f%;`/NU#RM.'R8=Pl4c-ofUCgKg&K,GPolIVRE<F[thrQVlejTf^\NZC)(];T6fSTJHhH9)P.PNYRTMt^`6;'`b'EMD6,M<&Ks
%$<lnf0uFI*dl1iu:HS&lg4V66`68\A_FkeL&_eT`X/)"rSWo5Ebg^CK.JH6R:'5'noI4ha$VX>/qr5tg`Kk\:/Q7(#$f8QG?7!]a
%eU:ZUYA)"Ub#E*n\[7?OG]`UmI[3V:TBL%BGRp_F\+FInWoo?j5,ptCC(D]bQmUW\'sb1R]m#k!B6Uc3N23&TUQP#na!kI#$E#Q(
%rEeUeUcjGD)@R:P(CHo@FP<R>i"-<EE$=figSdKCacCft'7\S;6`JIrVSFE0O"tR@aTEs"+muVrK6YH-UXJ=:cS\4qXBX).[t@Ld
%8fV]*5.f<i=(D0Da1)/!TU?qc?!/61%dm%X95fiLHW:j.#,er7^lSsc4hNW8irY!BfVKFF*6)Z$YMK=9l;bli>.GkW8;Jbn:5>mX
%H:)GGNq,Gs/1^X&+9of_h9lR+VQ6MS\5'PeJ/]NA2*EHYPP"'5;8&qrfP`ulajYN.BeZQ.C<4,iHa8?2WV.k*_<a@h@cJ^N;Gk+Q
%%e?IDF,Hdr``cj;Wlu"7A:gLCj#N1f,Y<fQ$&7;9Hoih_O#%LS=&`E[S"el[VN\?^q3o_A)p15Z;!s75@DIU3n76QOo-kQ':55@)
%ERIINpQ@Yr8tWR,>>(Tdr184-!e&osTF^DmqNeWRm-:02Zh4r.g-(^7qcQ>WXI8M0.e.U(cFb$/-4]5"8;9l32(>Zc<!T00cF$K[
%!1L.YTTN&?Ul(Bh$M*.hl=i\Y*NjE$(emg9'Nb/59b^&3cGCI,d)1sN;FX1dQ<kS)=hN+6'iY10N&kMb\^3fL<ma]8>DP=D%`11'
%8[]sRN9B]KbN54+nn^Cm8ptB4cpM/8W7%^,p:36S<1O]b)n+n!T2h&j>*93<i=&t.XcUQq7K[gAY)n49nd(4X>N8u>3:?\o$$PN(
%-!]JR68gm&(i,7-/5R6W_!4=X-G$W3ALZU7el%2-C+?<fS;WT4D+Sm7SoUOQP[c4JqEGouq7hpZjoQ$4C*clu<@;lIaP(9c`R#j?
%X$jE]4FMDI:N@_6frd9(H-n\AU3k<Wl[0)UW+T>1-X!8.<lc-nFs]X?Dh=uL-l"n4`rPI4X"#_n9]p":ZNicZ/-ALaf)SL;&s!l+
%Z9XA&@Q54"JMI_UBQ-P[93]];8C&R.I)l^hr@$EKe2`d:Aj`FC'%hI4WQfVEFjQ"E7Rh$mGFiVkcl*#+oF-pN=#cd,d^KsWon@Oj
%FH-$rYHDhLh\]h'k_q,a76Lg>8'20C:3AYRf$:?LXP-n]U3c*\XY?"LQEBN=bnYDk/"G[`+*nY`Y=(AdT0OG.a?/U-S*p,#.o4!H
%p8Y%&HM_Ht[;N0)Xg=N3ZXkM.<k5o`g\.l<?n/Q8dpQp'IJ]SnYhQL6Bm!iipRNh`Cn*"#CV/g_nX?03e805A':[\;e96%N^H'OW
%gdqBh48?`-@0qm)2^ZfPI8<Ed<j&5T(;3Or%?0OAW?:+o;8'4@\ih2L^oqC&hIpqQbY:oJ\!WXD)4S$=>7F:^/4LYDiW)>e\!]ga
%&T+;[;]:!>/-[+n1M9X-_pIHh);25Rfe>=bQE_l2kGGfCWg=NC'26bi(#)a?jHQ*MXdaO:\p:F3*Z\p]*b:5,->;^1gc@G(WG@*'
%(nbJiNjU-cbtgEAo/4cg1J'K`:WemeR\.k6:o9V/b5b7B&oFP"QRjq99!h8g1K/=pno`(EMKPsPE^[l2Aq]#e`t%_5*E+dL6sD#j
%`,c]'XhQhGhT/shSp-V?VQBrcdfX'EH7Cp#G/GjgUNC2>;PF@Vl!c'Jn/=bF-$sGc8V)='UD,+A=$CY^PY5gP*GitnWT&)CoMeBP
%$@0V2ZJmmH\?7coG%I^k7r$amkI0)>g^]T0V0K+R`@2-/q*[fNAmX%Li>)AM@Xi!KLR^>c*iG8AXF,!;G*B=N[)P4,acnBga'qso
%`IXoRNM^OD]V,b*Y).4`&\HZ-!K="/F0G\WgUs5t?4Sc0U'[<WJ^ZMb70*VA2OZV;P[HXVDo7NNWPN')J8*au?E[9o)NRrnMaugd
%MHVo1-%#q9]SFm"gQAbu\34BYbB2Ph"&r>#Fj/R1jpl@P/S8jDh8:#G2D*j'XZL+5DOS$$Fl-ccDCt%)e_Y0F[11o..pm1sr./JL
%NFm+\jDE;j-@P58GE!6hFHF'm?H_!WD<euQGP:s#Q/B%<>9$\VlEK!urEaUThJTUn?t6C<mYhfACLW@P]A71dY'=`q2iZii9Bht7
%Y50<.EkeBT!O76rUOt3TqS;(@/]R>8_=qQ]0p\BA[ppBsW])hrS*e48Z_pnZQ4*O7O\jAU2PK!t7CsgGe#+a-21nZJGV2Ct:!\;2
%Zjpr0V'D:B\ktem4`j`OQkm2FYHVBjM?NhDJsK/'c=T)^TgtYFb3KPF1iN>N$<:<0d_`o=I[A1H9kDm.9.X;HYj#"l55COoU-l],
%jb@Kc@4XFo?K;pg<at<eeOt^IVA0cLnmd$??`]XI3#Hb4#k=f/7)o6(`.H(tPr&`1-J"_UbAN4![`$Xl;ju?6.#_l+Z+agX;QD]Y
%78iEQ'eF*S97`%[I#PpN0l%$iW(Z`,C91#Y[h^O/)59(OIoWqBrrEs+m(3*JPJ,U#QVP_ej"XSKl!0Zj5I<AV,`26Weqnbbjo7:h
%ROaB\</K#*`IDC>&_K3ZOiuq?>j%jteWj4'H_quSSPAdk)!Z?\q,gmIlHG0+A:4tX,<5f-d>Q'-fZW=u.m=@T&$l=K8R-YZZ:Z$V
%f;QTJF%f&>.`gSg\`B4oj9"D#I$C:[Ge#<9Jm<]%@jD$BbIR*.15o;,cFpK@'Nt:gOXo2;^<,(4kpM=8EG!G'8j@U_PLB7n>WQS>
%]Z?PK9H]HW.WbHP752*caZORi<NTb+LJe=;:,@VQLVTAuQSXBmFC'C\RaXY"+pE3Hb9@)uM#rF6oe5OR.!UsoX:mdJ<kl)nn&rOZ
%I8U\\Y=:^rVp0(]3=SDX)q]=L[2W95\B;ComI_JI(VT8b?5/<ohcgQlLiPMu<%YqcV2.H2r4021<>LPELV/P&?&QiI8kBB`j@5(u
%gbkD2Ui-JWYu=KA.d3UN-l(_[oYNsFE=<%k$FUt-iY!$Likf0M<?ZRj'ViU*Pp#_=\Ol'+*X_'J:j![fY_]'!b\,`;/S;*r6S@Q]
%36Q)YEaFd(PB/4qH`;[=K2Ac6^")1g`7&msT/DoDa!^BcjGNbQI;qpkjhr4Ro^"!:!2KJkY64<LT@Z&G'JODh&pDm+qYT/RPJ3Aq
%h`GN"pWa1+Y0JOpjRC:=<opWf??R(-iE"L<8C,+J::SqUI7<,M:juF3Cfbnhcg2Qo>QLt:pJsdLN-e&b5hG\,:*=N_,Yin&GpipW
%#1S#9FV(KULg>V*#YT8%2s9+Ujgg?2Uq'pNU&2jEq;f(/Y/<je@=U!;pNIta99#2`;7P0b&N5Yr*2aSo)U#m&e#_29=L:d1bE(;(
%VFbN36mH3J4BtPh3K>nuEnNIJD7n,u]A_U>eeQab?.UECo>MFrUU*`sEbtP&6X)iZ4`^CR\8J`aEM_[Kn4JYX/NAu9"^*)6Mf+=u
%%+aE#$?GhZTDtdTZ`?d&U2qVX>JMZ%5Mg;K`mp.9h`\!5qZ`!in)Kn4>,T?Xh4O-8V"1WfjY]^u!^[chaVNcqZ0<%:aW8%Q&;E??
%3e\ecBQ45r'6\YR;3>EU.4m830g2A'K'A0'"]H5d=,Ui"V%q-7!2E@r_F'Re;B9Z)i[X1MBO=#qo"/077W%gkBMKZu/:ep,7[FY6
%j^[1(4&"8RJ\$De9?4cqn^6\b5*5rCF'=-Xf#';3o-@Jd3?A.&1b!>JFRibR+[%WJ6`Ts1J:(V*PICPcjac3>$J#<EWfQD8Ita-E
%#:bJK_XnLff3_,"?!,i-Q!NrMaAPXoUsMk`e2h#hcW<Y5=$Y"Aou6^G.6X)lD^Q\fIHLfNVpWM8'iGn#.\UXb,VD*1hAeh)J;#%R
%0p);/XU<,&1l-!ekXgf=hf9]_qrm`jRST4jkgJF&>I^)@ZBU9Dgahrq%(#?_4]<a!3kLNEE65#XEdg3EFfFQ)nqi]uok7u'/\\.,
%hG#juhG<9to/60BA:5rbDniD#hk5Sp#o,o77bR$dgt]/%Gn96'2;We]e^hEW]`'>$dckcQIEeEj,7C^cNPe56/"W!JD^NVji+bB#
%L3]^h?^!KU8V;%1Vt^4ag,L5.;LqLj5aI@#L=EI&%X)n_;PF0nF7eUe&\e(/%^IMIh+.Y+%j%;XCNBlXFJShhp;iW&:Chd_]?T;W
%8+tq-l5*&p5sEA@lV?)r%<`D&)lb[aj=;&K$UMOXKkGV`#P%;@R(qLE[l<ne;sGfIjEUD4ZZ%orcFiZCXD7KjJ'El[:;H))QbE6k
%rV"pXa&dE?3kP&21K(4&HHh:1X/0NEhJi?sk'$I&#2@jMXg>?SanLsO=cjraj9RB],NRm3]YUiV]7fu.3V]^OgK:F*"clE:9q@kR
%kID@kgpt-[$8/O1N7PIkOo&dhh_f`VSK0"kV8RId-l*`aoN4/[PH&aE?t?t)isDVtq=!(UaaL8C]q(BC>>R'];p)YKAPDlq4Ptt%
%'Dm0(88iIV"6@Rr(@qdSfmGrP5JMP(Fi1-7gj8-Z=7feCh[Pn'Wtu9nlh,?[:]0a.IHOY^"$V$*rupba%=\6_s8!-fI1NP(H`m*g
%n([<:hDmFmqVeQ#m\7[?'[")Q3FCB.YU"A['&fP&ZOrZ@IbKJ\(joXD4N4W7*q@INTD*%SQ!,[i9@q,KTVq"rq7lHU?2/pXo(?Nd
%T;jpi""6c1[nd87[NfaUhHS$TGQ@`%^WMTm\;.i!RO75C!1lJDJqk=0$*_e>#2`q?9`q/#&.E!G:NW8_aV06m`1@+t3J`>239hDA
%#m"h/J_nt<SL&^0CR@$Z$GMFH7N\nNZ`Fd%XpTb#SX9KNa=eB4_q#eW#%61@ROU.J1^8];h#g7"gY.FVG0^2#'KUD`ihaIWH76EQ
%492HLm1fm/(8.cGoR3\4=,kIRi@AU\-T!6ocL\/R^'#K\$./e\l-'/J*ZZ)X6$?B`?N?!qm.HJl%.F?06:]d21e/UtMjK0P4B(1Z
%:Db,QI]?m,)db(XJid9ZJWTWs['Cn8E"3/Y&KlnT>%[rqcH/m<cptLKfC<EH`6aa+2?Th"`Y_<UgSHe<3VT40!Y3HqPJ:f=\PZr@
%6[0@\%Z7JK%V=!NjbaU+#(9+++<^3r1ZNmNNFBOWh$K&W$jH9,>@pS8MBU#=V%k%dD@F=^eh1LD=.kKdd(2PfW<5>Il%Z/VhCl)S
%GT4OS%gIS"D!+9e1p;!5&>&.;J;tDn\?%2tgaLD.RI"P<2dR(UGR!Y*k#afd(P#-$]$t"fl%Z6(j&5/d<SXmo.<O%N8sr2?qa,jZ
%AJc?IN`B\\*p0r3PugrhD*\.g>90+J?jYn*4:*IY0LR8OOVic+i>Um2`7<_+<+V1#KRnAWUL;),peW\q4OEm9.S$k=g$.OaE"R`O
%?&pW^MDG[8V:6Bcpi-eB7&Skkb_f#BjRN.pRJ,E\\VI$+'Jh3KZH1$"/&>E*Uf:).g0Of)BQP/?E(U^:W9V[N#M@NLO&uQO"1(hi
%r!"LtA6U>GeA6!.JRI:`V0ejkVgASh)eod*80?rQEuKfD\W<6sel_`fPo6&CNUs`--gO3GP=Q(CMp1:PK_BsV]J*6fK1m%A*uScu
%466mR0b3T$O&m[5$=Y5$BdhGY%8[1..++Rq!\'Sk?j0c]B4W#LL#PDm$5bNTid_G-V'Br%*?E"6A(>.aD2i&P3#GcP?EH"k(P2Y\
%:XHd\="I5NY\.<eG$o8[2;3bs<[oK,XUkh]St5qqDi@1Ik34b#SJX:!b]Nqci:;Pp1M0J1@6^cVaI#c@a!NW3dMRKD&1#oF,%m#9
%0F!2C[:2B-`dMWQ<l*FRp,+XX-C@n&U0u9s1^Oru7O&NGAe9[%:4-)Pj#VhcFM&!4Q*\gAqp6#r']aPB(`Ma<>P5";cu"jR;I_Cg
%Erm+J*/_Qo=aXV`-M)n++;"6t893p59f$#j\Z'kQ$g@#1DdiO1*,]G6f*,l-ni4s$5kR$GdP%heAasPHluaao*JqEIcS-i6e/Dl"
%#^!l39C5bVr^(Rj/!Y>q<6+aKWdRF:NI_,+Yfq#[>GDC?QBe=l)"h:s7eC)=K;G`<6.PLbc?n6oJco@.1(HQ$^sJH\AK20<[F5F3
%EJ"S[JC^T4<Y9Bn)UnR'%g6(%9#N`Qo2%.U-$*[dk+-1:JO["hP=H&F)3fD!lHj$nWQ91H8nLZu/6"Yf89@5,XtjVm`%i3]5$.8Y
%B3s!J-H\Z;Knpmm0N$rRBJ[4&V;6Z6i;r8c,DK#F9pGQ0RmQEQd"g$N=BtAsJ7rHZPSoHU(nJ%#`gJ=0"nF9[WU54g-e"4pniR.t
%9NIkWKfmSSI`OcN11[gDi3738co8"Eiq<e^ARgiWUHhhKX/\i02cilAdD?XhJ=fRY5fA:/&e'oe+>m3B;CaR+Cf?!Zp&E`#,="]8
%/!gBZ<M1"Z$Wiur[Muf][2VQ6]ABLkNc/YKrnr]r-S5KhBf9MH[LWEIi)".k<*<N6YR.mWTH=n":T8?:gS]X/d:3rG4r45TY:%%q
%gP>FVaNkddF&`lGBcJm>b!bCoFLiti?6gMqaI)AYj7=hN;7W\@G3YPjD[(Ka2Zl1g]WtkLR-UJT)W8"0_$LY^)/36Sc:RM1q.\rr
%8fAN>\4YB\[FDT-o2dX(=t=3ig/02]-?\9J7U,D?#gm1j@dlp9qDb>TO>O3)A\oB?5R$?Y70)(-pK@UoLT@gu31C?#CL%,9]b1lm
%Kd-9FdL[*!0u>ar'0nQkS==V""D3MH(35f`FNaobg`f?angMY$JdeQ6a;\/()$=Y3#kVM2lg0is3ri@N8phULmAst0"+`]Q.+KLj
%bMBDW]s9@ha(T4.=9thah$9Nk"D1CVZ19AaF-q'sj5R5eEFRE*i="%<)Fc&`FWkKP<Mjf!AFle;b</G,"9MG-;j)<T-#87)::FA_
%nm='abr3_?CW0+1--26dAHYIM!!*NrdHIY^Rg0Z:Lu's,"0,d8ZY_!*:iA4_mWpr\AB2iWB4\_;&'Bl;c/Lnhmcl;I4(^bYN".!Q
%<+dMe0fN!&A9NBqq"gp<+l)uX'l9#(!("fVV6Fi*g8UN=GC3Gegdq>d:!L6g&#<SXX7;iEWL&<dMkXj2=9B9g^,.2QlIk0+'-n0-
%HeFN`5Zl*MOpJMsp%I+pED;kbfcjHnf8n[R<DeE\jtLjOR5D`sDj"9H`^8dP+OGfm/Y0>/lO66?llDj/2N+'gO@?<Y3<<0GFfY.L
%(*hT;^[l`t`jmQV1lh^>NI"GoMg:!(5eB:66XW1BZ&P,V5[[.E[;N$9lCfiT/V@XH$+<[nB)LWCY^`@lbjU*4R!GA:?L+*r^j"?(
%,>D043`b3+W6j:og(m:D2BUK<JBg,Y,-XB)._7:d`rO\j%k?Cm/6@0W3]cjZ,dq\L.g^k#%9^3oo+`4A(!a;Z>P6NGkU9=!"W<u.
%Y$dDe]T=5$0iqAl7<?eP3rm)bn;0KR^r#`MX>,(9JphF?*a]SSR*f[`eDnq9p(ZH7l"lUD0<@uY;T>(o7iB*.5>l_[0*]56$cR)Y
%1BS&/P1nQrqCn*0dFfml!M1.+lnLo$2nq#g9*R;Os5p8,$3kkq<\UDf<9P9#0%Jn@jm[C:lj9^PBM];K]pRJnpc;9caDPSp9dYl3
%,XQ*d^.QW(B^$[&.bmJbD#g(g)NbLSgg&F01Z+sMXYQ6P27\cQqTQS+U'*3ZZ/NsAN,ZPNQX6V8C&nc2AKDhEHaCP>[;"Z!-&B+A
%[s?JqWGUWhpElHudblH#al3k>UO<@7k\mbr$Is#n)ak)]M+ge(kQ;'m^:<i2e%:%+p[qT,T.(=4StEL0TJqTq$/>W-YD@2Hf*IN@
%F2E_NN!]\j%f@F0!mVTu&p-)6CQ.c3%c!h:iE;DBG]pn:4S-#t+f,G)aK"170\J_:491%]#(k3RN=QR/dcV*kW;@bn[e^FbCXN(u
%?Lg&f/SL.Q`:rONYX5e.[0&aS^qW_0#&2u1(7*&GrL_S\l:F7+&:l-K>&IT>1&sRp*$OL20'=?%_^Y&)iP*C@ETt+E0Im9\7l`:T
%cU;NCOU\=4-4"i\!"_[@rKdX<H.j`%cn]!m3^^&N%+n3#rPa.>Tb+U%OQP"`6D-!s;S#>p!<GLHfDacE%i#1_Dk/dAdKiB%0*AOQ
%0nd-d\Q8m!1&,-Lm:e%B8foJs6`iTjVtNE$&V5@uBj9*J"W1m(6Iu>cn]kFU=Z6b3_/fo"J2PF?TOEjXEh7LiN!sN[9W5'B4A@pB
%TZTmXT&PBS);mK'?;f:F)+[MK#!1o^fXQ<=E$^8$ATh1p"e]A'"g<>!rUS%E"fNJL!XBZsF#&pZ/@A[cmK5a_A>]2AK/!KWjI7q,
%cqkWL^r@Gs*DSg$OoGdnoTUg0G*rrHBc7#8Xc'spUg+(kE**dm!:\bZ!o<@D$MU6Y-T6Z%+mps-Q8qH^:?S.;mt+]\)Y^ef%'sWV
%N4ImVMJg.+qohf4!`iW/a9+Rqba$Wt?<(,?1"Vfd_$n:A[3-Xe"X>2P(P&^uAZ>R@YS@=\qgkXP-a-:849jBR)]Rr(!^q5NG<sk(
%_dQnEQ[N0j#%o2ThE(pB/hX-P6+\*rL+Z#^o4E.L-@.OAR64r=kNaODV$l9&X,>]k,1'!`Yje&U4E>lOeiJ\_8hmhRQ]<mMJs$(g
%@?^s^5g5jc7lA9r&.\&.i&)10o,N*k@fS$Y:u53H)br)3mNleJR^jUB0kjetK&qOSb_Y8C)[8tmPWjnV6(l\D:mRMYLs'+TqAqB@
%V26GT?IThZq%.Xk%Hs="(a#YAdKNgE"+W)%3bKut&EZTURbYsji'd<u\#Hd?Z;9GD#R!;d;=\q-ZWTQ<gBDFFKFUiI9GSAe]`8<V
%E@%qakpQ\9nj7UGC+k=nldHis;Zun_W?rH5EqLid*9CPkeh3BX34)(io*@tl?sV>XdOW.1F'r/E8R?/l68oEg^qTOP2o]u_ap0]<
%N%Dd_nPU/ck$%&cM#$PhI)^nl+D(bJZQ@kqaep>kW:CKS:o]G4UYs1D2H:Hgn??Y\U$nW_V_45MTP[P@(VipmJcMmpc9-Dn^m#.T
%1^nNWkk7:[^l=8rp3Kb>K!rd)dS2E'!*0m\_`9eYG_R7_eeOWWqhAZ-Wf6%o3LF9>gK$VaH*%F,kQJURofMG9*Wr`C:d$:'DumUB
%R009r+gAnD+6+1n_'LJSnGL6'%WI:las'n^)WR.4q-bie0bgH:1?N$O#%4CTA0,X`;h^RG1(Bn'7cI+V7^9`i*WVc$U>UqV@`C/+
%+UXiAdb%X4#<:p?5gZ`MQ+KHs0p'd!qh@?H*N&Y31=DR-<bBM=6QV264RQsTSkpkf./cG,<Jn1@q3ijs8*6b^.!OA^c_XJIR0&"4
%VFhjN$o`L1\D+""RuiE(\fhKLC6=k)<&--\FR:%9<Pq-N6DbaM<X@RjUZqpi?)Ir!dT,\Wl\L+T+F#A)!C:&s-I!)5R$;cQ&gIQn
%q@::k$r%!3k4T'3nk)!0kpUq]XG_1M_pCBs)i.Yh@PC[&P%7lfmic]Q,TDtuV'`,qgs\@c*9O>e`ftPa*@lh`"ErYlZc]e9d.ca8
%.;F_[&5^:N1fbomGY!pV@?jg15fj@"Perj9aD1p2C6$45S?shge+m"7i?=t77t>8F1KmI5@3@+pp7Vm<@W80DB<&Y.''WtJ.)Cak
%TlEi*f/+<_IBFSCXUfZZK4#6j&CEDH!hJTBUle`1J]7dWFPJSaYIGX(J@R.!fJ5;+NtBSD84C7'BcC<=[T*Hn6]lpgM"cfi`VUS\
%3Y@l+h9rX"EI]<SKesQd)I\mT.#Nhj:l?"/9R9O":3g!egp"p]d_N=^F0e4%F!K!YZ='3`mphk&'0cO+V<9&n;sY>Wht@?>Kis@#
%[!200H7ot1C-[g;<F#oc16*1##;rDo<e:U0&RNt\WY0KiY)X,?\r<?SD2qJYWmVR>2*PIt=XhBge>:;,KU98QI)[XFKjl^2;o(_;
%4"+jH#Y#"42\lH8T2Em%,,P[RC`4Ut_Gtm"d$RG\7$ef7+^KWW6&=7blF'd3.K@COBXEo\c8J]L1P?Cl-saJ##Ro!JCm#4cB_)n-
%=>9o1MkldjL:@DDV?DNQF,FY%fgCIMUIpedV.">Z[U9\@S\k_ef1k_P5?"7K>hK49Fp=,3'7$Ka!"E$,:eHKnFZh%?&7E%d9M.L0
%#TAse3H?5HL/Q]-RE6MK5a>9r_3f;^5Uk/K-F2_7`[aurc9QF*M&;0J;"Bco%o?5fJJ\D!eg]Z!aB^8?Ws]^u^c#.#/GcDNrL(12
%(kuZG-07N$+p]I`-mPn%ET)$Fd6]S7TkY^2as-uGaQDPmj.J^r2HR=a8\`X%<sFjY(K6%]K97$,Sl:?\kZ,&JMBe@^&oX1`!ESP]
%,&uJLLmW2d6s;:8@P"ZYDF3&-"1)1aS8V$U.j<sNS[8b*fWnH<)8u?))6g[>iC&hQ]Wj1MbS!9oL:38:fU;hN_8]>nP@=Q<\.Y#r
%c`*S>JrDZ"/B4V!Wm4KpB[V[kFoZkG&1rWJH#CQ`8"b\=LQ5'o"."r3%]HeQV)'_QS-VUs$K^uHl"1c%Xk!)@]:]uhm?:[&AWm2"
%<1aGV[knO8iE9m,OS9(`?)`5`O%(PNfG8KUIDeBB#Q-Pl*iB?`9MHf<#m3Q^PTb'DJ:NV3IASGSN$0U;A0QDRirp6QQF4GW:+,Er
%@QOa8ns]hiBM8Tg;3pHA"CPfr1D<sqJ>(IuPXefkAn/_0UeNtNdI)R5eH(O`4a;o>-jI$e%<L#u<G#VtWa(gT]%"HN09[g24M0*U
%SK`hMQ1VnGR1m2mqHt8l,m]s^WKJ[0DEnk1F`UQK!@U\m<EKBV#B!c2K%,cDXX]kJ5$<9ZM8p%s-A`#2ik^KA%`$*M?KA*q!nN&5
%RtM*BZ`;K6.qfm*dibXl!a1"L^)A`e=js'F`))q>BWP]tEq.*((Fh&2P+ACi(7"Ye>WgB;a@o;ZRlhn99u(`!'a%0&PN\6$Q)^i"
%OjTR9&.-uu9F*PAOEaQS8#\$[#+1e`2Na99+-[u:H.:(s@g/:gMpsLmT_KKuonu0IYb@:OW;-t>kZ#?AWsGqGZ:YGZ<*4fTOk-!k
%#A5[3PU`q3V(m>:$`kf,k-[MuJZAbtl4LtB7edP?\j`PrF\[lF9W&3>DQ>0Y:lS;;m=YdU2NbR2M.n_!'P=./h%ASfcIAa,)YF25
%d6%n5@_,NB?U8WIPeYlC2B!"&1.fuK%>C7IY$.PT+l)],07?)nTf\k;GR55S!"*WOL)dPEFj_6&4&Q]Tq@jk<$J0udhlp[(3]OoT
%8?1\`RoZq79US<P#'2S6l8-8W1,BN_W\P<sW"6+p86_&[b1bIWfas[aNZm4nlPnEICG]):mKoc&!ZYQ8,&0s!*3Ln-"ZufTRlaKM
%0Ggh?NCh]s1bNmgJX70\'QW6qNPRPiCVnSX]idGB5)EL'JOO(/S]JEYa!Q@#m8Un.M4d=GE:9P+_1>Md.antM*akY*.Gi5@42PcM
%WuMk)F_5GJB5rqsZh$]j#mPK3.ME(3FQm$2AM4t=``a^Y?A_MtL,tdD:/+Xe2brIoD$sn>ap!A11@^5$,=Pi`qKaH:8,u+O<R6/#
%WEWMJ3Pc7d$_PJ5$X.?@%u].^2NR/N*AQt$_17):2.pZ/g/E](hS7DUoCZ;(F,W*bgM"*OPVECN$R1<tNJUh$>'7aEDK0_'L9a^*
%d_#ppGVDPg@26;o\-.X9=Me2M\cI2D%"^2V]EpJ0lp5MENBRnF22)$%"VbQZG'B.<H625^JDQ6W^d\gqMXhVT,b:UMfI&<#hWXpF
%g>+JOGA\-)U*`P,EmP_EJEIgm9suV`fXt"j(^LRN/;T3A#nf)#UDT$_FD=UQ/3#&Z%P_b[8YXq/2QP5&$o/7cglD[UBUGI7FX<bH
%J37"&*?%A/GSI6Dcu=uhM%p@_d*d$Fj^j#d$=2=d%A$LkA?(lL:F]$Q`Mfs`E407tV3,$3KrX>kCbY$MqjIdbl9[0,R7.39cI?Q-
%Mb2KqhU*[M3gAs3&uX"`K-Jk@'GXXu+])!Rhu*^.1&<S\p,@\[]o[E$FT@'%a>?+U'_M[LS*Jk!JCL57e88)sTaJU^lq6>W(o$Ur
%*J9.kRE%G+5il^cm]tN]M@GuY(.CJgr7m!Z(.qMkO9.CLKYY+R75\oNV2D:OLZfLlYi&iQV+NjL9rW+\I%9%h#q_9-mJb8V"Z+=p
%!O0^kh%+0NX"p>F4%uGG]T4s%VhlJu(/dCP/C0H/,_DQWR`^eP!:1q&#"5(h-/LdYm5NRcQI"uBil0/&AL;hMoV"->>KB_j:NCr.
%,l&KdLCg8`G\F<_imc6%8-Ql$e&I]Pco=tlF,RObQnuT+<GiiY"PV=f:_:Kb:!"s)?%tUaL$-I:]]KJ2^UI/G/@3EfaFQ+h;h.rP
%&^b=Zg9WIL,%,m>!3&RsjD"!+Alkt\%Sqq?Qmqnu-<$^skNmtiMM.AAcVqfm5_J1u\t,:K*E*Ee88Z_=oW@-6:`5g<1&rse!Kgha
%9d>Yh4GlN[0Qf86Bm9amMrfI?-k<CPX;^d3e'lI";V4rR1DRm?@?+N^-:.^:Y''QZRnaDc=jam9!8k.+,U)UU#)bEUYF6"QIu)YQ
%aGj=e9eZXm/3&GfRms%4=I5rVG3'De\H<$\*qb"@+jmhX-Ph5s)^*jPQ1Q4Sr[UW!BJB,69P!dV(gI[UamN\6&!:@j)b\0&B?DP7
%7qEB!=BFiGSh?V3"q/DpX!rmi!,O39/1((A/l38hPt5^Bk>i$^j8Y+'Ib8ZJK%_2=ai`/6%97cs)$-5FA![g(lB\V"@aSRIT^i@N
%!)h0Y+:aH`1A`.44([=1o9@:8cl9HPMFGbdb6:8mFs.:6^EbN<J5d09hXlto;k$3b(s5`>9r*dVg?;1qlp^9.1FGYN/Rr;>-.Lt*
%NH<WDeQ%[VZ4MUfq@Hp0[:iUA*,d[c)hCc]'lkU9QV[crK:B#F$6.$qHY)%O[br+HkS3P&,(_.#"HCkZP75[X,'+p&$jBWa@X+\_
%1e!8FN)H9K4-afK'18ur=b]?X$*cmuEfL-i.Qja=?",D]-Fb>r&smUh4,IS4'F[KfLA%F'^`Fj0`[&#+X<CLC,DI(E(%8-c1C,H[
%SXX"IV[-?m9a!WPTP+rQ8"O%fLPX`[Yu_]pf(oL8PI]1XN_9r7`p=s65_0lDF$`ti5;&>dLGAp=QlJNU*FW+C#`ijIag"9B=f<2f
%4+`!kG@KtK_Ln8HN=o!(d/[#N&;Uo>SQS&LK].1j9\r?N3aj-C9F*/n9X6-eJer^g('*!@(pdr/<CXm6D;slYNe?h\)Ug].PRs3>
%hOLqbBFHYN@;'t7Ag*/fgRN!C(TZ^%_k=Z<K,"[o='K,qk<Vt[C/(N>3sU<\aLr:B(^<hWA#:/QLm]"E>U5ukb_jK2&5L]pn1rI(
%PJ"?HdV070FY1b#Ybe;2jV-.Hf!R?P9Ip\W3cC=\ATK$-ad'>+#'7jXp3*lY]&^^k(1=Nn-kf0I"r%,E)BoI$(17hJdDq+]@Q9TJ
%W?>Ti9`inO>>+RqTr"Hs2T!8OD@#E=(cAaT1,4(]fU-_.bH)6"ilX8S([5np[(/:.c2?tIc=7s/]#8^D;K&FC.1e2bHsDOh>8MZ$
%C[=E^`g6@6/-f[H<iT]P)@384=+p>M03beC1j9R@0nY9U'1%-Y6d:=e3N*RrMRRK'I3F\I\J#C6)F=jmp\8[,VN)OW$nRpG:&<Sa
%H_"/oM!KX(<4XBpP,FVYENl(4bp-K#:!/-2:*i\,4Ag5R/<B't/[8J;4-lLB=?Nou@7atUUiWS0U#o)lk\J-VPHZQCa'*$mAZHS@
%6l`OK]lJ!NSq)1-\f8&!RUf3,1Dg<4FDNrB6kC1B9dll$HNlBoS4i,9L-\JEUr+st7Pj-s_ep;__tfVR=9LN[S#P0LLMSYNY7F#C
%Q.-mf8s3M<7j:(!D2>!a,Hu8j)SepG#_ZpDn[V3+aS3)7XgUngKNDK\JhkU^5pS/c4g/sP?pIiqMQ7E/QDH*7`<[/r>tbr%+;XYD
%@OANl&/J$_lEWG!fp#qZlE!qLVNMq:&/0:DjcbZnUF:P]k7%7G3Sh5X_qHeX\nE\@+6in8-_)qQo94`*D@N'^5p-mu22=hX:-A?@
%&W!u?%$WjS"=A`4i=i9eEPBgPe)X]88Y-VB=.S.ud@k:`hY>CVC9*T"[H<4PL=Cg_qg^P2)Lms(&*+=+<`a?"LbKaHVQ?NW&GSN0
%[#>!9U!ZT!F4C>sNEg6n@aZhcXu-b`<j;WTh8kh6.\)ELHIO]GqVV_*q)/P=`j=2S\B$qK<__9kTu*4'OY!bRQ&5r>)2[q,'PN_;
%Z#c4^M/)-P9&m9-"8#W8O8p:o:^/8(&Otlh.[80M;\P9o!U<W$T\qE/fTRmL"BJR%6%M=cd`H=PdAX-eZ,PYo?l/rW9rV*_Q&44]
%20kTt7UThn4*3lRg$:q<d`'QLR]9\PMQpVfI3/n?16Q*9+;%A><Zj>eP"t,R9k#`qSZ%+QVG8JkfBP5l=A35VN'WOm,LaM4%0E7o
%Kd/uF\2m]a.OI#gGgU)%l^fQAG_utg,Q`XSUP;]Pd%;)<7n@4tq?f6X;.n=)Ku'@Y=Y&]Qb_";L?`OR_q,2ER/BT*eX"L=t$Ni(5
%JukiH8(/'3Q&[G.BVAX5]L[0eLQtnhLOrm'*$scm#[3.U@L,:7Pe^<L!l7u\^='!f=Ig40##<F&_+CWlW*-Zt\7r)@0R1eigCb3t
%ot$Z]k!.e'_53Y;&D]JLp7gQf=ja,S(K2*)+rR*lR]]qq1EjSD4J3s$`6ffbnSQV$WJ@Jb;!CI\#j.M"`]GO:\H!D)QP:r"gL+qN
%!i=U1BJ^FP"KG(+/I@,-Aj[a2\m_KMk!8"]Kf\@.1^33rJJ07:K2rNeNh)akSAm47QE1,jej;W29b:p9R]b+Q(FF3Z$7HBU#0(ME
%CP]^/ik1Ak<9g!uGX`f%;g"st@NT'&"X`mG+d+lU+6X!&>#rq#mdrR38tVCug0@656Tjsr&ppWP0kcM$Lor%gAk>[*:AEnWAqjqZ
%nPt\;4A/H7@*"kcR;kI6K[MG;!J`gOb>K.?o(3&PY_)hHJcM"W<9Q_*Tfg'#Nl3:NS48Tg:aH1LB1&MJOSY?+o6EP/ZeZY''#r,"
%R?A"++]%NnB'!XiP,?]E$;IdC>U:4rrZu/YZS>/?JN6"2%tFprLG=`'KmSmq!]27="!;T(QZLSB;#Z(:&dDsN1h&6>Mss2[8gT%s
%Wn(]K0@ft%$mFgeNcd[S>E=Fif`5#K(NDd==A'd%T#nh2>YF!t#>s9=J\gY/BP\T<5rj0*oCW[$<un?_V*(U&RP!lY<l7nP"B6b)
%R2K#DYAb&We/_N4&VQs^$X._3`<4,;n7_$YdbbCP9!7:63KjRg/0BcJMLpe=BZ^PuWsR5&Ccmc\d=Nm*rHUEf`t7H;!I+_\$XO1k
%(HMgNYDkDH,kn>B6dD9-)OqK_A6'd$k;b7NY!c1L97G8\fq+L=ATenX*UAkD5!`(+D"&$hA>&a%j/\E,Vq-Q6YG6B0WD\m\8`cFc
%C2K9IeX^sn:lpq)/:<sf1S+*lWY;3kTZ%,>>W(_GU"&qN>QW_0R?F"_Q`@qLqWL:MHA3aA>kWkj#s.!A%%R-L-XB=5d,bS!;&,!s
%5aRfE&?RF)<!9!YZZ(50KU+ZSGR,>+6Y:_Ld%`3[Ue#-2=+j6P&QN[7>UbY'Z325+d3t,k.09RIcoInE-$\WD:j#%@_gEl813k<;
%TTc*C)+0S^N[I/+b$DAt!eK?0Nk-!8W/\\a\VA/)"BAAmZXjF110J+E[MV,;\fQ$pM$L2YI4cdNZh,05d,U\XM$9g<!PC1!#>aS:
%S-j/U0e_U$H%&dF,:S5!j1O$U#cu8%("CWh7i"sT<+aeD9i7@W+]q?.Oe]K?N2r&qOk/Jk`&/A6*h6uf[[?kp%WD2Ac?2Hl:.W#/
%0V=[=-]Ouuc6sn:&Q^+(;*o*ck?6g.O-r*5YB"b%<-%=>7YXm3P<HXV%n#_jL06!lk?Z.JI2MCS0W*.F/hX9OeOfKHBGp9q,/&XQ
%AsTLhgK_[^AXsF;dNhA%\Kcd$f$KjG[jY<I1Z9;Gi-,A;a&aP^p`</097mHY!Ehob9A>O.RfjbaV*V9[b5=CAQr!+C\P5Z@^<]H+
%(PQIJ'OE"?"\X-`]P02Xj3")oTMM:uU'OXX:9BM`4sAP=]IdD+-G:)):(q9AGHh,m=@Y-i9s-jc?A6DI$tD/h"N<4'Tn1]u:W];(
%((FPlHD$h(jG1=o&`R8))Ec>'^F[k#M;WEt=pYP#/5-Q/Rea/We0JP"k,K2W':2HM7QMQGI>]O3HLr50MP(RGbkq]f_RG2H.a='3
%OhjHE5\G_Gdq!JW$8o73#B_0-dh"4&.jcL:h,50P$;-;]&-ojIKfQJ-AdUD!Z".J2alIG$h1<TfJSa+W2C%HlQO8dnC9;9JfBZQr
%c-D[fmqC7O%n=L&,4M=bqQu>c@Z"C$@&rBF/MEph5u:2E;N&k?4g1+/[@[:^T2'Ug3Rnc]htSJ:nu&+uW:#(DBs($'$W;`/JlDG5
%96h5n<a^MFhbs4<9jWbQ2%26q0pTEoDr$[H5N8Z8qpE^&<*u$.]bK.)W!P&0jJ6FQ`<P,>!UB`8KTGD*ft!5JhI*npm5f]Y@3`J'
%O*"nXp)(f7;:kUt8N\a@<oFfe!%GLW;u@#eOV&Z,>WJ$;E\a'+[$Z\ZQ(F3i"eJkYN%:N``d-.TaFDBscU@C-W2O4+L>`0P8!4OL
%LFVde`N&PaD/<]Rd;B@40K^(rTGbaK/0kLKaX?5P#E5e3:kUn%Q()e:-dHI%1dLjXS3G6e--140]lq#`UG$+J;[O]\N:F=^k6`Yc
%1RE9tiP25]df*"=0S2-uVLR4b>:bOmm9*#+_PaC>aJ#3%j%<u@[rOA?JB7,[L++*Lh;I@"/DDM))9nXI0Ve=-pF$qTcg/ktd3SOo
%'R&T"@`d.J&R=q'A9oFH9g2XliS,&(9ke+62Q![cYhOoGH^YRl/j]3[*TPZ6/,85%9VXTh,)^9;&l(poMn[#AcBDu.XQg"8[YQ%P
%QUmO7eW$'/d863?;`EeJIKt&sF.5=?Bk,1PZNQMm;b@_^i`hc>1!db_>iF(+-u/L>k&sX7&le:*.kQ&uZM$tDHL*8tc+T&hL=NhV
%>,6i?fs%f"fbt.5Tq#^@_5Qr\FP)f7_98p32JjuG!<<=ip"RR!99buQY`5)p;dTmXp`RB$*CE'I38[l7eXIV!r"_]-M!*%!M!ALU
%[jdhQ4ZQU;'_*lD#]+M:"HLMlb4u%ZH#Q*H>=nQ_]o8*bRl%;/jN/1k#]05Y_NPI"[)pZQk5d7F>4Ra2+!,)3Pl(StI.O_H5`f&F
%#@+\e&UpkpVa"QA\IOX3fYb/@$F3TfP26#^%1HM)A<L=m6RCnt(APlTcTm@VMgl.r\dPf5k"PAoO;n;oX;WIi=!XFDhJGn2V%S&#
%YDXPM=<&<+VI<A0BFlH01g=6.n+;Qs*7#:,-_oi=%Y.+NM4KTg&=[04'T?3,e9Y4f?J+MePU&MP"qtU()9Qrk"=+fMR6"/-qm$6/
%Kea]g76<YVnUr)CmOJ=85lo:b0>N5A48#]_H4k5VXF_u)nPu.D'0Xg;JA>G3:J(,'1pFko3en]K&";sNVmVh49Ge#GEiX(&V[*)k
%F#ur>c3#,EM2jfi8ZH\S\6>di]mN9i*gPDhS[IrblZK'G?Wf@\am1+u'ulS<W\<))!I_^O,R:(a='NdNUbR6%V?BI84lT>9<F\//
%LtC0XGn\<TdECG$>65=+XfUq6mN4QePnu70Bp(BGlq(Fe.m*s0?+mZ@$;_eH7u"h9Ilmq&e%^9:.gC;#Sjo/3*rDOkK<&ZBC"/p8
%N"r@ed*jk\n:fiIr]1&ZAk"1C+'YC\Y_">-Sp#X0SRgR"h:l=`F6ieg5?Y'^[We#IRqoCL8sRTBj:c+V=?V//r]!$JekGB4?C'i4
%V$UCsHE@4VJXPT9Fcg(NRA9Zq4GF]66F-<RZBFjb4*dX0<M]KbW-T((O/.sQm@mFr='G,fESnn%PI7sfJ.'J=5OH6l`>O#.G\bGa
%8h3JefE#pL8`6`6-Ld7Q2LDW+nRhFR_%`3b79p=A\tD!]o%h8XW4o[l8[io\;`m.>X2LTA>se5Z;FEMPE8(jrJ62t^BJ*LWYW:"m
%;/C0<bM>8?:[,m$`Bf#S!sP8D8?!MP:*1NU;IR,HC9d!>UG\0*c\#7[.e:d.-p*V*iGqiqmTJ4'Z^VK5);#qq5#u..<bG<TS!W'$
%RN+9C_.23tq'dN(,P9*M(@qdSfmGrP5JMPHi$9f#DdX<`;DIb#iYqfGs69:,ZSdQ$rqYR<<.r?UPPO;8FP4:@4J+7ph"50=^E$'%
%/nWFrPH,M+1MQ]1Z+)d]'tp[@;=FJp'DT5noM4j-i^e"WHZ*RT/ZC2Z34YEXDnLX@De[?RG!4gCid-'&,BCd92Xfi_fD"I4DD,2<
%LG(!tZUGi[[:1*pD')I7B=!NQh;70.Zh]'WK*gS*cXE+0S(^c@iqQ:;.$@`&1k#WagG+=O9p&WKY8jJGY,V_S$at#7mKq<Tp@n;/
%5.`Z2i+JBq2/qfDZ_.'86o4A\H'ZjmjSE"#mQ8>[4W\E,s8DjkNf/lmcKV<P5m3OegA0(enBd`t!7u#4q:jaEg\*(>:NgKu>s7Um
%;>ZE$HMK^-iN[?,g.2#.N>D;D/f2.3>dh8W_p+p7p#keKEoc%>/n0mH+3-Mgd/9j;3P3gNrnY<Mp%C!Yg7b-*^^YburI)&%FYR1X
%HKY'ao>Qc3qQ'>k%VWQV;0Mjbk[O"/q"iD)o'0\!hqK+.,aq\t3?J&hLFK5^>.".Crio8k:kKNfIXM]eIP??0pHH7_:@EEaI>/iP
%FgdW<7G?`"fm<?Zm-sOaEI!8>iad35g)&QLe2!Nf\-[fV:sY/uc2676HaKB7]mTe5%XHc9ZC7>l*jo7cSF4.kTKb's0;UD_)9lR]
%MtpoZWqQP<a^Y3fHF<g%n!r!m)TpS%?=u\^?4g@q*\>D""P"O2rF(bYc)^MFZ<V;gf&1!u5JLVVp()^.Zq!q40S6+`&]=$smiTMf
%0gEFEX`obtIIgYe#[HUQRQ*\Hk=rh`BN_h3DuPj:2)d_s`6B8<^j8?=%q?FV\*VrM@Po2+0V.)c5Q?5(T`1Q$'&5;Ba7S^:qf2\/
%Y5c\Cs3%>?bGS^&:VX`gs-M"0s$*;HQKi*nZ\.KQ;kUkDZh;'DU\t_^QoFN'rS?B1Ljr3\FT87PItOZ/W#"oN^7:_>VI80Sr!mJ4
%78`$4Puuh2Ps%0=2onA]s+BKjCbYY;3#p]C-eJCrkH!J&PL[i<o\a8CDUWgiB@"Bk5+9]u@#)!U%S`h3f5@3S-gMR.`Q+$Pl\bin
%2i!/NS5,a3%q/59=,4r0[mV2um/,,#XeolUPJ#NfGOjk`EORVA3d00<pOENeIm7:IdC=hS`T#Qc9b=4abDY'8CFnY`2:4MRb[!a2
%?AQqjk9BU!FI@CPoI8erY<;`,P)''590*MI$sr:.!"DL_9VS9uH$G:;?m1hOr\K46nZN[Rs&\D000rLk'hZ#pWSEkO=Q<9<<*b#E
%7f3YXjmd@H?ThUE0/q"l^?U\*B7&-^"N@&k@m+2b]ol-qdXdN50u(FB0!8ebK8TN0pgO$\P6^D*i'4#FI`-:'liJU7Rld^F=nC1s
%j9!_&QY3Nd>OVC!%Ac-]B63<5hSSo?-RY+aojZVBdrM^bXJ\j5B2%IBDYl3&XkUHPFF2V+3gr6>:8cpq:?L_tbLo+XWc?ES?HqUC
%(,Neu?h3tFH+YbTr("*]._?oWIU;.8k>pOrmc44r'D+c>gOEQ3_7)@EKhn[:Ip'TJ)Eg-A]CZd;fA'@gX31j$r_;B_baM&F`DuBS
%MokeSa%b]dI(>_&[kJfES+#@;d=p&^==jKO9T'b0du-3s,\cngFLghFYOfm,AXhF;]sqCWR/>QOH$3iP,&1jbAQ^l6o/3?fF1%^C
%e!mMolKhuZrT"-oR`qS"8*8*!>YWNC.p6eRXQA3#X@F:ALC;`%SK7O[7Jj9NYQ&lsSPPT9=1pgLQEu&nk%g@E:IXp4R(IHZkBHaj
%8o``G]7p,tUbFq7eGk\?jDT/X-56CEB)Ad$mIbVkW%7n;,oHSr'dl*Hi+C4_D.T`2hpe1c=PjSL.6g4GP+&$F:D1HEj,a>-iEn6f
%:3A#\_t9f*E)HB^^aI_MlgJ^,)OpWjiTho4rRY3>I(/a@9]YaA4NTt)3MH6LkZ=F%nh;+II>r^5rq7KX=FgO3F8=W4RY%aCM,W%*
%imp1%c4Fo3Q&1Z^T6WLrTV`pY)G_0cWbjdF!iPV_UZo].3%am3,"A]Ald5`Z%$NMn1`7mQo(GG4RS-#4Bn!I\4JO!;OF4LWjp+4p
%3hcBU_.1$IHisfu#_\Q^O/7)9BkGWch1TDH11S"FAZ/4lS5PEY.;>#\rMH-PdJZ<I#7DtH@t]Q,BO\HoFQ:P2ktm/1?jE1bZfD33
%r#AgDK(/H>dr.IBraRPS58Ze'1n&d)]_YR"WRf(JJ]Ku(h`e/#W`\XNT?Y'fcec"!Up$Q4g%?Ya*_k3>!Ui34<WKE5r%m;`#j@tj
%"'BlYqtKZoB<<7Mf@O)'KX@=[e]<C)'N5$o&J9A:pPDIL]('$DHoYQ(]j+gG5p]fA?gVbn>:nb6e)"#6S^<5GRcOX1WqZ=2oqM2"
%Z2upJq^67EhSUet7gr@7^j!G9Oa)*]E8.:Kan!)g[^]EjJLc7US8L]Cs*B(s?%#ZDB`Df,,&'TVp!mS5SY*TI7^M^C8hIo(TD68<
%okpj"g?BR2VEMGonT&r)kf@5^]X<D\%a,rk4ksJZnbHuaGriR)X^B%M(8REf"WZn)p#PqUpL%uP'XC#lV("W1POnAu*F2QJZOL,E
%/_44[jC5P1=O<<n^R?/L9^Qj;mSZ:l@]+SOlh/-9@LL.6]rT6iCl?j1o(lgYcq;#n2Ka.a=J&nNSk^mZ:9UfR<q1X0\05OOrT/.<
%p6JHOIu0\Kk3'115n#M]o[Dhf$KNusB)Pup!V8Le6h`<g.]M[e42q>Dr:XrS>%a^O>f%6FQ9S_PE7K<5aLa@^53k?f%^Mn`]_fS\
%h(1]+qIG%5h*PB24]b6f$]pr]aRE573(eK%E1W!@I+heeiH8)bZ]!KOX:FMprr?5P%dS)t"4el(G0k-<:,&<$VAF`LXC2p80$Yd[
%a?itmeF%&\P;lk))n"Csh`m\4ho&%>GK6[TgZd=Eb1iBXVDhl#8a_0&LpOBhc.9Ho\%hlhH9SsT9\ABLG?WFikeY9l-Sa%LVT(un
%rh3$c_q+I8aHj=fDoUfjR=#2jngUnuX)i?(&n1lK&(Dn;;B'F8pD\=U@&CP<noX?3GolP5pq`_X-\>RkR>K2.pOr_l[:h[n0lFI=
%b1_L2p'6Pj4k"f5!E4C[,q@(tL,iJ`SmJUuX5g7]jjDcSC;%.DYh!]eF&p=\UqoYq&%`:#S=O.6,L9DsZe:9$m.h#XG8lc0(uKW-
%l)WZS8P4A8m-^G9Q?KWlrN+b3h5skOfJYnBMA-J5[(T]$0:m?u[>F-WH$$SV2p/q&^m2(Ug9p&<d:2qL8GeGQ03(HSYNZRPG5G[@
%)>Vo0cC5aOY_O:0e^_XlWuE"Kbu]8T(E0DAV+J)C:%EX[q=8312ZK@<^oF<q2`3Vu_7QW&cfXPgo8@.Y[NWLWX6ZZA[W:-?<_!s1
%"Ep]bdi%T*rGC]GkEA;"g!T'nbaufOL.2t>MO_e7PLFUlY/"M8/uK#*gtE0*p3aI*@#o$.Ip="2-mICaTq8L'`T$0!Z"JI6@^U+Y
%W5\T*@8`tDiscrTH+nsr\=T>[jV63Z17t$K]r0PCI/3+aALY)i%mM*,mZ!!8YZL&ggbBSSm:s1V2RE?]CrZuGb#H8l3*B^QpV*([
%4oTJF5$].X^&WLj\nfSV+iidjb\C?3D`hgC^/4VlRaH5fGB0puZqJt\:YVpkS>M5?iOu`^^C`!":2IJ+Q)",A?%NpuXPhe.Ya0'7
%:K<@8DK!*[`#$/9EGsm8Mfg;C4d'kPoa!M"c>L7R#t:h<5$cF)cVrS8)mNgE>1'5b@p.W<P?OjU]=6a0olRXVS6XmsQ5_Ef3n5i[
%%a5^+"_\A6lRk(QL&^DVj@nt*,4#qtM^<+nPFMCK/Y<'Y[)`I)]N^kfJ^M?C6]ZbH?;.M^p8^nZ_]SUEO!O+7NlKQIXi)EOp/82j
%HeQ>GXYBsS&'*:3Cnl>n$elPApl7,>]sCeE7qV@*qrA-m>:*\F)c[>h8N`Op=8SjOC+c`c;Ef(clc:RdBY8.3]/MTcnV_-pqod+P
%jf6f$"'R'WmcMN'cOX^Gj`ES+]W:/#`I..J-*?GF\\]-F;-.1pXujc;.9G8'OQ?\9+[^6Re)psU,ZLA&+XIV^?!<P5/i%3\dV%8q
%GcMIuHB6_;X1c^goaZ.&SR&sUH!&5nQUaHI+o+RSIF?a@]u3)*g+Lb^GKG$?5MO`Tn`GL/PC;l+[Zb,](2;5dF-E00gI=UQ#KH-%
%I;0>%>J6P4J[Cm7>9dsn"T)fARW:r6IoB;N-g'T,YN0>SVtY`5VX'UqGWX)n249q2Fjj=FI^!(I!EJhWLQR3gh4^gnjtAAgCJ]7_
%ju9jfd^G?t2+[N%opY&jAh%X\>IA[s+h10Zm^C9V<r;^aMg],t[U$YZ3cI\Hl%_@%H-p>ToBN!cPo*[$k:fhHGMoQeX]]YUEM$ZA
%pRoVY=UEpE-:hbOe;C<PB"F\NX]7T)[L]1cU-l-[;7NSekL95VL8V$jM<3E2qY+cagYM+1f5IN&(R4<nT,rlb)\'UTE?4&LM<r]V
%]4nU[$15N6EYp1F?AfJ-Rl%C:4M/,tFp.%c@0X/F_cN&tNJj'uMff\Mj;YIGdgC3nG2P4A?J&kT[WZ9$]Us"t(>8%mS%T#_'cR6;
%$<pNhFACQenL!sr[FsFHXc$6GrUZ@oEjh`XX#?C>VVV+O-/a?;VsLMb9uL7ROZ\CQca(/_#4)K&nStbKfSXS(DVA@W`obu.R*+%-
%!6WQ/fSb$-EUMWbYJI?`bmfloY[NF@,It+t`qLkiet7$pgpBboC\#981RU0VT.Sd:rq:=a<I_bBJ(_`8WDn#T;()D;hSmGk\PO'b
%?BTe`YRc$66t:E^N)#sl^6gS!?7ZnZdp]W=s#?L?)dD&Tbk1>NilCk0JjJCCkVqln?2UpV-_e;02fkQ(-5=\U&(n^iFLp2tfHL*J
%[eFu9K]Y/_Wj^g1&*C32:11[0bOppSjic*lS2`TKI$hEW[Lq@*POr7&0oP#/]k`:HIW:A(E4ghQ<J7Q(^1!/t&BBf.hjcXs)IY&]
%92#iT]S@F-/;GV6lruMRY']arfY2<#CX!@B)H^uFY3:5JB@jJ&1LiR0*c()4ljZO@OrLk7*+(?HlJPt$Ie(3720#gL[TkqcXA:4I
%VTV>==It=BHt.c;HP8?khO^j3Un`$WaWUt`qmU-LHYhKNIri"Voq?_JkKjkHqKi(tnU?8)hD[\IH)p=M>(E=%MfFI*O'_m(oHqaq
%DuF/!PCR-RH@]eMX58mjVXrYZncNd+ah3D'Ou!GF@,_sg9ih$8(YHMj/D9crpVi"$_uEec?OQD)`HCVVke@Ag42nl=:Vgp&dcX`Z
%7#.n^ID&$@^YaYK)hL)/]sh;jU9eQP7YtrFhSk0:H\H1UPH-2V?)FCIp"9`>n@eXRJq4LO5?XQ_;gf+g?9F,dR]Unfo9WR`EO;2W
%d`)=3B?SuY9jt3Unf8jX[Lm[L>5P``oE]&qAtUa1%c.=I5DVm5h8?hMr/I/bA!l%A1#mGHnfQUr[`GP8G.`;RUakG*R`)ob7]-cB
%]UW8:)8]H6V.5qg"%Mt6o]_^Kl&UV,AkDJOaV-ns/f4ieBjX-#25u5M5qN#_H87^W/GE^)BiF6be^ZM8@u#r_KQ?eF#?F.ipW&g-
%X;gk-U*A`HA^[@>VoW*ZoCYK+#D[*qPh2,lo^Rk*bGXsRm,F,[J&&$+\6+feKsH1Ii.Q5r_2_%@OHo`IC<lp5dB0W3@bb.IQ3M[\
%QW0PuZbgD1+,R#4f;NMLa3;CiLT!b#PSpem)G[HFb[G*%174PM&$*9/ZNsP7$pg5K,&a)*T(_T9-s6/*ofXA?e0OEG)W&)-q[o3l
%k>_!GY5A1r?[qt07pl5_2]kf/IfHbFfD"_D5$<>\q;R%io3Zlgnr*6\s(46[*3FZiIIW)4oudk0q;Tka5BjmBi:MMKoD'cWla(Oc
%/j?Jrc(4`CQE<X6O.O+YrT]RWs*F=l:Hj+)CA#^6O2Wh9k*$<OJ$IL(T</@Es7#4#:HigJ8&O$K5!Bo+*W>-r`j8Fd^OZWEdE0!B
%KYMoG*e"(E_#<B_qu+^Wl)K7%dJCh/+'64i4rLn<I5Ug!i\t5\@n+eMc^o$np8cP&$X`o/g]-Y**Zfa?ql+;A&&.r%UR*@cIIb5>
%kjlF7qsRj`h#?sD)*EZ9lf;tLjeHJGI2)r&T3QdB_6^t9p$bEF9AZ,"^\rJ#QCn0TPE11mS$*Y@FF#hBlgqkDi7"n05.Yremh^Vg
%p%Q5d5J$a83HsKKan[eVVYU5bHY;@ps6&.S([fD#+8+MCJ,S6^:[e>N]haBtq;PpE^&IE>?[h^l(E]6>9jZhWfmDalV_@hmH$2:V
%bLs)up;-+!T:HKFhYmCkmOmDohs::+UL4$A#B8ji%mPD<_IKSV^\mM`rqu+AQgan@o+-o"jo><t(;fV,=kR/Rh94]&q*AmHcUOP/
%^4_m^^R9h[b3]%Yg$j4fMk#:r]A%PeT+3KjK1d9'2lH+n1;*A/0>AF?hfp^&*8UM#qW5b+\G5B:++8G6m0CVZ?[bLi5G#Ut6i+=h
%m4WH^^9,,Lr]J6#qKVN#:3BVDoZQjT/H>.)T9#![+8u&s([q<6M3"Y*Mn]l?C''I<T)R&!7t82Gn]=;ll(bH%J)p=@pW%bnCrJ?P
%4eU`:ZhHZ_Gl3"FqYg$C$)4VPpX+cZhuDrE[$oQU^it:doeFg.n<nFX]@_i8p?s&3X/R>2s2AC<KVf]5d-k95Qg4ISro;E#mu<nZ
%s7,R<alGCq)H9MIpiH&bh64TWh]E=LN1N2$rV_qpJ+pd#Gg*sOoCrVfk[1@]^PnfGmsR38?ha#]N5#>Wa`-s%Fo:4)bBKSN%%mJV
%LH5;-D]q5*?c33#O8aV(a8Z%dhu<.VFQ`R_4?GUU]EOB"elP@kIdd#<:B&O+qREOQT7$EYrBL8$T<5:U#M5C!A0uCQ^0^e*;*BLO
%FFT,.L#]q<^\b\=gIK"#ALINT8P+$ndGI,K)$,`ppAO^iMrq5!okI9?]"#<g9Kp4@Z+?fX_U5/Xp"AT-r?n6!6oQ4$GP0qP:2W;n
%j&&&<kj`#;42:XX8)0=%N)\C>S*A&^?XMV,^8N*e*5?]DF;!gQp;&Zq@Q':ek=DPD_!\f32%8o>GD=FNN*"uUZS*Bn_dA;)]'JkD
%%i8T]OT3Y)j1FbED72#ho5a]J+ZuY%q"++OJD#>*N!?3;]\M(FC7;O,oUG=Y2UAnSMGN'kS)go)E,t.Aj6ka7ZmqAYdJ)>Jr!suX
%\<\B.R=JC><##ZeJg^t`-s$T5hTjmOm5oZULs5B(37lr4T;T$L>W1g,2tA"-)&^i^]4Yaep<mf-o)-IR#k=Ejli"Epk[8lnQ/-ia
%g5hI]>OKq#Vc`9A(\_7-f_t.'KBKkmrr2H,cHR_$IF>lMjlH3PbPb?m^@_`'SM#,0DEN79H2lR$TC(d)=.cGT4MLRRo1QX'pVddX
%M>KO:FNGeSYMmX-2oEK*j"Gn6]YCrM7so>mkD)k%^Y(14g!5SHGFm@"St/&8kr-ik<&4op\@e?dI<t8AT*OO3\mm6fJ,@6Bhq,co
%c^'j[G0:urp5aXtlIJ(C%fImnoWbmeEGsdQn)#Wln!uT<op\HWIc!AYG29cCGBU^8GPQjiCYQD/II>O;X^:)FO'Nf3rG:*AIeVUB
%p[<">q6)=XRF[M`gTU(<q+RZ%]huQ>q:o''0)T"tQ/@WTQf$ZQ?EP8p^>Jt^@!B0@*pgt?0)ti\l[ScqI)g]n?=WEn/q8FeejY)?
%?X>bdpk&J8YPtH[m5t-+rnM7M&'<F0*qXJ[h<9@bCJTh$iKm`mBHTpL5K%<.miDDIWqkZkQ_-Ioe)j2jcoQWP2hKRN:\dR=lhKoB
%K'Cn>033^t+!.9+kejf74f>((^F-_*o@<-hQeu+2f1Z)3<WCC9Sb6[%raU/]D'7/1?O_Sql0Zg3[BJBAR=gE42J;?noD?9a)2Dg5
%<o]6G[.3EUeadq0gJDaGLm4BYPsrUPK<!gI`'<qW^R5l262kDee:6<L/(Opfjr]o0IomZ!O'GubCTa#ua,Bu5C-FI\dTm?;NQA-O
%./^o$jT8TX>/tRlg>S(d+)-Gh)k5)Tm8iK@Sb!f.id4Sh:Zl<HbUM;:=rBMO;TeaMps>>SSV`tI+0:eYlhX9;"pP!ML\lR+1`Z1\
%UiWT%2J.I<8G;*($i`_TOjg$FQ9jQ&7d\7f2>\'!KT8T15Q>:n-TnYTo>`A2+)HH+n7KE?4S%h0U[A!8:X@'_&+4l;o9k4U-amuq
%/J%k@;b[?RrCPURp7?0Z3r6bS$\.%3D0u<^doW0`fs]<`dbF6iq7<o`78D_!FU,C`bo71_](c!lnZP>.r9in2^W]&`j$'mkh>Zs9
%A*q-sG;jF.?+KN@GMT+Oh]D4@pj;J`p@ic<rrM6Tg%KKr=j9NE/^AaU4T"O$l$EXg%fbi2+!88H0<.7NgqS@(jqkZ*PWujm>.WNS
%*q)6SZ%$Jf>Z@@K^M@n,<'0uR?<c7Res]%B^Z#=MSfPIg,\l(\+8@;YT:LH$`A]`)fg3NK5]p?rh>Y1"]_iR)(Fi8]Q^='=ioX_8
%i)lqUd5ea>DqpHC5+OX"qJ>Kj-(Tf55(0GGdnc<SWSu-rR\0HVh8P$@D7adnqIT-<DZ7<#E;YdQle?VYlsB_af=+_EQcg1Nq7oh/
%Y:<fUkOXt@]s%Gc^X&%[`<1aj;m>lfV=NZQX#G7*rG\Sdqn>d9NR!jfe"&j\oR+q3`]goBq^atG_n/4<AmQ#)DsG5UHP`<'qQTFp
%lfV[T\DR=.lKuQW+90aBag:Nlc0o!;LHE_jcW/V&h"gs&p<!=*a04:s)dcnBgHQZlHC_`piaEq4Vt#6j%f"dSO'[)%bE4To`P;@`
%9AnF(hVg%WJ_d6]SEq&WmiKHQ;9n+VE-M&Us748/LU$!.1Cp'A>;0'D2f@&hpYaj+03dHejl#R1-]T87s8<G^dsp)C='8n.55F25
%/bcGThS&pEp36N2cd0AVVS;s'e",g^IfCXqjRs+nrX(^100WU_ds$:h[p4?lp$C\-CCaboWnOoEU"]O]Y.@[j<p%6lldnp]LhFH4
%obD7%]6nbp*\MsZQ:L>Zf;js>Hb"K;2nn$Pgo2CP*8-^74*Po&fdiu@5MV4$[f5'EgY2Y+mFNFe^3">Rpo2n7f<'K&3q_G"IU(\g
%3;Dn9OXK@.fKT&Mh7pF;>sJ/<R3sAss0J>Pm4U*dQ)oG\e8aaFhW<?:mcd>jJ))*t5;,IG:>Yd"J%(DchYE+#,&K7<dnUD%:ALNk
%nZ!nf`r3@@imEHEhu&mVIQ2bR.i%rb/fa`KIpidgIJ<T#I[JkJ%dr>1/'h>YN2oI_KbQNGo65+sY5IW-aBX1>jkC#e&"^7/[KMY>
%gop<V/UJ9d*L4P,oSXsW\&;Ysf!\diVDAbOIJ-KmlI'l`los18iVH'Zs-pSjY=@gTp4rM1rbm!F^!iJNprN00h7L_I&b]b:^+P'0
%-_L+KBOBd.HG'9u(UsG"e8-PJn*l4<8,1WT:nYt5DdIn-H(I[VE\?]CgqS4'O5IOgEYbtDdII24-^S1`ij![?Mo&[uoE23[*8NgQ
%eIS;>IJs)i41jatT=/pGTD7jEcAe;@&$Tt9^%cBrIHhld?7R^M^jPsshUctSSq%#cK13AQ555#2RU9u^p<!%6^E*:>kIjB6aEF3+
%:JU:_5'Hi@<LtWCW*VUcoP%YMmGkO655G3"#AT7s=M=6:s5]%7BRS`G^0^fIH[#A-:Yrf+<F>.Br:ig3Hh@B*_VK<Tlh&33I=>`&
%qTd'$qMfLUd]WJl?]Q8!q=F4DhfN/meBYnec^.CSW,ip>d`Gh?fjA+Aq;ji+qXHuLpAW`\LPhUMGk^u3g>1&%qtTNMqkmcUG$Rcg
%\+>#/q"<Y<[jO@0\\Em'H#G8TIFHN.Dk;c2o2YeSie;;(r:ng9"eooWYE.K'.eTh]IAXJ\Xjfi=e?[Upp_N)LpjVdbH._C$oh*M:
%*k](+DXZ9/1_jPlaLas'lok4EhMVbkIf)e&lT8G-q>:*A00Zb)3&ardf3[6^ftMb(L"j.]B)g$Ig"i!1[9VI0mb%7!e*S/$o_)&U
%ote+aO4q9#p2<0Cqq7YdD1B7ur+=Oamf'ljilSSA(pqO61UJS0op=A0hQ3op?7hH6?fpjO<RRK,m,-SIm0<7*htA*sItL*lUkZ>P
%da<[T423sC\?Pr,`hcJFFC4LD0:qTZ\B)sP^UAX)q=X1]kP!c8Ra^Bhd>tc_gj8a?]=r[k)bl_BW+Op/5Jd0\C[&GYs(u+3s4dIo
%\VneJH%,=3\TeGDc)]T3Iibp2]%#Mb!u(_-^./+uD#;7C2rC`$IQh+f\$pM?_<L>Chu<:jV7H@#grpi^r-^l'DT9D=[H$ckZ2;2+
%LDs1]q6M`G4M6$eLAPCaO3"/5n+JBiIIh(>e/nqmkDk&_kmr22rqpO*q6fhYrC(f+j*mL]]hJ[qX?5!e?Mq1rE&YPaHZ\k%^CMrX
%T!,T^f5H,OGOa.7,?M<\+2.Ppn'R'F>9?tVXe2ALO5k6DVh5A<^'\p#g&2*n6\5&6<3LpMIerBV`M]V0p+Ds:oO6?5=r,<Kr?#sm
%);dT(E9ulq[r;BH"k)D.]nbe=iZdp\jLc^tB;0A)f^YD:T=rd?V2Kij>][NNho<EW\pa#EbG4AtC"cGadt9;S"1c')FZZ5q+n"fp
%doW\>A@N.L_bt=9h#i/uK87ss#?Ur^^RtMn<M/,/rdjV9I&DAlbs@tWT>0-+Z1I235?-*%s%<6fD]J(8eaiLZ2^^sW>Ant6jM0ES
%)lm?/k+=QIYhLgLqf]^LpWhd53k4%5f"GYprm.dshY*e4YH75m(Jsb0XJUn?Da3:RUT#4\^V"sknnN^O1%af"Za0N9D]8HpRdi.1
%::u5C\8g['UN<V/?e;`DD_<&;G+UpEH10*CJ$m^*8,48(Ik9bH?gII_aXmIroBc4,GgeX0a.?l*`f$m9pJ,"@otV9?Vsd*]2pN@C
%o@a-AO7TRRVK:hk_1'(;l*(B_lI(Zm]M>)Io_c&AqX+9c4B80fBEd:8q7XP^#tHlQ6.%Z=C]EJ'cVO6h]R0K>Pro"?hiCi&kuAgA
%IAlF;c)CTlp:4f@a4C[piNI\0cPmFBq:11;pY.hP0IP2]\_X-UK]kh-^-$T;ps6IdI/CmT8'd](?.V[hr:]K8g]_;=[U"?.]Y@Au
%^3PWlo[=&c/t`.5K)=O&S$NXOI.k5IqSr&Je`U:&Vg:o@rRLk%S"fN1:As57j4+H%nU(00n!CTupgQ8\khX/.LB[4+'74)fIPK]H
%\T2*>GidZR>oE\Ai*cG%?gQ[b]D:B7?H/Bl@u^\0$/bA4FN\kSjkMdVhk/WjF7]1Fh](*bNUG\Rp[N/`p%6hU:_iSq7Foe_^E;m`
%V[jj0++O(Ya'-3gE9Y6'3tFNp($suJF4\=c]dm10I6?AW&-!&ag;36Mm;JWqonT]4QKon7J*PS_0(a'HmDn^kQTI-tV-=l_q=gMi
%h]2[\j1Qt06XTd^G@,6Z19scs<?YkVTL2Xcjn#ZN>i*)BiV06s-iX&'rd43OLoqo/L;<Xs_n"^;gZ@S2UT\Y^40a5-mW'tq>2K16
%CAurDW[f$_s6d4W?gd8FkWAe+cE4e#n^j[eWnqWs%%1#Sg?66=T?cQE0&fWR/@H1T>Pi%S4Lfn4bdVfrG^",qf6:$SrUAb2cQU&P
%l)N@]7sCTnIK%jtmJDCgrkKmgoI7:lqI&L+Ok8laZ12,@q3tZ=?G&s_3WBgt-O]QXIs*\sJ,Js.`pR2`S\K::k&:3=CtEB]oM>A!
%hg9XS:YL^_jbLGq^GdAca6T&GI<O?#]Qh'FquO\&*kmDEqK;JLX+PHupYYo3d2s%o7_<sEfNYG5F8:U[*dl?omgl<SYPA&e3.5a&
%^V50].pd3[s6;D-Oe6`T3<.jer:P"%If4%tpJC[3Xe4O_TuucWHO'6Am14\/?[8r(IHQg,)rLRa9=alh_2$:kH0hA7pE&_9I7JAI
%H3mjVjljOc/%]reg6E>\i2H6[?ULI#4]LCqOdMV.]<=F`FF^PZFSErW_;69CrBG_jO6s8TY'$RU3VCkXjWfhP%E&)9Y.]4(n2]s/
%#F@'oCL?NX)hPK:s3.*Z:HdRF\bG7)lF,3'[HG'ZT%L-U*F.5+5qXp%FTls_d6=QjfY6VlCn>/6k>&_Fqr?Vebp19OXZpb'bY?Iq
%N71#;#%%57De)IpHu&$u[hE(4OPVPfrq<t;a%(XT6p>a-n$gK%C%p*T\=9trDlpWU*p3%kmO-?BJ@T^d_JU/^T>%J[DBCmQ4SnI;
%2d^t(bGtc.Ho\ot0=mVJl\SQR3S.($Y2=TXfDOZmT=Pa)o`$blc,op&::@<kn,CkHkKA)J>WD`Cs*Ob&,N*@d\IRuXk1)Y$dD\`h
%1d*LfggU31od<dXLhAp`.^l(`5=E'\Bno4ana@4+39)QC4F\5_=klLi5;*KG><YXZYPt5[o,h9:S$%<(YMUC5Q^*&-[Chi/[hf!0
%<M]<Vs*87&!`jF5@''s?5A\]c+8Wn!gu89kquAU]/MOc6O.Q)83;^m!qb)hC="/CXYPOSUs8LU\s8H*skh,EdIY->4D]<$en)ULQ
%rH3M1MSBCT^]'5_3O\PRMn_Jsfh3W>^g8'WKWtIFoDdV,s4#S*h:38=4;YnI(5*4$O7JG)Fo;8cKm`des7tmP6\Gh1pl?q:UYL@,
%@QrG?R7X=edcoGPqbMZjqrIM7+8u!>ot:*]%=55E5;m8/7Jaa\\G>@5PM]_2r+JMNW,:]as54`di:=q<\rZRaVi2Lrp&?Na>s,dX
%?!m*(06i3Z]YETMnQVh@kp(/FelK:_#U3%F_,@KKUgT"1q;<X1rcJI.hPldS"_7PQk:IKc`(,C/PU!Eb*.Q:T3EBNJ29#EaA)M98
%C'M4R)kk^[8[7+ZIP0di[JghH[[,]a<@jpl"7%.(5F6\uT&j5$8[,^id__<W[!9JnEiakp,SlJ%,&dH=D#'G=lYX0<k!s>oMU&Gf
%]%lXS:"DMCeS8X*:aY6I7-mt=D)Em+50t<SI#+8aMd%@:@$p\kI,r1Ge3S(Y257p8Wj7&tD>E0(0H[uM[[-p#h?(Ia1"HB-I6`3&
%mk,:M^H9>r6_`bl#@_E@>JGj*,&<g7*"51V4-Yhh7%kM7(/)AVZ.bPIB/um-=nSD6%4rl==ECRNVPqJf<aR2*iN%jd>Wo@GF8ulI
%?;\O:[9/2NE,8'I'al0D@+CT@cF&,Bo_uJ&l`O=:3$P']<-O"R(QoGQUf[p$E-0_`FYp7s<X"E<C623_htApC=H09[Mr$/>QWE$_
%;[c^.oaSjc/\W'f(T_dj.VW=d@ib0T,f>M#/=1r@J6ms$NTFV$_6AUSL>R`B<MX?mp%B/\"k@AL5U@5h.(9m#eWS'WN61b3eH\+H
%35-1qinEpFXS)h(fG?kFhOs'K:/?^a?mS&`obrpmhY,sg3OR6pBDZr<4+qCn[=N=;@?ES=9J5C*\9_%T_@SlUEA7[!/B(L!/;IC;
%CWdpf\Bjf_Z7N]UbJ6`7[`h1%ANR1>UFB*Bn%?WX;<g6ma_jKlc67#,Q*cfuXi+d/fe$A[QI.RI`f8kba(Jkl\fk*[Q/B"]Vl7S;
%o#OO9MonG)?U1lV2KK.S[Fl)*oI0q*IC&2%?TIc%V6;;.<Gl<JSb9-%94@a[a+0XgX07*6+Q'G%9/4WoS2A#Jh8K/1Zc*dXEhKXY
%Bo,l+b^H+W'NWW$J[?&_S2,OENc!0j>5C/D=;kgTD_M\N@'pn"*UCJ"/rg)R$=u%>T75'sm*IH@gIJ5bC"4BqQ;IaFY`@g/Z/_bW
%F2q0-@uVdN9ONcs)kH357gt1LO4,eBC419DAiZnMp&j!-.UmG:.+/gqEju0$@i8c=qZ2<+NcE+Uc=1W)U'B&l5h@<?@<KDkSMo&F
%Kl$0ZW]'/@\B],lEf1U3,/Xq"4H;I'S]^N@b)GREIFqGa]+19`BK.&i^PHtlT/R8Eol8ZH+A[mV0Ec'gNT)@R0X$T2*U6NJZuN0D
%7_=qOdZ;C#_F6f!(<9"9+cUFHgY#\j3'&$C\5S:5LTGNcV_jF:Y0AqkgGk@Akk@)'rJD=@mZ*"$3ss%#!X[S9WgP'Xg[#QXV3o3M
%S`fi'6Y%Sl7qVe'O(0ETTKdR/_n2;g'Y!/R?@dc5.8bL:Vc!OiD,YZG\ej!%fS15?B>Sk&AnAQQl=.k&eYP)]7Ccb_$'pZTonN1a
%;tfL3IVtd#ZDX6\;RaARSh!@.W.Pf=<u"CP#h\Tp"5N[^IQ$p4WEk[_/d&>_SdUjq<Wn?okc/#MO#p;Wq/n@I>:S9=IE-a&EirnL
%[Fq'5F16R^]$Mq4*W*PeQ*k*sL5o*ugH>.=hT:0(V\(:J6=Ml<WX)GgdP=<*/P^^s!ct)d""P,:0![ALCMk<HqJI5h%Z+MqSSgH3
%Bpni"kudP[):k.V@lIY3L@Jg>=Bf%c/D&W:g3dRukF?R:1*;42dH7fI-nl$h@+cK$'hdd5"W48?'6LO/igBVf0@$#tGa2:ZlB84q
%.W'3Q$hf/:RoImJklWH_J?X-IS-eY6:b(b$'SY6oI>ddc9Uc)KS?DoeHR/qd$"+?"6`bAU$WpW/mf3_K+\NV.7FX)C4?W_6P#GXN
%PbGGq["<]P#2BiB@A>?o,mhqT'Wo[PIYb#ipp$0\#@PiP>Us,A'1]aGP5nau/6u:R*P.EpjKU`]hOXKEl\D<fe6)[tHgb5W@&q4^
%70Dj]/d-7b",pB4:!p"L5H"WLVEhQ3,F,/TB=sK<%OG*kZF4C(1Q3gt7U.bUHo'NM7H@JaYUslM#<7$DVa]tc>apss>W2a$\MiMK
%P7B5h>?ZHsPm'bmAgM(m>)Q_7U&Og4@tOYE/ZGq/+P/>U9;OZaa3D,PZG$g[C]N[N:2jPRIB*O'4td$1nmf:m!*ZT.TqA8E?Eq:o
%Ol'aV@0Jge&R<,b#\8Ik5!6heVQCA'JJ&Kp?YmE,c?cgmXM+.5)$"?m(-ia]rk(8oC#`Sa9,g*&qRVb#o")ILf@L7n0hQbmh8rOs
%QteCXG=R*&(2HbPWN;k_<L<E2X((5PR$Q7r6D$`-\X.*7JkL]uf>0"nH>.4h]%@tV;R(6`A*pmSDYIo>#(iX\qHH5`\BVs*E?M47
%'YbY5Tgq'MW_!77Nt-b%NKOG_3!"3%gC+c:h$pKZ@XCD=@6p):$fk<Ob58B"JTABbcZN#k^1A'A(i?B@\+W]s%=+0h;(tq'\^loZ
%m&*f?0K5$=15mbd^<j5M0#6/+5fY?TC=d-VXo'_/*@NpB71!$P/mZj&`b+Kd\mZ(SQDIu+j?u8J_X5-.W6='.G$,AmC2pk)`:OB>
%aR^kc3KhE>;#:@YQ=\>c:."F/YVgC:E9@:)9F.A->jX]"KkdY7W\WJ.Tpd]mESGW[DG1&B;Vj.Pf:54,+i*5VB<d'iUc_I-(+]K:
%-N%lY5t%H9Y5AdO,!laUI4Trl,D^29.is?^YC7&8M`3'U!eWj3N=M&5!GXg7U9idNn>%PK0"TrfN0XN2Dl9n9.KG;!)o\1Q(k_./
%3-VZ,!Ce02e_R'9P%e%(1GEFmFDC4<m]C;.Q:7g&'T?jR?X;?_!CAm+8fJ/5agD<1*6HnbpPGR!E<5e18<_Rc8%7&QLdc7J[#/V^
%Bfbm]T]ZBV^#a6]d;a'X`dEKC^_5]ka]b8a^Qr:X7S.>A'H#5n#V;?;`#fen/I_%QSp"\P1:a1cKP<5=l)L%C3@:4;Ys3RgFp+;j
%R,qFUS/Y(\/7?Ok5M(W0GXucp`fqhj8cW-FA%B"#H=.bNBhXt_#\cb3`cu%78S]M4$s^=8l9$6PMQ&*P$RSE06cGi[ISN%](YIE:
%)?fB;A=^u0ARMBZoS;V/?eH.(;eTW*/"OgOlB"krC2m1'V,5%=;-?aJVe\FNR.g;PYtBYLH9r@aBR-FBYA"]08JI]Jn%S4*PV]\=
%)d9JehBj(5B.ReI_j%44qL)(11p!qFl\\@,Q2hJcd:H"UF;%ck#WMir<rqnI$FVcgGQILajUZoJlLUa2C6D*jJ6YVFH]QSTBoq^i
%;,%ZGY<W)/FErBr<WOQ9`m6+-!6-_-8W=Wr87@$#<s+f:UP/LSS##>mqdZF3#J0u=O'Oi3KC6:#"fF)k.b?D*_=\Io?kf.L@)C_(
%?sf#G5e.4kgb7tAfkB<(5r@<?P(?*nWul)=c#Su(6k>U?4IP;!;+N7mnFa]+o]=a"9<VZd9GU$rFatg?<WcXJQ353t(VuWu_eN?:
%Y;m`(grku^rDm+f+_kGp:Kd,YCd$:59$F(n0JR'[0Ou76oQ]0VHX,p^<Y>c@i;2WNZ(JT3'pQam%`[LcJPnLG37?/]1)Z@$fanVZ
%S#/c8_SBj>"315ceIV?#qHbSS*4905]+3lTU@M02%jfnOp"R]!r$G-,*UK^'kW*Q1!8!^p's&?&ja,ttYUeg`*KQ5-kQ!.Nl5V"L
%oS1%"#$-obGj\;=Vt>IW:!>W`2Km;[[fu(j?Z-#N6%)-9C*\%BBPbVu+p)7Xc>mQG/f=&D!:=%mbH7E5NF8c'$E=MM8dG0ZCSCkN
%"B\89X0o>X-(AX5P[9%Jc)t]Tq/_s.JGL,%-G^7\Z^f`N2k*"9IPZ%FlQ.:(Rl`3c]g(&e,D`W/0]Y&_b(Cjl@og8t6;pGEKr(C^
%@]@_^k)5!d[>D,raXnKn/rnK/3`fP*URoU+.VC9G=XN:MEf9ZGk7".1LbVM3N2g\*J3Lo^V5b$1.jfM0>a,QGRLJgFSEFTH#7)gf
%YSr*Z@[-7^f!en7%?d/EDL+F\*4G(77t[I^^qrUGkr+/l;1b$+=Tof:Qt)UoKY>%7!mDWlLs4F>6&=YePa"^ra`3[%cm)D3_c*E_
%bBPrV<;i;:Wl).(%6FPlcJJDb?l14-QQ[J6790Z,H3FFXA>5=LR$rQ@HR;&I`t;/<e:;.s>3AIQOk7D\rR`WJQ=DSg=[A%1CImne
%=K_5oOfOi]'ML7q=KD^\`0qk/m-M"[%J.8tYou&-]'Orks8H(9?_Z]@[3lbNdo5I_$VcAK?9eP>iW:g5NO0f*I<>A1!E:9OY^TSj
%`*AQh)aJ[U6pXgtqZLdOq-`*caWMM?!;7ud$sXPrLpC:^F]7ZA%B^7")<e`?Uq3Q@A6%I5AsIuKBa,^tK7Z\='C<$*hS97Ucc.r[
%m0%LR2`#kk8bUL9E64"o:ip!URK]TR%jHC(ZM@lNNF>^_g[<%*d@m9]\qJfOI/aJlljTs,J"'g;lILPfQ>DpN\"Ysu7B9Ts+u%s&
%Ah1q8h!B:#)`KGC1qckoO#U,8eFY>!#=rV>9<,Ma\3Ut9U6_R*Z#GNgODhPE^r)=`pTuZeV8]<6D72(Xot97+^deLkm/R]cC(95=
%&Ra/P(kD5o#rp_,-.tToXij+_I-4?\69?GP(0@7gLKFn'mYAN&!/;n2#<QRL8W$o^26<B&!;kG.[SqqF-9t^:lM)\W+2G04IdA%J
%00h<cZ]fXPm]q>pYt!%?RZ]Tofl'QdN/mLX%:JYA.+k@$L58pI1-1G"1dI\gpj%V6!mir7%tUr3Kkt.JGKWI20LiQq*X4'6!mS!]
%\,n3+4qR()^M%!\Mj3RschMeR$^Em?UFG48S@k-0+?@>Q5pbZ8]`N#'@M)a=@G)$+N^a9LWX@,>#V#E#9T/Zi9\W`)aP*?5V=Ids
%!lMX-MT(T%Y+[]MEEJ.k3Xl`,3`sbI.0!mHecN*fcCp8BJ?U)98DbO(lrT"Rd`NcKNk'fDikPb3Neq!lNGZUBQ,gi.P/b,c16t2K
%V%W,%cY+VPQ=Y;uSf;a?,a_Hk2M'$m#:%79,^Ri,P-.T7CaYeV!>`@TEqNK_=FD'mTPFp5O=r[B2&75)lI%Y)RVQb]`k5W>2Ppnc
%NEuRN[P&utZBtoCq^]s[`2en[\!M2JS12tI=F6FUL\!qaasE(367*pEcQ1H&VI=YhS&"CFcuV]flu>)eZp/gu^(>tlQY??.NaKu\
%JK_pl'?M!@h?3"$aQl8Q3>T-6W3qRBk)s6mFH*19=Q*o7V:Ck42H[(ml^5nPo!U3\CH"L"1BdY=OJn61kMtdCIE5(Kp+ck,oM\NY
%9!NP/H1^4cU:,@.j635Q)k0:@m$f,(:q6OQYL/?GjJ@RieushApd5)nO%;nW)4XqOa#5LB^fiH]@*B/=Ibg^n$"A<<76mYDJC?f2
%YG;PDW!nU*%S4'tLW32KK$N'[Ml8P?7GAVnE<FiH/E>o8Y[N<eS\%Yhg<JYJCkS&'ad0df*hth]P0X=Z:B:q5U@SSD,%lLOVM?d)
%GQ10GLT(s!\fC1`*L[?Ae2e@'07B=fFtX^K.;:`+6m&c[("oFT1B_V]Jj,0B&S)obon[#!GhMY!'Vlb'Q.K3r"-\dU]22K037h"A
%gGV-hpGN;[<7@O9_Kj:\(?2[FGo#LoH;V(F7_*&H2Eg=u!S",a&n*27D7Bag?U`KYo/N0-/mJSH]6Xr,mR5Rse0>"ST';1=)p,Bh
%fnu'6%1S^D#=3!C:KGMJh6=]TmBuJA((>![YITW/dBTnXN]!-PCGkiT;LPp1<.>`)FX4YuPbNMcY&90Q$DMjr!"@4c#aS>,_+bhM
%^QM.$0'eu563s=.-e_sDh7RaDTf_RoB\_4t^"lXDn"R9/aD:<8?gt5W]hE98W>O:-mTELQ!Q893bAp27S%9hhi[>LK=5tXXlSD_d
%CFVU7h:?[.(S"T!'[2fXGTL0\eP9[hM`-eo<Z38UFJI_McVZ<15raV"'&:H@15mG#?l0N30(Sp[3$`Iog?p0R[QG-g*,@g#p)nPb
%"&kMX-Qbg)4J#]$o].ipBj@*?QR.peoB_),I-N$SA@3lbnHPn!Wae2QH=F=Rlm/*S?qTHkWIc&fDlXn5Rlla+=%5bfcN(O;A0pVP
%<&(/I-!jQE9t_31@.kQ9!_a/#IN5C<K3SJ9hu#2o=L:#IE@83C%@s"BS2Q@0Cgl+Y\@-9K31cOAO?5cnrMj_?(A5`h-R%B=MJ<?=
%J&V;"dJHdWAUK[W!c$\&ao]<VD0Dl!X/d(^oZVFBg;P5XBo8(@ACTpSHdoX@\gZLg0GdRMCibR+:cd,S+>Fo`7b%\PC.6>=_f(>9
%=p[-1_+"8?$&1E?(-SHq:"bc&Ri3e0;I5U\Gnr[I,Z/eR%-*NpL]XcOe:?`p8nH\BH.W?SlF"'Z]At/CUfY+/eL8R\o2?OUV7OB'
%GVNpTbJ65sBVOV35[(%jc$:_TV0\t:^^uj0,$CmD'Y2^DR.9GJYa-t.4bKfJs4Yf\RK0rlR<iQ.Q(X04.dE]5YW3,l-Abh(ljq>O
%,#RJD%kc#NH*u9EpN;N:?!cX3,)h+H$I[+H>8[gGa\K[KWfGPSd6$*moZo=*28':paA$9PQj&5l8;f<q(>qp';/d=0C_80e*jJ_0
%&ZNao3N"C8?D[#Y%,_ckk2%D?IPZgb5$)O.I?l,mNYf^4.tR\oG-;pU.ah?FQ=;eXkk#MP@[\G."EA\T!`[,u6Gc-k4=@NUN/JA'
%me%&.P0P=Zk"S=TOG:@*A\lAp0jf'OLhi>F<)J_\4,G,\Zp@tFb6B_B5b;mdRO*AC,[8g2I=5_F5Gs?C2hsD$2<g/r0m,c%((V3$
%VQeSU3DkPdT@KZ7oe$;Q#eM+b`D-q'TrQ)L<uW3NHVl,&%QRiYb+XD^49tXQICi;EieY.DC=$S7UhA"9-Pd#p@agfa1H`sY,j/<s
%cc&.,?_S467)3s%-=Voo?@gn;3?3.hG%sKfqFNe7Kd^!DU+.CZYOK+'9I'-AG'e1`DIsH:Eb*W`CQqf/m,VD,d&U;Gh9f8qoW*]_
%$.b8kWc?J+g5-jgS!D3,EXMA0XHi*UMW]WXU)ad89rd[II$UE<d%M$^)+DRYKA]-F=!rlYlPMtp)^8_`1uiX5eU5)Uo#J"L*#aHU
%oM-94bHJQ3AUMr5fVN-NnoO,-D!D*GEBOsdLfWWn6*270nH:8b'H)d(npuZO%kWigP*tV&5/GCB5+?Z%3ZI;LQ=*c!ee=6PP!eid
%5h5CjiQqdjDg^k4G%>u,M=6#fRueSkIPQbL+E&.&<!.9Fj8H3BP%r#).l1D]@B-AK-cg%u"\?*I)D%16.sF\jLNs`ARE`p`0Ya5[
%LYQX'@0]a>NnNLpHFnX)7>`*8C2DMk+?!n1"^Z*SOhmG_A^TkRG&[k8J;\,_^54<W)0OQl7'VLTJ>p[GdD+rU$]'I]mupVNfMuFP
%Ag>^P\I+W>">m=Ke_CqQ/;I(XGWD=C*^dbD:&S_+ImdJgLtKX/@WTWL;NXI"RokIY]GUsQf-WW1L,%WsJSG=o+$J5B".6H:R6C#2
%K])KD`Ybm&DpY?5YNa3JQh'@r/.(nb4;9ZAK-4t2!5%ZGpu`.08/q/QjVSOPYr$)9K`o5*.i=RQ-Xa\lHNWf*_,DcI\9Wp0#,i\A
%^uRZ\bk@&56eUE?j11NDXu;8Q):TIm<m*$bmlc2Z[h\,VbR&6."/K-%htWru/DOUcR73jH'kH5L#@57F@^DOc8nnWEXEMR&e$H7d
%Yn#beERSJ@+CG$B_:%L?"_LJ<^B#1OBPmfqkCWH47UH7mAI)\Y1;s!(c6N&6lBBZ>1iB>o]@NGWRNj^UfbKO=B/1McWlPhinml-m
%6-A4_!g)hj"IE+MZ29'^[]2Fq(o(3W!7Fjo^^-df+1@`$5-S),3.A"de2ODqni<(V;c.7,odq4m=&GuKU2NE8f:*FcNQuPF2h>WD
%6-1JKEt(:'&df,i.9]$K2tE0KNXD-WTd0,cWq4^'U(\B)X^`F%^'.`"?Mn<`80`Md`1gPe\Ee[G7FK^i+nVJt\nQ3&cUlDJ:p$\s
%74j;pDp`E!@<Z(qTj\=NCI#_5TlRpcc`gQ_7Y(RK9r0`$/rL#3K^LZr%f^fJR76TFA?Z'LIQ*^4pY<Gngh5!W#%(#R%-b4ji8l!!
%O.=470SY0*Z`R7U/-9qMCfNdfF%CK.2q%b@H">$s#?<Y!&As.`CsZ.=DL-G-Ml!E/!Z$nHQ_^c1LapH!X]qXSXUUt1;/Uuj7.DG]
%hG8$>$olnlquq:]>auc9Q)*`bgE:ceI8s)bl4ESqX1a-/)sFuDh<@!'_^!"u772g>\(N0)>g`V`RZi;M>GN6W<ftjdbOrDDSBWb\
%q!iDp5mjRfb'^&l(=cm:,6#\'LBDq1&BQB!RL3mmCdAfPkqLftg&jK.`p!In.Sn`M]dbr*84P-W7t1j98dS=k"--Z5dcDqhDfgA*
%k@K08'Y#JU7LCn'K8N%Cbmoie_)`e2JME$m6Pl.u*"g[#hfFBWj^S&Ti*-J^SefgJ>uiQJrfHi0MAWQ#42+1TYp+Nt0I@GALW<t?
%rNa6/:`lL[B%n!eZ2jb*a3C2'\ZiSDLW$0l9H=q@AXEf?/7F&Ha"Qm3VXjmpoX^e.(r0&0K`g3$.c^R6\e_CX5e&_p6Vnatn,USm
%6Cs!LK3<j>L?p8;Q;Q%kKSHEj4g!Z(.aLIjG]@qIV87W-P'kcf8#9^1WstRDDt0V=C,Qf(6TIF0U;$$qH+*ceiElQeH&t;_U)s(0
%B`nuN)]RcZFtjWaBZNA&M;J?$<hS7*qY%!`1ltZUD%S-L_o,Vk&c)_9eLbMR_5RDZgeLE/A&9JVdks^S<$BO^r0p!9OO]6k+Ck6K
%p>lqrA.0q`G#cGcC5Drf0%TGA&j?A3V1-'h"#K;'!9Y9?ZRYD%-lH$$,)1\X:FN2T"/7+"\P38Ue'/MRcqlD*U8"$\Lco,*>R)]M
%Lh7)_>+h8$4TX&]K/S7b=hsB'9MU4B.L''h+t]PAD1"**Ji3@L>#aS&VJh\6*!1HD!D#s>SARoe<,Ch:=;eJ(^fL8*Vn=1ORh,OL
%ZEL#A$!5+!Wg#pP)$a94)"EDJQJfHb^opOf<WmON[V5aO=;dca^?#_BBm'/<//,sA([?tUc)`S1"kP8qM3p^TmUnQ$(n?/i3!!8X
%gP]4DIY%>?;\>3qja861Lg[abIcT_nlO@iM%33WXgn?AHEB<ie8'j-H1#[l/;1&T_Urgnl"$3"@a>i?P0\[$bWcg\4/Yh"YR#7L`
%Rg1oUZXf;'Z48XM3@gS_2%r0I!*u.4VqXAMd7ItfpYrLa0^'\D&IB.N[0b25aXGVK6kpCRR]74-#Sm^Vp8Nka=[B&_!-td\bjm:m
%OQ9gW1=.T6nR`/f:Qb_&q&J<Z5@X!&V:GZ&eiT_e`P>9t\Mtn/&'u*ND7GX4^[C=mM,s2@]S#6V6'2$O_]8n'T:<DI!,oqp+C?Pt
%)T<3%,V<2jj;9+&d"5RkUNJ;[1hZtJNXUGo*!-ml+`pEU,*En0;QC+-VVq]D6ao<PoaP(^^"9A#JXd(c?_EZ"/^@cP[/n'P1C4Fk
%&TDH!<!XfhP8cnQ!$rm./Q/KMe4s59LIfk/43e#K6'hrpEPS26,6TtB=4SL7$DfN48[4lF[%iLs80X^i1NEL]3T<T_kYDu&14\Ea
%'f:XKF1u>S-p_")@CSXFD./3.adBOs)akHoP_N2-[>,m*0UaFJ6mH)3&r!Ms7`6!6C:Gu`^750C$??-'9TeF&CQ3oi-T9NfS6Z`W
%$'LXJ$Pr`N<"h!*bod>8N(r*I$!-Td"??$`Y5tO$NT1'_QRO8`fu4(:Q%Olp("MR,-V7[6=O$L==N87iO*Dl#@g]B*nBLDWGS%.]
%U]Xj<.WT4dc\4nFk.+F45)Dk?j+SVmc`i&+i,fRJfA%t+8deLQn<>D">#a&&,f1XS!Tm7%8:hV5b7i(anIdc%dtm[T,hh/^pVda:
%BE3/k<:[c]H\Hdid0!7MU(/o?DB+HC^i=#@!DFBD"2t!B%^;*H"dQ-\!'h\t^q!mO0qE-4PgmaB81VM#")Me&&N1UuK>]T[6W'!f
%dqkma$H_>K!KIddAG+$ij5<5?2d8pmZfe]EiF;=Q+CELfk<`o"K.)+N;1ehPO'ZX=g3$S$]B2!dEP<%FTZ'L4PVI22F!\>1(3F%r
%@%uHWQca1uK3BXcGEG:7I=#Zr('fMa<B+:7X^JU/&4iQ2^:BV!U!")U9\m)7d@.<GaG$f?hsf!:$i5hS0&_\AMinE-\?TuTL8irQ
%#a^A;P[W'o/<2E_g*2o'4;W>]lt(05$H:OO#RhF"aW*s['Tt&(qk=HCo`kQ>a?KNL-nVZ_Oqe-M9snmd0d^a4D\+BgcB!^6!;(*T
%10Bmi,4SorE-*)%P[ONOc&m,-Y:]uqY8Ch=`(R-']`5P']"&7=<_AZ'bbIY:!L/b@%DkPaN,N(,!cU0h`=_:E)9bngqZbug7)7eJ
%mY!:-50tK;>6(I-`1"f+'%@GU4Es\WD&T'_[]X%-KBrk#_HB#g\-"T9WhR(`AW9bU[0eTK<SMDE9G,8VL4ZNXB;fVYY[9$t'OS5M
%nP-P_:LY=,+jH2OcYZe.5"'Z*;GcQbE+#[NDd5sZ%cGCUgYegH3'a6\M_NcP\,`K,/eP9nN?&)R9f5W.5CdJG@>#!nU,=lZ*S(*D
%"<gW=OREb]LIt3XD/JE3+Rs^#^q'O'ra6QH'<q#pJbWlLW$-tPXd8%CQ:KFqd'FNu7&s,QdmSgZ(=7MT-l&mYOHp*jP,N??\2+C$
%8k#1CUAGpZDB'Vr75G<rMkBD'H<):.ROVD2NQ.OoW#)<r%q4i(i.cA90Rur7YI_(AEga7*:'4W2"inLj0gX@(C#OIKVUBF)o"^EG
%U5>cS_'h-a!%k4a"m+9LK68C-Z&?7j<QNbtiXLgI+Ec?:!+q#B!end$2.cua7[1qPH!0VZ^c!eNOCieOB&t0o"5/-/3s;Qf5/<s!
%FWdG5\X$:4fF8>Z7;?H<L4UK:SHtleSu4iS&h,s.@!D]SE9SXHJ[mHB+oICgo#Lf!!$3iB,Ub!ZHlX2hbFlfgQDcQ^.R8:\"#MVi
%J4^)I#3C#YWJR7kj),NF<i9R!T53e*W)8?O4G#QcFqO45d`>,b>u6q0.STMgkk%HfM.@epRQA.aP_0V@C5Y$0b?e;jCb-?E9LiKN
%&lAkG7^O@MBGR]R:i6O-_Gd3L9@=o8*e_Zh:`&YS"DG5LekUpU0'[^=M6&<PD5h8d6Qb-IK\2"i@1&1J"e[jWA)%onlhT8BN57&>
%aDQS5l=5A'?UmpUd0!a<\G6p#0LpaNWMf7ZVRLUVVGOP`'7b7hDCm.(8nj5r,#9=<@s,;t(mV,n/n6kul+ZZB>Z>[,U<L&fB%HbD
%dPm`fO.!6SQj>j6Rru#)gD%id.4#gt<h5G7-^U-QCs4EQ?pNp:7IF\f$<c6jaiU;iXH8@/P<`-6`6&0YA2?Af2;UI]_T/mMOU.VI
%0VF+8jo!2V7ltF6N0aamSPkA[&g838-)t#"BRmbX$O)cLO_6f_f5*cZ"-lqG:SqL""tW$^W+Jfn!W4oLA2FbrYgtYi-Xo1]YpqT^
%T$MjH5ifR,6!:@tkt+SXhQ</6@+:@No3ctK8:(l_TW.uA,#K!;ZkeqCWQG5A3aRg!"%N)Teh1J,8;stml8GOM^'&.r1d4_<V<qR_
%d*js"Q-l6E.r)*jTPWSD"9qV,s!]Fu,CC?XoFbQ?^]P[7esr0/!j#9T5Ka<>%LLGgD#6!>ru,DVS:VL'Xe*,#SeNknOc=[Pl@L-Y
%0I:A<?h6C5+*"HYEdH=>/B5a4b5kl72Sg_(V-_5LR["<B<LXu*!E\h;PcElu(19+`0BR6Zl.9GPaTQPF@Z2!uBd5q@)<*3Hbl2$i
%?NJA)=aEQ?.?+iH]G)^>g%8,i%')&;d'VuBj<@h4"Q9Rn3Q_=SAQsa,)O0faoJT<<'1&BrV<":lMNP/>^k-;d0JQOIj#;6&<fg1(
%Nh1s9qr2"sDd04g!Xf:\Eer2r$'4Xt![oXC@ZI8^FgCDY&*aV[g4NHRe?Y$J,!p%><irE^UF'h7h(*5n3ep42\%C'9C't9ppgBg;
%D&aUn3:&R-H#gqQeKP:#i5L`,kh$(sB*#=H00m,/&C`Y#&2_i?g?n"m!fRbX@qLBo\/^bVULs%>+W-+P*@=d`_nMQ"f1u-YJ^LTZ
%,H8n(!,:\;I*C-c%-&he=P"lg2_*u*h8/>MP7k*fd"q`@LGXHTh$Y>_F9QqSE@h^H!Oa$+#A>[?Cf9C4_8^7*iC65V/fFa+A6<SK
%cF+tcFcbmKhP"(<,mA$6nfcf],!WWt/db4Vn)u8=rV0pQNZ/Z(C,"\6HGL.;2)u_;oj(iAcEni_/g8efgeo-\!OLmIR$Ym)"(`nZ
%C2HM,_"&>a.(9ceHAlC!2b?tY*p,"&.kAi07u;P)b<m2#5o)S5j,7Dtia;rkaE/XD+QNI?-g@r&bghtdOL#+`dIQttgGa2>P"W#C
%3m5SW-^,FNDmIm1e3@p"_\)+$+2/EhKn9Q])S=5sV6Y5g6>ssT0G-oH*>H-h`;h_*6^Epp+j9@27=WCZdoIqGmbHaH_Q11F`@33L
%*C/*<ETQ?"J:j6cAc\]3+@(8R!QY<BLJAB'!8,!c%e;Zf-W^'=@N#Bh(ZumUFa(@S*)l+#>(MjABe*13@j4H+KK_HoUfsoA05e3,
%S64SJ2P]ID,>F.:mi&,pQ[p)<h(6[t/\&,*q\<oQ,"1&KhheAYa]5eRJ3;Dm.l?>r5X%/8_$hB_YXl\r2kO8]")RrJ(\kPoRY$ke
%N.qkp=@>4O@uuh);,0D_SGG+f-0+-qgT0m::d]'qF\4Y.RhJFR_'E:G**u?_&jVI/B?W+jmh!3%C-Psh9o.a;!,=Wo[MXgY2&PIj
%'cK_sd"\c*iGGiu_"()[k\;!T6+!2iq^?/-=THls'Au^OEB0%R8euj)5_o,P!RT\s!D7qiX@j3GGcP5P,G]D/W:#2_oahV8@$!Sq
%D@>?tWQd]4MbWpXq/M`"A7b*:p36YcSr>\HR#7=Y3^pXo,r&<SkTck&!"MajYKmOUmA;o,B3d4^1?'cGgQsX-#atuVDMfhIS]nnh
%f;R,*'PQhB).1el&HW?eg`SLI%VdbLE!g"uX3ICU/mOEu*@PHA_J[@Kd!2J(b:WSs*s0spEOBsiqdWj,92:UZ$+*(Q5WJC-/+qC:
%T6ZYro(^Z_X(5D7b1s8ToTeq?C3"IIZEF:<N7]'>R[XIe0Da6.ODY4%m56V[%%YQpNmJSaOKZcr*ORNK'c>OqR50C7#u0sMU+uk<
%C3WU\K=-^]o8*Ql4&,RYqRI[sfB@tETY&"YG&Z1nEKG20\2!"ZBnN,T^uf&VSZjL"^i?T(QluhQ%^)*8+qr$TT;8"5[CkeM[/[(5
%%)R]<Dt(\FmkF)5R]?`5FlinlD8)1#If[iKSnsap)jur1[4YpU[$')K31"Or%hD_gO">#VPikJ8Etqe&,V3f4@RKXO-84*\b1\7\
%nFGV'G_?64RAs?u[9A)qM"8.<JXQBV5e<!W9P--SqVK$U.!PDXB#%i&%Qgcm!!e9/2At1td;^slG^Z)ja46;b/q]-1iOo_a\s01n
%OC8W9:W#%((esQ2DGn%?fhBIt3)hI3_o=3^6kac]8V?(C2<,b!K'F1:()oGM+t-!`OXk_<emka$o.8uh=?!'I)1Uf_5Irc@$V'Op
%d!T[3':W^XU_G\N!_hE:?S`AMNlD+N>GgUo5*mJF/VQ_L!Gn-RQl"%>U[>I[qjdsD8t,I0P"[r9o#U('R_H)]M2Q@D+rWQS:`"#3
%a5\>93I`/2o^1!aB7M.?&!G.6?1:gF$2J>8,G.UOV#Y[_WPd\J?M..C!1HjY,Ys.j]I"0)cQ0<@!,VKA7p#RuRjf4HEtNP4A*H$s
%bhs[(D8tg%+81NPblB0H!?5Zj4=@]$!43Ti5Z3"XU+uj]#;u)(1.cQGWD@S)=_T,+dVGPC_8L^4=$hq&AiaD^cbf<b<AG/#j`j/5
%ZrL&1&Z%j;'=R!<#:RX<H7:i6)9/bU8U2n6&(X7/A(n0!2AS$+ViH?\O*mM7W;jD;gDHT^96334?nc89.3_uQH+?,3TWqGCSKIQ?
%mM/Z#l(lYLVU><S)#"6lBnt=Fol"%(XK%V_Jthf\I?WK1S2r&Y`&;9/21skR6>RJJN=6SiHK6ciJL]Tt(H"UE?o0(]BFEH'^HYVW
%HO>rj==T)P<,hi7Guf!$V?[t4*l>hqRePKMDS/)YgYO/N0Esn8D]"X(K1,5BTVLBY3uL;i)*7F`P"t::!oN(p\?*ohAC7=!>Q6gB
%7m'%p#/i8.->3OC['BIQNru6^9+lVMAL=:-nD^n>CcQi"P*KTVa>4sD$E\/'RI$/Q<+qLj$JC`kD<d^sSdV%WFSM>0EDko8q4q^^
%b;.d==\:=*3gU1J&M(_."Su+E-T:h1<GSToTA!t222Y)<G*?H#?=k+W,OCZXJQ"7_9o$M9bR5p[;,u`2*h^3?>!bO6c(7g:Ce@hj
%ouDN"6G#B>=Ag&J:g[ES5ut&=39;m+bZ>-*`3DaE<[T'!h,rWB6TTGjgk;-V1PB7kKH$`4gp22P[L%<di*`@Cd8(&-3Fcc<UrML+
%s(]0jP7`HVf4cKY=r/0>k&AF-4P;%u&2`2QrAoaFG"d=^el0NYP;GJD&Jr8S*Ju-G/dqgR+Kpt//X;uVP@M-/RtuKVVSs$#oq[-r
%*)6g6lmkd%T]n/OeO7(gY?#hLNuk-ch3PuOgl$:.2YM<hMG>D0SPX&fhOnm^?;MmT"e4rYMLo+11ThKd(#9Wg+)>@!Mu/WU7ma2r
%amM[aU(q)r,iF2dbK,.d*H7;I%^7#pVZ>uLk2=d-<Y*4F6MJQ9<j8nu2FSJ!+,h/AqX`[.iAB(/_(neF`m!u9eoPKDX1V2'iF^Dk
%[@]28go&FY#p1a*b-P;D7a3[tcoeK3da*nGX,\dnm"<2`531A]6H4sQATOt?#`?],?.-a4?&#Bja.,p,H$+,ecIFa!6P(uK:mA@G
%*b)W7E+IpUf&!CG)WD_!.dmDaOu.g?8:sm/)57J_X6k;+GR,TtV,n4JJ1"5VXN-^+Z9$bVnb3#C/Bj&%09X!nY65_LUOYd-.^[4X
%<?Eb<r1:TWNO_V26?P6o_YKVe*liqta'jR3;.Uf;/5=@AO)p4cEN%TCfE)^6VPJ(YWt@Tg`Nh8Q61;XlM]"uf=Xc_$ZXjtfk9o#!
%RtQn.A[mL\Rq?^<[D7AUm_Xsq=t`RmK52^_[/'>&AI*'O_dYR?\YujIWcDOfWUs,-6+Rr?jM<J`X+\a)G@r<[]Y\)_g,l*A^Z;sG
%2jVk_,-LVYgE&@S<q8\GF^!U'Coa?g%peeZ"?:QMQme=*!abcdD8n\D>ZuG>hu%(+`,#k$j_IHq_b>Vf_I:n:jm!]WU=Td'/I]mG
%JA]nHpKZSJ!,BC+@(nl/a6hC`0<0Q?DW`JScHCjQJs&P;;$a&p&+aXAl184Kg&R-<Eq>7l31FW:?@_<L9Hu?bDu_YgRY$]S39c>+
%_'D4RRn[AK9u1ieeh3C\=HCQtGiI+QQIK\?_9,_B:2![b<JdcoE&dHYns[/oi,B#1b62+VpY&&f7p%O+pCMWH=APB>FC6+;[6Ck8
%/J'0rY_%6q#&#iFI#LWJ)5h=8W6[H=iNrZjEkOobI6/O!(sLtE8/Eb-fcJ8!j>mBV/tdS^/PI<&-"`]U&JiL5(.n!90O*jfMhbc`
%9i:7sW/7"&>GYdE0FR*X*ck2bjC'U[4"B%c"^L2*@anI!JB%$Y:mAGB$`c:Y/0s0T2GS;B"2AZmpds9k-j]QeLH%pgGb_)t6("O?
%q9eGD#iRY97J=;"Ii*OPNF%l"#"kk.O*6qKeWL-RI=cH3^qBO2!bBS<J;Z!p33qI[eF*P&l:pFL=A;oEZJ<7Y"=@-!k2(#?-cF5=
%J0?"me8;k\nGFD52]H9W7l96Ui^'=K;%g$.Jp*]:2[S@fip&?Ar[G*I'0S]1'eEsdNCBFY#b'/"*H!p(k16:V$X(iJ$kV#_`s,!@
%R=gCn3jNdQ!("sG0=r1`!TdN9)EEGEH7/irX-*lJ^d>9PTTI[2&7D_$aeWNur'J`O'_Kh/d(#?b(fPDFM^EE%7`P*&qlq:/+QqZ%
%V#*@?CDsFNj["*a9dQr;54`OLYDYDgWUAd*arh$saqq&2W-JFXTg<;0a\+nF5C/^84E:f2,Y8h&ZF#F0ki3Nu29!)6PMA;$LW4q`
%SmrAp]3Nd3Y:+)[irt*l5kpK4NtULW%3*-(i?e"V,A%^tP\8g<s*V?EnWV,)6]`olBTX`i.?!d<^c^B^c,D08DDY1?H)6;Ng)(<H
%gdMLSjhaV.=:_X[d@c6u0I)U>WJ%WjoT27#6>,@r/@t(t#&T=%-d`8!V1NfW!]]&_PN9<l-\iE`<OI%kQ-h-_EHMCd=rd4V%0W?;
%Me"gGH=G1T;6j([nrn7!J57Z.L"<#]280^]a@VboKQ=?\VYK/Ra8Bg'W>&ueBr)gsWaCX8*(5=pZP+.jd,aAUYnj"]q3f!(j@PbL
%A5DL'S9Y-j]*.I+HtUJS2V`qKYeW=AA,=<KGP[;N=\\;2:E)2_0Ba)_-i[F*EtX8Ggn!u[:t+Q+B$K5V+a.aNPA\p@+nMdfl%l3@
%GZ<8QfdtGP^s#?=2;4%jh<nd`M@]@AUfY,e0b\(or;^FhRe5W4(X>H&-IL!_5s\)F\_[DJPC=DiMqX]QX/K]T!m+MX:mD,s%5GU(
%lW&45aJ`6"X+a-5.h,9QK%Sg$eJN_E/G@4'QP&L#8eNc[?tL`=lLYF&\Ei-GJ[[^oT6^$OYA+IR1KQ/ujW343S@M?D-ncN:oBB@K
%>0,\Y+(A)f$.>AV%dSM#=VS77\r;8\Of3F,q%+'U*&I;3$rGL$]%D;?N#^%dT\qL0Q[\qbhE/f?iT5^..e.hc7Eo_%P!KSAUHta[
%l+][gW/"t2=/8C+0sr:pinBkfV?#j[%a]G\)/IZB'kjaq']a%>>R&#_+>l]SIZN)`NPa=M"a-bL1Fa$1GV$jG'bHSjTL=.H!u7>=
%&3'i4Us,pZL<*)7!WO?Ip=PpPR'$iVDatSd_m-S<6QKgLgB]G&1uABl]qF%Q#i@HD+S^*T-#K5BnCF?*#Y3^FR%.7_GX.[L\&CUL
%LruS,LQlq-QYB&.^Y[3(`hYJM.^t+87=$Oa??cjX8t)K8B<WlX`ad+om,lYOk)3\:`u"ZSFCp5s1_3Z@_IXI\bp%8feX][g)#=dM
%RUVuQ1q_Z/<gs433_:9j1<gZ2Eqs77p+3*&95[ZmUo1^ONTT[0dbI)ZM9DX5ID[pHFT5K(5cWgA\Irk3WAPD>Bi3n+_+9hi^%\8_
%c[jAT3Cj/H,^Q8K`I^uF(:g*"=6cg(?IAgDom*g0f4(/2h7+^T]Ti\<g(DgV$D@0?->sbm(p48@Nn(8&J[o5*#t)Nq:b`'kf/HmQ
%,WEEE;^#+:7$c1o#So7:,d,rJ69D,EkK7ZG:^mFsW.1sb/2p?L>QRC%Hdk!i1a@)Bb"W$4e.I@ODTOE@A0`IIP2t88($n]1ffWgP
%W"^(n")nBL_r6cP"(7BllMs3fkQ/[[#TkmeX<6"lZ;'h"48[ui7V2s&4*DHYab.E]TWse*68=;`h_Y[JZMjm)g(]q]d-Jl-0n:.:
%#2^*DILhO$ds-FAb7P-1%4<MZY47E9TBOLW4^-\tGu2s\DK"t?3K;30>L)=@:o-otNj>t\q?9R:l<2e1Cb1uYG(qhC3k=hK+H4BB
%n7;#,$?-Q#6qQdO3GQCYMNZUegZ-6ka=1&7>GP8=Oa??pBi&_e.#lUfhFk3XjE\3YGm4_6UfB3s'(oHQ3#7H"<HD\c1I@*ISf\r4
%`K./po'=h1,!]#SF..[+^=i[5=tO0mga'Z)YY'un_n=];E)%2'HF=&mEhcHgjtb^f;0`h-Go;VD!0aLE1=@$?FKu1qC,hDF;_`j,
%2\ME%!=t[W9_,Vdd"jG2`qE#q/A0_>9B>'e\bEmO6k"0%b`_aG&:pUN.[\m\3Gh2N,EeP&2P9!^8Z-9Ac&N6p^)G5!SED@;1H;lS
%k6R!0,An79TJtpt=V8iO,hUEC3bM)I$frKr;p>Ws\5AQ3:;PIa]K;ENB&N%V.Eg)T\YZ:)Q202rfQc=t0c3g%7aTNb-B,VkL?RX+
%`p?Y2]NTZ5i/;&A7DU__%pq^2l4!_98S.*=@MEEJUa^aA`g[(>I(lnO)6<n$`'aS1iCL3=E1'iO,")8'o/MTa@>C_8>nXK9@`;Rl
%/`qk^\CB`s5=$rWjF.7frP("'8ajCe^EQ2R@JX=KH'@A'URtUdP"nDIAFg("ZQLK(lis8XPgbl2Wk'>c#XZR;=@J0"/?-ZO,Bj:=
%csJbX(Y]Ku8b_FND_&mgBGc@WkdiSp)hA3*b!I=A[q4oY%;unEc;bPa506=uK)1QMmD=H'#?=oXa]m.Bnc@flMo>"9Tn*lY)HPrI
%iuE?t,\T_M0/&0),7Z/ckQXZhN;Y>e?YB4-,7[;9M#_Q(1MeYP;7@C$)()3^(_*3bMFeEFW2QL;EHpcr0JJ5"cB\hs.+;7^[Ve+"
%5b0i-l,s*rh1eoc_;4*P^\6YP$IB4)!$gpG!1TsN1]]>@1JFO-_*#5$gBgCTBmE0QCYs]j5U!jp8'%(f5UQOb4TB8-N9AFu><jmb
%@tJ(;[Ra5U5]87V$BhJ&cgaJb_`ItdkrZcG5&`HCf_&gcMur(h!5jgaD4=J/MFD.'acT/u_)?a;VOVcW1MWiHcI;$^$jK72+E93>
%+d`u>THj!OP?sCBA[D(c99+?'=mE;W1rB>r1)U[S3,EpENATiP'!Z:lnGm98n`DL&?m2i^TCaKOVpKV4+Rhp.2Kh6N2eS)l#S,'2
%LB*M@]#RB)4"*/K\S?f%I$1a*pE=a<XuOGC.g9"u(<o'"lZ+gtP7[bVFp*BK'"U;5>Ofs,fH\OLS\j+iak5MXB,a\#j!8[&lHs^&
%!6;4Y?<dK!"$-XMc_QNJ=7:[iYfB=iLs$hg$c7.6""$AL7Yk_O`be-Sn3"K1]F&(^:FSh2"Meat5"Y?$UMd[b-G5lmef8lc].2iI
%-W&7X4Fi*I#gU+PV,kH,E?aC]quCML$UM?eni`?V#cS8,nA*JD'N>P^?qM]k"u-AkOtmA^Wh]-^Upk6Ii!@CVib>]WHA"O#Nfuq>
%al`g#&eR`.d11@6S:,'J/OoEH=P'laoEZq34P,<K77<TF(MRNhh$;47:)a%W#BdUM%$GrSjXISnV,%sV&D5#`5q<Q[P%[M18_sN1
%mh+K1+h80#U5[6fP8V$iQD/"\3s/=C>,hH=bq]?Q(ZG$)$TkC`_".mL%HIF5@udFc-QbC[Qi1Zk(JOpgAe&MXoa^.9H>/KH+L7o?
%NbA3t$.9/UE5e2?k6$6HJr7pp&2\uWRPbYLU_6#TLQPU>XMSO)OqSS*r'cW.dtAUQ!@bi9F`%%;.cZOdbDd%PaZg(RG:lUMYL6Lh
%)4iq2cS-9u"CNd<B>B\\U9>/r#rAb0V#UVC!04B%iBWXPI_;ca,Ian2<=slDLQePhNgd!$&NOFB,RP/so)@SLAZGfsB+g)1A_EB(
%jdCl:5]pcB82Z7A@AY3rooK2)%Nbh<'\Yf3hH2+i)T7M!:q<)M*(kE49U<Huq2rk/1l=95!]9@/%X[.A?DUmmFAif'bo`"s&i=,2
%eHfk;!s;1U1iB@Z@8'E^a>:1Z"V^"^Y%3A_ZEPn]["i+@_J\C8m)uf8Xp/BiXaZ"u-MaIWRh;E?oCJq>_Ia:7]OiUM<ARHZmo0a)
%6S9!Xah?dh<fgHcAO#HB[Qt&X<p@=6Gu"T'[PPegh'#>FU*0`12$hU\<'?X#euDT$KE=KN'q"ZL1dfJcXt#Op#NB^$5LZQX[B'qC
%NPh;igN/`(,h,Ll5j128)Jf\SpOfSsdChXF.+nB-C0/iDM2nkmhR::qY4BEqM-cB%`_X>LJ>=ec?Nq`j>:h"&W8KZI:9,M-;k"na
%B;T1uMWYn^"rZOG`l)UE)j5KGWr^[5V7=WR"],KqYZOMgfr<&AlJ6Eq+%a:,^R<#+E:]Qf$k:H$1uh9gV=NCsmUV1.h!CeIJQo>L
%OY72+e.569k:t=[Kb2\[M.h_jqNE3A&W7DA$qrWn+]U,k8fR\7H/)eYal/Vb:h?Lc/NB-+>Hn8WcTD3PZ;LC>6G=V3MM)7>a%9%D
%!7k0<4W0tLSF%U-g`g9PR`KGY/mB"R0lrc1nG,,/^c='<H1[0&$"&p&DmAo9WNi&0cF-*8njWF:q&%5"U)\]infTP0r;"E5B4S/o
%&sdN-B'jkEc`XP=bEf!jYaf)@TJ/;f1K!q4V/]+i3c,0'L!$Z\kW=<X!<e-uU[H.&+jO5@dFfjh8n&1WS$?@Q-):]YdC90DIV*.d
%1u8Uj4=E5*p3K!p&09\k?3[bVU]SFqK"'NFNCl)`)mu[XRflIFiJabYSN&$:X'27L'TL>;7@JV0/?\Q+3T6YOjJ,_\(U2rMnh)6;
%LRS&li-TS,j/Apr#25G505Z?;$Ct&R`&9`%cu@^95elP?%66[,9WZDoi)_.W%kFM_0K`kn5;tM2J?mE">'b^&jDMEcrWFRZJ!eR8
%X9[/T,bs\TDSfs$e@!/JZ?kK!*OO7f#JcKfaf'Z+clb^ZYIJ"rb.$MQ<P9+E3lZ&rLfNEj<RMo<;TMuZkFJoI!="3J`iKTdU!Ta8
%RK(&8ZN7Ep*:gBAgM<7'=K:oB"3a\bO];SMh)Mec*Q]2Eb)tbm)sgI4d)OklOUX:=X+J\3Rl90r+:W1bXfO"\!KJP+3>$,);J0M-
%D8Z$L<3.ES?8[S01#uOsgE78Do:$H>A.r7%P'U@jiN#e.Oa:-"_(DIag"B\>5p:kD7PDP<,aP7d=gPRn`G-/Tph4ppOJ=6SUV!(B
%<Ep<\Gs?$bSEbA<I9ST.oC]Yh5,A7=p_1b\*LVFfOb@6P$Jd3,mIenYFL<lbYehgE58)]Xqc^)=J-f&tk#b.+3^>mN1C&HA$PF0!
%mP\NX&i2:a0INn>5i0Zbd[*EhP*rE#&cc_Z92&]cnN@#c%+6nePmPm/Pa!bAJ9<)F#4%s'+\eC6J0Ws+4VOX-lHD@-R^eq\\@lF?
%0JXl'N1WVs#TmpAZb.P.DhM[t5_`f(/>ehP!2.]j,3gR\m8^,kiNT<R#=rmZQQq*_%*=amjJ.[q4YUOh"]I=s`;uX&V>u;P(3)7_
%;PPn2)TN:3#!cV18%bJfS@%Qa;U1ZE?t.=m(l.X[XMPPlqrTI`H'"tS-IktQT%UfbO?>I/Pr.DE8RP-'SL90)1Jc=B!G<$c#dnfP
%*IrMFB;V6I_5&P!1@6W(QDF=$:L@HUDjNjTlNHEKfNjRbaG:$+EWbB5Y$Lf[2[WlOD4@7<SqZ*8Xd4o-W?!upN>8*gZKQ+=%Ea"e
%Ki(E9;#j&P_],p6FdIg&Q6eD42Ucq<lbdeLD+N*c8oc3?/K9)Fq5GV=;aMB0R+ZkYfq&lA/tc#arnFl7f*m6POlDfF'HhODJ9J@K
%P(2DZ833[p#P_ojAHkHhRW8_m_GgP\YLLpc6lMXF-2Vj9#*NL,8YL1/>jZKZ7&HLVYom[O@bsr6:[j=2Fn_OQ.Lc+Ji^T+Oc4YXG
%b*,@'/6/0U,fanh7Wroj[%+BD!.E>`#h'[(HI22^9+Y\GZC@.OVbW>>G-VIRHiV5e)pEZ*qZd<<nr&gUbm.(.0Yt(p3Hc)([oBj,
%XD5F_j@V]R0_GeU7-@TYQBj>cop':uFscm8"t38/'fT0!"_=CGc(Rlo5_<Ic2ZfkY%0Im-$,C"Afu#"rU7OtQajq_/GZSM^>_(m&
%5VBSnX5EtKmW)j/.k7'^&`Zh<BKO3!1!$!QN?iemQrNZJ-3TDh#u;4tdj@MKThr#-/VGO$<<SXH5Y8Ng;"';K7R$UBnXF9-6q+J7
%!\DGs8L%joF\]1/LiA$)X>[9#H\@_jI6k8XJp8,#<^04uJ56L_n1+5VqZuU)8Q/aNAp_<:BOZ`u@4&]9"efAK?Gr([C.;^LaI+#a
%/]iC$Lb4(+%-[7m5IACuol@McA5"7n69S`/9=gZk&dsC&MCRt$Q?@f@+gdEF@KWu!(I0`@U#W#-&mUe>dr#$<aUg2)e0ld>Dd8[)
%)rJSB#qTefCGptQ2dFRn0UaW$i8?2h[f<Xr`oH/BW351JM4s%I=N,tZF&j6*D1Ri<J-G7Ds4!Bd/Re&]"<miQ>U0:e$+/"A8JshM
%X\B=\`3]f=qf=3m6'?D%75N)DGQVVnA?2MfTpA2qLot1KIUGdo4PjZm:RHA,Pq.Ig0Tpmij),VPq+W_E(Dus&!#f!"`"l^X!Es"I
%5]Y*m\Z2\kR(,ut>_qU->IAJgT-5Et?dFJVj5$:Q:!!c<jY`9M,s2%bhu?kDgAAA+#;^=a<&B"R4TDmRod6BjM&*+*NdW2`?P1:]
%P#d`k&_i8P,`uA8&R>WikR[rj2@>UF(f*JIeg&*_n/!j[$g*mV(F61n"e\qo+%l]iLen:KQ5,A]UI5o0i5lYnkd*F<re%c3UcfsJ
%L5G3&4bH7]<6B*r=,C8u*[PaNb(s49@L$@3a;Tb0'd"FSX[/>?fpj`fE#F=':7i,l3bZaMN#k848';+);:$R_m.[/joh(R&_qQA*
%naf;OWA(rZGo`Dg+posFNtd<\-j4[k3".FVNtbV/N_LR0#o\LS2J_4^X_*@CR^?m>dOXpbNRGsY0'0$&<^mpmE&KN"SL^kqD&8&k
%k5ns%bR1E9MIJ4%'A1=iGHs`Ld+,7F"tFOjj+Y-qCabcnH8h0MaX3CI0Bgun30p4$-1k]RkR3bO39>.c'EiQ7THDpUT@IhfoR-+G
%ES:AJAefgag1]Mm/snUaeJ1Aq<5*]WXl^3P.tLul.RcXL0#F]']L5F;9$YfZHB'si^,p8[IY+W6.IH;W?]N:+:ua$S3U2d.djRO<
%qa>2A\7HX=n1Gn<##j9Z,*5C^;Q%855__fQFN1g:@"oiX24ci6;g_CHIunTKgOYTBQPi,;/AME32ANNle4Dg<8B7(U7u\X,iE7X!
%c<Prrq/m6M<G+-Ifj%(oBTXP/'4^)C$/@A=JtZLBW7=?O4CaN%-E13_l41?S#:qFC@;*)Cr0T-pCln277.kpO8Y(tL_/`!U6G1_b
%O[IKk'*)=F)#UK-<b7OEUp"sAH/o_t-AJ0GI:V5/#"I@HD6<sX2];(:3&+(i'D*H-i8CCAk-$ftpT+8IL=1co/gA>I[&b>F2j7_#
%cCZM?"PGkrCN4<eo6Oob$$J/TAJdIQ<-dlXhuO<e_q1KQ,gL&(-&-(iW/>1X\j<)XM7UucK2>.)Y[XnVRm0Dj;\1-P5E[$H8aG=d
%>EBR6Ibe"eXJi]j<kE4+7H?!X"lg2:D<*6Pb1kjCgG$n.DC?)01'8KalGV;f(It4XR4j))Q]1/q:\#E)bkF]]4?())7*(T2`q?Jf
%]thkTIie&9:0K[A5<77gVIHWKqT[VK_^I6LU_g#24>,!eMGZLjj93_A,]_,).)QZX(aTSnTTE<PRDhKPTB"-'_mn-lEmYLl79.S\
%61Z@F&/+8AWB(?JfW)*k\>"9n!OT(n&='X?i!AUYB#WnslWOC_iL*:F=.BOcV+/d<<jX(.Ng^NA%-.3@-Hm>Z.%0kgh'bRgaR*PK
%<R3/\cYQH][7F6M#g;s)3ab?e-_$a+&`k[;31OP)8Ks;d8b;lA$-/-GS=(/<4AWI%2*66s<Lq549MfBD`$r@eG&A&"O_q>j_r)#c
%)0*l\j)Ej7g%E-NUiGN0?::/E(Jo^tfCBDP18es-H5d%-UkBGjQ:7Ps+!#'am<D+Y!neUPPAUMg75IqA)H][Jf$m<-EKHY!;OI8m
%MXg:J#?[R\U5:;/oBU'M:R@%]Bmt><:"L1fJ5MWu(sHfiU=c:,Sfc1_NQ]lIiaA3#OTJkaN,U:O*$rfel:8i*G$.6LO.U8dcg8,7
%QmFPs,'_8M^R\tq2BpYl'S.&Pj0$JGLqnn-56u@M6>2jdOO&j[X'h\23q>D17\)15VD_od7QLda=#09[/Lqm(-<%44U]GQU.7mj!
%&JUe#AV:@)"tbL?k$bD&,F&L9SUAm[kE`@\E<%f\eYji(qZ0!G"i8>YBA7&g''&mc7_dBK-SbuR>YCOmGsEM2?$Qt1T=9e,;,cFr
%gQ,):NR\F?+I9>ZYSlL+F#<G]Shl-b9lB^$Oaet9diPJ=.*%^p`V.s$PXOlHYn(DU#tM(L0jnQ+U<(>ak;?ohWRJ?LddjE]Xjd8W
%]h,Yk..$X3Oor.HRH.eX9N\1Y2FQg;S__+FSaF_ReoV:X#"UVd8gUs&NJ-V7jM5irK$SBK,8JNO"^uZ*3;@<`5&e/27k=4p7U2h2
%ctB`9r[X-F=@'L8ee&1Hc)[gKZI&(QN8cB>@`--8Uc>>b4Foc1cihHY$YFL2BHq?q:.)W-j,nu1J2hp-jW#7sCR%94*1eT\j._O_
%bjUYm63@^+AElChGpO%lS6)4i0f/.F#\>aQs"KrO:f=IWaN/&ZUNlM%Hs]_NYbEDP+j4Il;!r>HlC9k^FNKZ"9Y$>]*`4(?Ln=Wn
%Q"QGV]\qi?eMALU)k9ICr$u[^bK,eHO>]/^[u7S'TW>X?VcPAsfbFDWVF1iPKiM4X"feO1oRO*A;-usMs)UndXX2(!aNt&K5oqcM
%Bck[jMl%Pi9>#s_j*@-Ym-.BNZ$$,8rZ*:B&Hcgp>#?/?V1YkMNOT=GP%uk7XG#pd+/mfM&u^VSio0\$7uP<TJe*b(X0mnnJm%m4
%'\)39g"pt)nJ#Ao`G-9BPGBK?^].u77OO!g,aRNr#-<fSdRlR:&ZQW9YM,;$V)iHEEeEjTRBE-499MY`ST&U%6'Br+g?g/tKn0C'
%#`7u..$7DE,,6J4?AFQ"%*ftm<c+3Mr?CbW,<u\a,sNZBmD_PMj2F(#A5Qh@_aH'FI1`Lbj%2(5!.QT"*5b;k`G-Z-B6'$=5trS[
%ig;G-*6'('D"8c).+h?>YGN'tgt6ql]EOX4iB"#qW'sEYT#o(>Tg?/9YO]K.hh@9<&^LWT8X-h_2.TT%n>U(A?K7ChCpT1A1Z7:,
%\8KP]#gB;rRE#jVFT[G&_$9-qB5LTS:>RH[4m'ltk"WPi\S0L7`#.-^GC,8FEZ3HM3%=Gj7m.LAQ=lS?'%a<#O.tl3/PUkio(]VI
%Vp2:E!9G*:<MT%e20*#281"@)0gNpQ'hNjZ2"@aE\\#i/(b[Wq$Hf.13_X%8,I]D3O[48QL=4;m'3fm7=?3"Z!NL.'6^0G4_Xr'r
%_H8(Ooa#pM..5Hnb&#L@&gppWFi_t+$NM4^/`!oUY3KT.b!b:"Q_.KCJqPq^'1K5QNr4m(%d,^oF;d(f:'PnMj!)WRp5f]\CI`>o
%'^U9`9Ph=/96a$>DI@Dr1Lk>:>R;*AE"=nb`3C"W3K%$<,(jK>\&_hs1gtFKA)r50ln!eJKmPCQ.;=W63(QmW3g2[b3g<a]\gka5
%-\04C9Q4\aen66Yh#'o*L,Vmg2rnJ;&Z^[4LWU:KlI6r_NY-Xk(pgj%ESD`s?dciceV2ZhGB\in@ql;7ZA"'A^"SRoJrt0MN_>#9
%6DGc+&KkEIc\r):7Kj>S:1^^S!DMLT]M'(\Ak7Q$QCFk(5b(-G5OO$707c;U[Ka$.,_O%%eoD$-<$G:rp'pj%<Tn[*=r<BU*&+hI
%!YG;A88Yp\>C;=+5E,,R3;%#mL2R&G>3M>YgcW?b)Vc3MB3qF9S@Q;'nF"sW(GF_Uaj49K+-2)GW@oM\`NW/,k1P`j?SitC=P!:h
%L6DD$$UY+sj3D*g&d94tn)ofq_-lE-89*<.jC:0a,$Mk#9h(odP8j`89X2D!iPgF/Kk*D,k9i62Y=;I][jru(Jg,C6/lp"lb$i?_
%ORnC?96ua;jO"o-[dag]O+q_';9ms%!HQ],V"C9h&`!67MYWAP'NL>N&e,p8r"ui7E=\878(;PdCfBE.k4`8.7S[Hg0JhbOL(;'n
%`K;][PSCSLL4$?o?c&<K)tG&$6.nhfb]TCM*aZMHh;I3_P+$o-oYKa.e,mnoj=,:2"I.'2A=>krSq,u*8IQ_e"Z0J-&R.'IQ1Y35
%=D2[rMUV@ATP=6mibcbs&Ff)([R4-^0LMgTU<gFi>R37HOb0KS1uETjbfW7#,JQ!$cjP95=4,]rnfgFq&<Xn.]YlB'+R1roE#`tq
%$cAtSFenO19nc"3L/eck*Z`$.!O+"Q>XY.LcK+GTG`le3`GA]uoCl^2K^!(\O[L"HSf@XJRfd/R_PE13cUEfdQFUZs*m2[DZ&I7Q
%#nl)38I]neW5a%c)pf;A"q;UVUHAg_]+.pqOu&_S%6ab>7A\%QRo-Ff<BR?5b>(AB&X[PDL.Q)&X4:N#$$n>sG^E+`&._QA=X-Dn
%X.p81A:un(BmI[%hag.sq(;L:!9%W:'^MG%:_me,NiqVl;;"Ci5DEm+/%Q4W'S'<kfA+QS9I2\^RDfC]JiJp'U%q9F+=[tlA'A)\
%kWM/;eL-:Or[<JX'bnF\AN6be3f(9Q<5Do%7>5i@KDqNo;j2b;G09n"1)**+j%>?@Ku?,=o08@bJKYu"[[]:sN,MF!%O<(maB`H^
%,h[S4_i.+D#)1>@j,C.VjP[n.aFtoXo7M<fY<j&@XT;L"cSY7%U9b=KiZ9W`+"^r$.O$,p_&PO.Dtb)\ZjFa.JPCA:1E00?BJiR@
%>2>,G3FFNE6:Yl]2b?0R+h!c5aRmZo/D1+5`[V-Z$_q)BR>a_,ZkG8$Z_T@M;Gq"8.F9YM&0)`k2kG"O$giVr=gJYR`$#8OhEd0Q
%a9Gsl0PbiFJn5uY!ul%KA)8jUQXZEcPSZoq'P!X"J\I$I2'W5rb(.SKUC<t!l(>icAi?bYLR&ok5Q(CcmA"135PjWq^]3EZZA.^K
%P'RkR@s_kXN!3/.U7"G%2`#Q)0j-.#8J5VdZ<\\M50]U"6Abt7j@IU*\Rat6-Y#Ut;G4k<kq0FdI$g(m!Gt]kk[u['.I0f.ZCTM0
%,Xr/?QFEuY8"$g"U9E9n2Nn01I,?ff4YB2mT5BA(&3qrXa([p^M*0@-@i.2&\>Uo)BVudYTXVt6Onjo1/n(!o>`+Uil?;dU%*;I(
%Ynib1nD"0P"O,YqoGq^Z6@_`;$qtO19@^-&_#-k^UFG!(KL@7;jK@RC*ge2\7.c&D3LJWTTI#gE=]ne?-JN-s\h+B.;UoKAFOllr
%#lL6VP:MPTHW@XO^.*^?]r6`%P9bSq=3H2?<G!&t0Y7+')G(Y")b:uWpp_J:a?^Pp)>^moghR$o3CE#PkO[c=#=]ZGA^=A<JWJ*[
%Gk"ol8kEeGl=TH$r7\fukY$iC!+%h4(Xt4W5bn!l@dB?7P#5g/jsu$LM+]0&-OP,bXeABeVa#^b+JI1V1U<>iM&+Pi0a,7Y%]+5M
%U+C"jneia;VP6a?aWIUtA>EfIJn16n^E=2TL'b+-q976ZT`1VQF]#a\CP_%5b$q-DS;ZYtAt\QNq?!i\*LYYQ\4Xr#Qsotj'#0$t
%d5^pkF5q?^=TX5PeUn&]dN+0<6Fi5eg1q&l>fNbQ!A=(tKGP41k:-Ifq%88IrgB5HE6i)`(`@u21?Y&=B4ZTU=94jKNOU1Po.u/k
%?\3hS'k-[9W%QOoK*GFU"+u-_SVEcdkJ15>;6'/G:EiS?bbK4L84_I34MJr)_fT?'\(0S#9NE_.AjP-sK*BLKa8d+c`jV[1Q.PO;
%8e>lSPcJ6CF*Q:jP?O=oU9%fN2;^mXknd&cAcX23iaCaH0!gsF1Pf&s:mE/ec!OODb.Ll&Pn_thAu_UO_h$K6Mn3>+b9UK=(0]=#
%Z#Pl"L$S!REFUb3Pf@2>a1,;TLWXio,ZP?m.[B,I?00O+*%.`s$]]HI7uPLJJij1'CWcd.,f_@?"+#loEDdt/]ieShb[%aS0J?\=
%0.MH;E7<g2BKj9=_'YX&M?a0U>hA&K*'^?Mc6G*i(b\#10ajNB;t8K/5%SW_2Lis\XQ`OdL.?:,+Bt4>fpi&2cS&LZ=#PTifi=,"
%3R!p-/H>n.FYQGKDN5=2V%aEY@WiMqp"O;p#-o6Rklh[C)Qc6%5;U>n("NW]"gbQ6YK";Y=-Mr2m[X@X_g)i%"VJ02QfL`P`/m:*
%L-m<iU-PBj$-e.@+\!^0b-+TBX]9.\T.smY-@&k]rjmINmX86=<`SZB>hh?e*,#F!H&pg"[DX^6D`7.:=jr.2'1XaK`E<'DZ@tI%
%%$:!t5,68S@/#RjfAgkts''b'QbBrh6a>C64iO<h!<E\:ld_>gCG5rPLi/b(+5&D*)E(#cC$5&li8.OT,aNOoPADg'`;DV#dJ-0c
%</jW!f8t4omP>sBc5dm;,^Bmm4t35m'h"OMQk=([hAWN5(:L.TWM55+-QCS\1O_Gj^rKEb^i3!fJDl2GS8Xu2lOduSM#W53OHJQo
%(@PkdPitHYXQsl!SB2oJ9^B]Enk&mB;t8^U9+02`Z@EMAEom:]Sm3k1NFb`=%4Xa%4t&>V(p"A*3\hd4cJs#=CTEf$<>F]326]>S
%(#U(g^CebCGm$Bn[fGI^*gd=i!Fp!KfX9Ik1+(RN!PB386Qju:"LETZ[G!hEg(D5(\d2i0!hb?C\.JD!"G`>HiJnNub8g(g":L!/
%CA][^-7Ab\-uIK;ZLA-mKKrA$26AmSIalWC!"91"*0k!g?NBFkQ"%iCqGG)*U+k,ghQ+4aV8aN4cLs[`CZJUF]G^8MOD;u>`>p:-
%8,jDo\ng3HWOE>\%kqa12^;s4jMj(Lo>p8%WgaFZX=!Mt5fAXdq5E+Inc90f2ffuEAOb50<AW@El'd&e]LSO!S_`##:3^kZd9X:b
%#,n1$5iuhNc<Ku(W2=+sll9:].;XULbk%UU_S8DUF5hiD7)rNLkc0dhgamJkG@>M,*tUej59)N,nRY>u\^%?b$jpNhiZ=Rcd,W9[
%+a4RBaQ9'QriL`@f7ea;#"k71dZFrGC@S@fFBR:?GsThP@)S1>H\/ut$pPXt@%2^2Y3eUN$pDD'P.U,grlfe&MUO/E_jW0T=lVDS
%5DbFmAHHO*DB%oHL?Yjt8Z]kPk.b2#Cma0rBC%qlreOTXgm3jeAF_P"k&aEq5It@RPF4Cu)X"bQR<!FGD=KCP\#4"Pop_2LFnb)>
%^tR)ANE:u*CPtcR/9.)G)06k1*<']0$tjG&RB7k.:X;=qT%"]f[nVol@Jl"g"1`"$/t8pSQZH<5e%6M=0lgI0e8jp=RnJ9BQ8bfb
%6(D):h/_rJ@]n:.HjgVYUe,Ac_+:qqR9lRJ;@M\oh:q[Dj:,Wh^d6[Q4tkt$h#LrnKSbR<.U!DUE-3\<]YH]oU<q`N%,eYO-Ts-J
%M.p&F]+V-LAF3Ou^KW,=++1>6TcVqn[$s&s+UoUp46-Xj9$8#TH>EH(2W]StFc3/kr$JJZFOPpG(qgh2prmWhO&8'_*luUF0?VeD
%`N!WB[6<hJCsdBi];l"J"T'o=231k0Y&<'+DI$>.gT/\T3B<A$A1M6M=t!!.X?NO':.SBNMJGJf8)d'/-W*,[?8#dT>!hAG)p_RL
%`W_j%IK@m8Xc>adB;$#H,O-HTX.@0.Y``9t]\$DM4:L$l#%\L_M3rX-ZC@YL2l)_^Tq`>cGd3ee^m(S4)/6YUI&&Nr>)s2lWa@_+
%!?a<MIVgid1<g<g^*sQ7!CpK!;L@=S^';^8j*9Z(V6"%(Cu/tCD@Y+k2UfJ:'Wb.L&p$a5m2j`1V*8OeYiQ$J:@02.=94.:D3]/V
%jt6$*aHRnG`<3`HU=1S?1CB5EWhWST:=G+9'mNd*%eTpXr6\5@!!:h;7ImKpLLnOQ/(0=12S':8)c__T]c=a+#D(W*%]d?gOR+G$
%94a[61-p:9Lqg*6RuEObHJ?^cE=3"*bg4.6)%<<dX'DI$*be3G<H%<*=)Jf6>k"Ljji1,,fd(Fp-s*H=Wa=R]DOukJP/S:ac(#/]
%3!FQ^TtAdk!T'E=L-GZB)=,g'.M9P9-4AK@gejG"@ZuMB#Jd2:I<CZ@"'*;VSYhd(VRdbJV',c<4Af*U$uO,\Xb=,bbLLX9:9tGW
%8@g;N>p4r8hm<j:?k]iNAXsm#0>4_+:r^kAd\':EAegWTfp[pjC8,R^N/Zf?Tpuk6p"<nqkF=HH2fV_oFX'1q\8nT?8Q\I6P_(qd
%7iM;e_K(B)Q:Ku`X2LrLrn65LWI^L:E-"%BED5q9n&"?XW8XV1,7\f+0ht[;gfn+:bnF(C_D1YE,tG&8!4J@g4$S7qdVQ+J!@ZM9
%*M;^*ai*cgHeL.053Q,5J?U7g9Iq\2^jcMoDmU,CXocXDM'!SP>:am[/`1(26WIEN79NLg3"j1\jlW._2@AcG$F,=T/hYU>Wl;iD
%c@b$s8KK*WjlLH+\4`M-*F4^u/F%(i#:PjohC\MiD]C?\p,rVhK)5\Hl$8W,N*N>2(SRk/!:Lknf:/J[4^[@B_Kb7fSMFP!T6hsi
%b:jS#egNEroQjGs^nN=q(E7JCMQ8HOaN0Uc5<^'?+ZQoa_hXWH3k./tVkA4_#sPprh7l$i8!rPCJJ9-d>!u!gIFK)J]*?1??Cggu
%(m\[5[)B<f8O,3^J&Kd>%coWO_s87ORBMQA3Ce(2j=9Bk*k@jB>pSgtB0":/5rLngjrJq@`k^5!96nKn:,Ds_d^dmYf*Slf@rT7a
%mOB(mp"Ck>XWD!2O:^OKgN)aFnr1)Kmt$/t4:\_<CHLC^Qn5<d*pYe;A,tO"c_V^ZmB+dKDulPoZ)s(<O62ZQQK%=>43lSt/hRW1
%71'#tb*GKLEKCQ-K'AMPF0j$H<8XQiGW.R)funbjT6C5TL5*e5dGsEd,T'QM;&ttSj:"Vg&LMtZn'LhW\_>bf`_80B]8'T\r76lj
%,<%kcOdbZN*:0I7i4pdU5f?[-O(mD2Gj8nNaqd8<S+1;o'*&a&(EbYC!39"(aPSq-eMCgT\PLQ#c-;F68Butl`\3&42?btS1-f2_
%1mq*YjA()CJ=[6;C)=]rT'fTd!;YUT?L.&'O@ukADgG<E*'C'C?oWbkKFC&B,m.]+_"`O'8K7(TB@^4^#Xk`sB,;*LFOXZMh/6$Q
%8tTUWlpVOo:ZiNKV6Z)(NaG2>"PY\kI1Gmu:n!tq)(V8]6BZB]orJ(<]lO9dbaP185^Z%cO:p=nIZmVgJ1?Xk]A`21O!F`e>_emK
%e^Z_iCbJ7O<KEP;jYDkNq+6'#mMMp)JT=#+]p?0&L)S1eX7=IXW^mdKWO("sEE7Z;c0-+R1EkCtgj'raG#(3r+GCm;b36K:99bKi
%b`E(BLKiri'Pcnp*L9SH76$8dS^O(%]kIZ)Bg(/Ylk7O<ok7VaB#-=ao4,@l`3lHq^^ZXORZfQOE]9XNPIX_!oFLa?hC">b3<g@%
%)a5oSe[bBd,qd)-jlc6F7PLGsWu"coOW(LOo-%as>K/;d,Iu)VQ`@P;/3QN.*?(T>Oe>8.b]2l]!t9p<)4)C&]FEWlkfCcX3Y9&e
%,<6BZ'E<'N/Tk&0)uFjcpRrVQ4IBhSH>^`(l#>bcX.?&!4ZTm(&Ct^R9"Mkn^oOSg?2MYX(de1\iAMe2!J9YD:aKJ0T9NFZ5fVFW
%b"R\:KL$>\k\*_X[KW$f>_h*]==e@OoV%(o=3ea;Vdeem;Cd@%:"8@5!"Qj-=^RQDE;JRV0&?ls))1OcH>,-"=srk"_ZpYkaZ0@I
%,ME4\QtETNpTQ]^NmoX"cL(LRn(:SO>WEj]qZIJWA&pg8M;Z*DPgah<4OR:u!7<*DanttqNo1q2qV'Wn]Q>no#9dAq),j%@kRPld
%`#Jb0jaBZF*L<j(h0Vk?OupJ7rMK(RkSOF[V1Y;lQ]Wi)UidDBkAU2tY&i*#auu.;J:jBe*fQiU-=tD+BE(.d%54-BaS5a<@mV)k
%`X3]"X<(uhj)jJ2Cbtn`r826MCXV*iqT7s=iq9DB:#*SojBphO_.)83\KcX3-=K(*YW"_VkD*4!lND9Zj@BpUrVF=dZ1Bmbq/e<\
%54(9tS/ni5/(Z"(3^VPZ0G+-$Asc*b9F-aP;BG(h8OgJt[$/2M6+usWb@kGDfm7Bi(Jn^4\=7";3ilh77"qk+C_'>LZ2j\Z/%qJh
%aWhtta$OdLL`Xd,oM3cdNW[[e`]G*T-Q*2'EnX.+0c;)I.m1FhZT%?H!6+lqO^,1Y^thE`DngRE+B/V'^'dQOg?CF[i,-'"OFtN@
%]giOj5SPd>QHkp)+Ck<8*lTI`;25mt5<9G:e<$X3.*]_^bq*=Pe-8Icn$<iQVO9i%JD@#!m@`&WOGO8n/bi3X+>XC,X+c\X@)ct!
%W6u6-r^82m!!Y;b5nZQQff+`i,0j:'!3FJ=!m$7FJD"e!!&>ct.Ae"#,C&mYcY=TdENo)7!YKJp#"hQt:]d)`1R;Z*a*7m"<nlZ?
%"L/$fD^(KVKABr6f_+ddNR)/==R:.RI+.O?>7q(s2-Kg=aTP*7?>I;)OIH]2I:e$=aOa_8(P!XFhZ-*6,Da;=5YX(fS3-5-@-ZeC
%^Otl8,i`TgjWdLnC,1=iD7opIg'D)+Vept^13mE>K`jYE@.T]>)[9]YB4jW_Y\=NC#<#74JktftrrAJ-AAaZn"EMQg-pm(s7ikgG
%7h^MLhlM[;Q0o@+%U`#,Z\K"X!40k,i?qbn"AgB:6-AW&e$"J8?cVKTfL/IZ(_@_g'9-)f:a\LDJ)WAiY$D/c5QACjDJi-DYaGnN
%]:A%t#"W3[/_?caI:T7Y!*"[18FFr.WR'oU0*Y[E.Q8=$)BRlTeo\As"(R0F#itT)?&$*+]Yq9CguG_ZY=RdUTM6VZ.W^\`;J?DI
%ZkT/Wo::3YI1ff.=)/@;6I>-XaM*2`-fPL&^<4\cT/D.]?41RoTBk_<BOcRn3K4=07%>m7iV'Ah]V:K6k9.<_X0nMA)WEIO+Y\ZQ
%!fYl;^FcqS]hb@&)3<cf/!H:\`@%/_VN^Hk%YbNAXqOF`&-p)c"Eu*r&0+e3r>uK":.889g+d>h&e,ru)[X(aCgUL\M:6$@7$*CW
%HZ3AkKB.YD-h:(QC"V4:"?f"S@6\XX=FE%m0?!r_N?"PX15u9<pZkd+FKJuN,2CSRY4]-5$/=r?Q\,G)F7kY^#094S05_/.3Xs_8
%\NEPO7tPPYSoWe_-=sO8Qpk+I5u?a^Y_pK)>d\H09.k`oRPR5T?h%%d[WOf?=0K&C[0;*dJm`;,I2*nr[;Rd:9HKTa]Rq[Wm[aCg
%-aR,ecJIBO?P_BB\3uNhfgt"*[No3^0.6GpD!CjA9;-1<GCG]p$97"orqb&U]uQc+/e+I,X&h2C-WaQP`so:[R%S4;"/JCB6#EAo
%CR-qp@+_)k3jWmNUtRS,cCKm<m3WLn:Be!2?r&RDnot2\ihIG\ZZ<>ZD/n-G+jc)7X%f/q%KXB)L=lPeT`XTK"::/=*e:P2AL#m&
%(r^F-m9IpJ#H/P2F;`YY2qBAP(6)e!CYI=>LIk=D<p\\pe6D7ID0r]]Z]Od,rJR<???gsdNBn(uKW:WsN%2n$UH/t/.5kE+pS-8O
%:@c?_$V(<)$hbEC=GHePU8AOuROWbCONaD9H*0FO'V6UQoot`Crka"Bird1-=.?U\@YEYZasNH0!M6lC`'VR=I,h:f"P2Yl[&Q;f
%0G[uCbVs/7Pij22a!-DiI@GAPD9G'_QoU>rA)sr.C)l0>gH;+"/_N:<iF''=R,P[p1hsG)-.9V\"J$=651fWVY!Y)]^q.SXL/?$f
%(cOY6bl_+(*hPE["jMoLb4B\MjO<ooaWbX[Ll)<%,D#/ZI#Z6='b*gBiQm>.:UYOl\H.;<HWL<YXonW%Ue.$*VbVdH'n$(cGL?YX
%-IP`*Zb<uAhaF_PM^)B0oGY*h263FrKr?g1n62MtJL"4qPk-8pM",H6"I1t$Z5l()4?E7s\98n\j?aYHN:a,pe[;(^#B6[%#S2d=
%,/FNh/n5/G9!ZEgF2?]'%P8b\-G*;BHTYX4qFo'%i8Zt0P)!#X24<Xjaf$HS&p7t^%$p#;\e=a)2qnG_Tp_&sl5\8'qb/rfj1j%`
%!3&:`'o5h$Jg)X$Nhg_379ejG&Pp\USNDX]BOU`1I!-""%#r`'Hl'/HB`S^h*[!1N:;D95-NieWo[*dkmZeS,O/V).R'i'C1_.T7
%&nk"YB5K'7,;7VcG--^!_LSs-H@YcBFn>7COk7Mg+G4Yn13[(b_?^22$V/Kk_N*8`i/X+DDR5bk2/gq]=TlQ5hubF78@&PK^Yl&,
%T/`alh>n$(1cS2P0b5t\#iS>Uq?*q(RO&p[1/jt$Og"HZEr/bi.bI&Lg&Uhm5_]jFk\\9PEFM0]_1h@Q5g'\n.7[p7fqh.^`/GJo
%aZCtH&aO!_B<.^jD4tm\$1PDK..")H4E0N]RhcBF2l8P2!>A)`7\:1.h0&m7,!LP`IHP*1'RbU=_2-'WkScRB&SVAgc5IQ>-^%9E
%."L;q1J/,U)8T4GJTA$%lgPV=FQ6<TGnc\)4YWF[a2nQ38VK\.o>4X:CU`P11%#%GSFuCfbA6W5fD>V_Ha.q(Tp2]=^U?qD0SrB=
%?<JA]G4r^#,@()@Z8&Qiap)]pj1@IWPDp^2)epT-,^4l8<!+@Z";o*uFJ.H8[V.k@A9A(#>hc8DqkA&*P@B[I?$:NS=Tj!G6#*:I
%j6R4o1?D3sW#i]fHiI9D<X`BlduKY<,!\sYJQ3N",0#ZKB7$?(3Nu[2_Qd^`T,+H<\09TVK-`^H6Jj,e92G^nUp9A[0-#i<MIg.Z
%(c7OnX%.FBR(XP/7o!N`)9,/?g_G*=EcQ0\Lt&"0_^JccFZC]\)Xh_#%b3il7/389cl"BSqmb!,V](*;!3u`2Ifh@/jS2GaJHD'8
%+=RqHo?1Z=$$IO'2+m7p_rQ>='u7K\'*.3j(`(k&A6CG?j:`e/M`OV5rrnBm0srr,e:=G5VVIj#TL?5/WhA@`^]Y=cN7]79<qPV3
%`mi!0,I'/bgs[hg2GUk_*hU-@hceKt(n5ARonV_M.npc=FBY.h1K[\j@+r@NLFB3#QLbnSEbY[enq"K5)FSe@c;7+biIh7d2&e?J
%qSM*SScekW7Yh/t]$f'VfM.A)gbnMT20p7$\rtY(30`0P!?;=kT]#WofI#2(kmVhs)[tL\g:P=T(<k]Q3)@;$e??Yeo^l15d(n)0
%O/Jj6rOHo`?'#SL6_`-XGb0XuCp%PYr/<k.Cr5)G.iJ=).-B(^1klR.25e(=p(C#NH/9__Q3?f8n\AUMpI,3'SS:/XPjWeRS955k
%d6pYs!L/Tpkntb*JA^)0q9U*S:Wdft^@;*Vek5*aBu1XYolWla*.HAl>W6k2K1=a%G,/$%[iPXW?+IXj/3.*e=nO\=%A\[r3bKS+
%^2/h.f'l'YQf9cnVAhq/2?-cA#71<8@ud=SnXae21Df>F?F@n'9o\,'7I7h,J93.,>nD:#iAaS>=AD$RK8Dq<^hQ'>/3*q8;s_R^
%+$]IiT)Ja-<U@Bn12NREVuAE#;JQ<W]Qh%ZOHaE9>B/GBNA59K,J2H,%7GK,kcRCB_K0MJTTYIV0D0@O)7jl*>g<U`UVUegMN;[Z
%9:YaQi,'g#0ue-)Nrs4`6.HtA)g/e`bR*'>o%HH<:[pGr$;ih94N8F0jgs(N__jIs>?:6Bput+XFN.)p([/RH"__,IgKkHC@=3eU
%#ei,5$G`C;+aLhSqa"BAr=q.2aUCE8#3>iF$IBdp-mdj/\&me6*:=%7OBqMKm<-tmgUAQXi80_&.*S(c@ncs.m2P3U.K_#cl"pPf
%Enad,'=%#OH0;kfcE-bKp%*Q'\c5tYlSPQb3Q3'X-8G&C)hVoir'3i]J87n4*c"o+*6!L(*\h9+0H16l%L1iD3Um>3[QXN5fX%[2
%9%@+",Gqnd?!K$&WEi*!Su!mr"L5bUi((btL`.DHi7uo\2r9Hm(N@/h`iE`npnn%('ck;Z2kCPE4lc3[+RBB*Et[TqpA,'e8Xk;;
%p5CCl-!:X^9,\G-]ds'W,#P>.Z8tJlAjPR+G6;W892m`;/a(4Cdmqd?E#hh&nVgXNJMoi@CuMZVLccFaUq4$bP[sVJMapSjQ/FK"
%,r"5+J4,`mDr.rE]NYU>0c?b+`4F]^!fYtSo+@L9V;fAoQ#/["Bd$/&Z?hgg)<AA@$TqZUnKor2h$I"i"[-iNaPlJgH>Y!^\[^jH
%6%[WL8D0:9AV)0kH[5<$;ST8.mp;_TcpJ[N`&D)CQTHq+K8R<)0Vm<&bcRJ[U4,?HRELK3,LdWYpE`u9Poj,GI-MH\17`lR`E$M*
%T$JVKn/gs<9Rm]5Fte5G<rD*MH\4X'aq[Sf<mf%p-(*8/p=UgGP@&`@SE-<th"fqek[3<Z=Y4e=He8.V?(24bnS,qGCef(BPfV$B
%\gYX)g2=UiDOM)s<@m@R>fkr@?,l#T[]L?0j',o^5!Tu)!ZVt3]*7P):]eh^I,N_edB0,+M?gUUm=!GMq:9.J2C3o>BPk2iWM3k1
%fZ51imfODAdk0G(N]';c/%'6kLuU&$Ep#qZC_[Y&US.J]dUMOt%VZM6ah/cLj3+LS`?D)BCk,Mu#D!Vb^o2FI.B[l9=ZWj$UM!"'
%FXp=2d)K47`JspMerMSU*S7P^"C#5e+jeubrBe'Zo(<*2)ej\un(DPBqb(Kt>.dB]kd\[Y1"t:NJX_+2KB=[RCus,jF[IYb.M#?\
%2XBVV5aeM_S8=1-(1VS1Ie9R#Q<-'=@2W=c#1D[aFA26V:kQ+"J8UiX;#3\ph9K+IehuVMS*DF[XH#/s.c"35V:HKlg#``XHKh$=
%6@%WSrIqQ^`Yib*=Dt^_UdF\dd*%P.i/o3(2cjtWOgE#h(B13SX?I[V?)n]^6kTi6%ht];;Wh:,\Xb99#sr0N@_g7"2@.Xb8m*Ds
%!K`=^/3DNJ7L1M<W$eVLN'!e9B3Q^s*D\AL0AJPiCb971-aYZ2)g=]@ak#5`8Om7/6;Y,Vpe>A11!>E\*s3DHUJAG?Di0_!hrMY=
%*lPTPg?hpLd[W)4R\Vg8YO^-H.,QjVNQk*B`(f9V_Yc@tWi9<(Hr5jSlt!ZPg)JVoJ/k@hf@5KhO:i'`Op`B$Ru9`k&M9qBgk8gb
%&X;OW\#,e9)H!n/;"%s\#i+d?ksJ>!=.lgl^]RUGO9KuE&!Fa,X[,f'e@#R`%HX6bD2;FQb%DI3Wf$dp+mnOd@)8Qu1jN&u.U7Q?
%]6)`!*l1PP1ha74_s(!m!8+,E7YqJ*$aHmK#G`"X_!,/*!4a5hrh]I!7&9pcD#6?*$]Nm]fc`<n&(H"\hf%Qb(?XYZj#?Q:h()*2
%io8S^'VLF_I=rCH5]70l?imCn#4V8-".<o^c0Kpc+j9:pl6gFKNied7[WA!N>=8]F?f"6Z]qKKmh>LB13a'G<81._>Mrebf]DBb=
%a^GES%`kZe^82rIN9M&/3GS<4aV?>qIf$9M]>+Zdhn$ot&Zb)kdHD*K"G:+eJ/Q'SZ^PmX!^^k#PVQklHBHC\]adq2!+=/*8B(;7
%**QE01BMSKI%I3:1"A((kh4cUQM]4!\PhtSV8A'u<[L_D8%[agU:qCLn'ZNo\qhLkES"$W9^<,CBFi@'am7m3iC8[OUEP04%TiT:
%_E^u2]15*&l-/$.=Kk77C"lh$E%8.(OP/dN95c"oFPh:+*b`>i8lBi%auR8%AAL'FFj-lU"Mq<SST(QA%0ID6KB#K`!Mm:mP7sgG
%'\<M5>pjNGY)<:8)l3(2F9blAEB7mdJ;IjY_$j95.,cRn"uD"#7Y"P1#1lJNpZE*!:K]6rWi(NU'i.nJ%9HM^cGhVb=VAlrlAW3)
%P[S'rAk*q")Ws(B/#JQ`5iWDP.9hB--)/86)JBsVeD@U@fW."Lbj]r!acnSrW828I`c\%>>#jXo$s,oS-G!b&5b$sKGB=bqq9Hte
%SH=2$XF_^r$o1)RL]F:b+DW4kP7!EA^g_L%61jHM.*o4s,)K%aj5M+;5fN(P,)&K-Til"9#sB'B!F/i]QDt#N[]'k9RFh\YUcfcS
%4G6?EOWJL4<29LrVY^=3EZDsG;?THEN0,XONTV/cRpZ*KOYDU7T4uG+2)EbQ3R9s0SsWW@GT8?>O[;:"5<!iYdT<NYM$#.^,>MlJ
%05^<JTlWQ[@LHG)Tl,CQl\BVCU)3P$l-=tcMe@P0EshK2PQg>F!/!KCOKgu'%.lCXA2)Te,CXqsboM=EqkltPVJ4sn7r#>Lh_e2L
%%eV1c?_Y*$&PM9HaobZA>rALnqFTH(:E#B:rCMGM\0HiH(,(=e=M1OUgn5H\<7?_\!CtMWD_<\%`@LPk!aLO>]Qgna0m&(@0VX1i
%+m's_"?3M_bi-K+>Ml/f7/+skWAKh(E?s4-P@@SSeScWeWY%)@mKh`M"J;KW@@d8-b@GK?elbMMS/%[R]/i4C$9>I!!DXILnERtW
%'I6I?k%eF83(T#YJ21a'`B@u&FGX'POrGM#?4lQ45H0&^hU(hO7nAjV3:%&EOJiCpnJ/#;rgb7daW3M389nJja#(D&8Ho4&grI'-
%!?f>&Yff/S_>m^>qWp&VBc6:,P)p_#Ur;FsWg[ug=6TcVFKbI6/?)\jl/*U!Q?mK*#4[QFMf6k&XCS'aeU]%gnbC5g1%.]_cRt=@
%N/cUMaa(Mo/&2uln%TaX%l,r"0!S/T_Q_;.UJ]^FRV<aUYMK/(r&6&gG--$%j(e+KjGJQl[W9"iA(\Eql/Dq%eg@:T0h_!,1<K3;
%g_)TnbC5Xu*=c8])GE$-[ZGgD2iQBiM,*49aRu]`H&b(t3+aChkPK4S,*A6#ZC+5t7<AN-(=hTZn!`G0T4E#KC3Ili[t(j3jES72
%h$`l!ll02"'`qN!^<7NT_N\Kl$ef7gJ8leO\6p;W&qQp7Lf1C'G"N;ja)DKl7R'T'&&Eg_U+V,>MdqXTU,\/>4B=J<O:u8)ME`Pa
%0UTerc7W,.j-,Wb]H9RDZYFPHWm3J<">'DY5aojAPG+lASNmqpeis%_bV"Gb/;4J!.bH;X/:Z]QV825QAXjL#"3"94$M)r-IITY,
%Sk0L!8cVk[gTs5sTFC^P(]MnI6B>>p]1]lC.EV5@>]l.MFm7ku&d96B9lqGH9qLB]3`l@jM0oj7=@WQldGd9Y3;IgVXqF&t,Y:rW
%1+]npUMJ1*GZYr@M]UZRZ,#<Or]R#6Y_iE/6Q9ebSmG/#/Z[k3jW\Sc$IJ7J=S]FY'TTID=+K(kXE(a;0IB)<!L,;`5Yh9noL6T%
%R;\Fb%tl?OjQ[e1krN,NXX4Be92")3b;^9FGQf.qr`L2Il6-;JbI73e7:@5(FciamD,jM1aI^%OSq(k.2B2]C9E9DF7N-4h&O`r4
%`*%KJJI7pm2$P+#6:^ZYjpNf81(B?5*.7):>b1^(ej$Gof$6KEl"k*q!/!k*c0u*CCjB/C;P.$AS&k;s.+V6e,]J'"Gn[#gium3>
%LgqiP@S$"F^o3c9GS]a\qViBXo44i%C=-)f9b)ol=$HSUQCkF"<7NDsPMEJSi3aiu\g+7E,<5=S<Y)G2&ZC9@$K;TsVme[j`.@_$
%=`kWcnM2=;ZmaJHG$L077hU_tF\3r?`[Y8cX5!i[T6Q9-'`ZAWEjN&@W5da3Z!^\<H'rXlZRGmX(>]+pWYFA2d:TK0^tBW.Dch*<
%]J#"i(3rOK6/sgR?OT%l`_sZ8+)7QedK9kEmm&WmW0VI^edd2,C!@[/4qqU;c]=D-X=FQEkd-2)iT-0jltOWfYfRX?+2_@ss-qPj
%.5&P2."2Y(G%+%?*uWOHZL-3&@tH6:;u$FL0"SqbJRsc6iEt"<"LEDXnT>?(@:eCo0?\;Qb7`@l`T#5a1A!RA;o7VYUl*?+554uD
%<;s\M>&1QHIJK#*EGSLf2r/'Y*Wcbr/Z*'fJb([eG@i7h!$bjZU$PmYJbrUgnZZ0OBb@rU-1Ca*!R)n[2/S36V[c`2TXIuMOkY<]
%g=jSB'"-N1Fp_Fu@+9=4)ds"r\DHYEgJEOk-M&2P9aioV81a@NmK2X8i?n.1AjH*C."K&aJB!(.TsoL^!6H%lIQ,ccq,=*ZDG7kk
%5U63p;^V^pG1nq(N?bnVj1Cc[Sq@f=Ac;WAB#SBWURc0V:"?3<i#^$FOad4jV_B?Mm3>D^^QCb87sU(i$Y#6(c:ts\kh*CJQdObF
%K(8GKb%cK>JFpQrOSoBVo`*9i[RA0Bb,H.anoo7pa[N;aVR#5NV>\G9f3AV>"20Mb(8C6\&nn=?FHWm=\G43-A3>ab$!e[(.^J)O
%1;<lr!KZO+.@CK1&(TBbmD1pj<"8!'3=u>H$rENS8SZ-I4]dWm4D50%")!P^%?eN;_2XB)[`Lpe>hjH1!J]o&?D0NB=?12!7P+8\
%T]*L,iGm>\[7(&XZ=P-:.%UScE,-YApdNB1IMe'tc\G!83PJo^2<-s6pl(@HhAt0Zqliq:&iU!pV-h%dA"J$cS,3&!>Bt$=KZEBt
%>+qA"a5A-`_cbmW4?4bS]ds0H?)pi"&?!\iHm:b2OUV!K`>BH-W3?U_akq5tJ@9A#fc:$TrMIN$0RBna\)ai^^rT7/*SF.r[DFI6
%m\fpFc$:)8eU;M'`f*T6"H;^d0KDiPT_,admQ2<Y9,DaQBVD=e@NWqX(DS4b;HtX^@m!bHXW+fb17jUg,]p?>cLAg\^#b2MIi#gu
%`R6=Ca?:T[;-).=kMDMaO>S#Wh,]Rt6r#W#R:)<J$Z^d;<aIXg`GW$6I2Ym.grg/&l_F2bBp7eM\W:G7d0^=;b?3?)8-`KNQ/iM@
%89nn2UJ;8n-`I9jlkmP!WFCHa/'Mlc63g40PTd%>P;?4E&>GaVT$WcuZ^P*\K:XKi;5&1sT]LZ#n$YkO[F&,RZ*q&8a[TKD'MhVT
%PQ`N5)'js*b4ICVQ:+58:?k582s\OqS&%Tg2(9qoO4,Gb/jcd_M1(O4:3M2a)X<VJSK]P`$m?Bcqc3=j\fdhq1g1T(l?FklU[s]"
%F2cW&OUdt0DfHY!+5VX_&CJWAcOF0kj>J;"]@E(Y3Xtl7kmkS`B#^R-.1^r;@i&3ZE_1V5mUD&Q!S+l-+5fuoOZc?(.?8.5Q;M*#
%^6jejBjF!PJ]idp$4I.lcbBq.7.HJB^V2)W!#AAQmF9agMdmT2Z-c*]+DIpdgAt2k&jis7F?u:&0RL9)V):-a(a_:=cJ6`"LPrIR
%FuF!Pqc6e304Z(S"*$tl-.+qZ%lqr'e,!heJhE!=8Hcn]8jHbd8LY=Kho=>`>!4hXFlJcsK:Y23haB-5Ss4p0M!VSh4'LbK!309@
%>Mk\s>T`%",cW\qr?CW*.C".*5lC[;%#2*#$=f9;3fWO[20#E<)0>#$nMe(0(SMau-j7^E0_DkXm>7Lko)^qAR01nF8Wb&2;L@[U
%ni6]^ID5:H@'#$MJ+qn1QB9lj!0hjY6:02E`9E.h1JY;/m1c!a&NmWP3jQiOpCRS&.i*-]ZW?R[UdW/F[ochA0$/=Jc7Kp#oKL:2
%5Eb<^1S%f&oIib*@<%AqXmVh+pQit&Lsk<BZ`,4UH\i1:'2sY[;!fMh!'p,;n-)E../LeDYmls/2Vk&&XtZVAO8W5VnL!..+eueQ
%F?,Qd1A*k%"K?4u=h!Y8FbMis-mH$h?&askc\Q0fS+dm0Q`llU2^W!%7!e83PEp\ape@SeP+*,+0U":>_DRi^;8oFA?:9K\f<"3`
%W!q_-,[cR?odNOICQ)+k-$\HS`*e>*=r$g!>`\FXrC4/GALb;-psY@WCK:]5i&)^@`!6A::W[J7N"Ql$PH?JE:B)`a)3LmMf%0'P
%0LE>s7'-HLm+@NaFPZBU=ZT^2ZDamar,@S\OO7r2U^[-)-))?4o!V:hY!P<rM<)$DS@)s,":eVQRA7hpBMR"g&(q\^3,flA@_\;c
%n4d<pgg/&A72N:tPdd@jQBa6<BA"Xeqo>WNM!$6dJgl7biQoD<.rO-.Z"W7[R[Km-Z=N&W>X^`FVBPCN*@%NE/bQ&?4V:BN2GY*]
%cj\2bA=,i$](hrOp1Ik<2C6`+,1G[4`aj]O4.Ddth=K#[EXQGd_#m$c,p0$0lEGqE-Qp7SZSn%o+W7U,&in`uOb.rl4JC<B*$LhF
%>h5)f3=:&Zp@,TkdU&`SE,5_JmW'C>a9?3t>jk2YOOmq&C[Vl!i.H*[O.WL;R`O/!T]k'J;!)B)h^#1?Fu?A.\Aq27e@gF_OQ@15
%T\,OrKO,ju`oQ3"p26+TTF2Tt1EGb.EFh^l8hUs`rIKcE4C@dK'`*l<5uFc)L"<<@KoB@OS5k;/d8O3Z@,%S\lcrMsdQ9X_c;4j]
%j3lF*^6&JA7^d$BU'-bM`2@ENop[d%5'jp^lKTGu`F-a%B,a!Vfc)5sHd*DG3$(us^Xj=,I(2Nj9@U*)<BPK;$>?Fn5`&qWO`=@>
%$h&Wt>,rK$pJKV'BFPVt-!SV&0\%7t7RUi:X$B'u(?)4JFPEeJi<B[I2M&'=on_pA<hr>Bq&5n@HD45JMhIX\Ht8nK>Acc%l]60:
%:uph;G.sM/Z=gi7doY_,oB]`U!EfPFHTe[GI/&_P!lZ-N)r]mF*Y>g8OOikE(an2QYn!eRHt(T%Jhp^n2pVJb-2A"_55"iDNc)LZ
%>\>nroi4u5A-:$<5jGX=cd#">U`k;dga\<$[SCBZe5t'KHNs*E`i_$@-o"Q)8hfCi,K*AqG0Dc6:ccH?Sk,R7(R'9DBqKV8ZQflK
%S*n;'i9h&2Nb*qJLb%imr>m>n3.j\5["L>Tr&s`'EP0f%,g7u!\%jBu8k]P"O:6nS94lMp4VU<+PN!7eZ\j6bM>6;2WnV@gUu4i0
%9_O=a3/[q?F]s^B!iJXjoKI_U2kIIks2^N3D]E[lc7c-fWnu[hBfNVKZ8Y<9G6a+6"gFT!n*QZ.#h<AkZkEZiaES$JJf"q>a-4ot
%md+7W8fur"F&BX%ml'1&Pff.JR5ukCdFt_/>^o\b*+1I24,FK/J[5&g$Nm&T&SgjcdUSe!lJjfR)Mjn>T>p0A\;nlh'`l!s3m4Xk
%W4G]gSTr:?N"Ulqj6Y0&5..fYq1?%d2>u?,#b"%;2r3h<l7bjA)pC`&T/*[^cT'B2E&]df@GY'.g)8uP^)3`6D32hu_>`Z]DOSZl
%pSfL,bHJ#tlFL6Gs7)<)E*-_#27lD%(lra\IXE/"e)?5*3rH5><<e#?gaOZ/[VE@f<Ne#lP_Fp&%263]mFZC]B;nB_o%_$<9(#_4
%d7<"1$2I_p*Ff2_f'u9)(,*/#ZhOupOKZV7=n4(=W#3LsWNABpF#eCA(l7]5frAB/kue&AN[$Fe6Y>LXRPBk]3\s]oV?Jimb%NgV
%D+B#_:HiTM3p^\bS86'17!EX&dY+G*eZdcJ)Cl-FhV79tWGZ\A;n"h4[ngq)`+P;Z87/DY'`jRL'#1EG?DMT(WNK[EW;FY9E9),s
%W\(iJi:>?OH/:0;9TCU^2:^<@']#4UhT(j[q8`:pUT!m63"YX1<`PVujFq!5#u=9\MT;iC$UEq9T'klA@cWcbj5&5hFhB94mDhMo
%hL&qt>jKp7hFaYbDldXS='toRl8&%=gDdK4<5$h0`cQ>Vl_YlXG)`pj@SjF'#YJ.^<+oDf5l#ZS7<i[c]il?l#8*98PrRMkKFoBk
%qg%o6L8$B6*gLblmBA<_![CRpG->PVo%1=-oO+?ngjY`d*aYZeO3o2C7E8\%:6nDO&hiD\AG9#Jm!O[ADo.!F$S5G-hg7sWWb8/A
%JZ$'MD@2%%i&g-mgmPUcajfI;610-uD$kFuM8hB_q)&T(M/#69MZK18%">W%A8U((ft*F$3^Fgc/2G1?>B4">[186N3U%h4ZmR7V
%3)J5+[#Ug.]g*TkHc?4DbNp6>R_C@KhnFUJ^4+mHdEWu)C^/N^C^A5oVg<g:5q4nQcF"nj4T_h8j3hg(2/g+%AF*jXs$oW_\m2[^
%.:iHfolV'P_^J6Am^q&K8sqr1:8d*oJeb,88[U,^./%`2eA<g/"(T\F06b%c>045lo-??$)gdc[KQ`n,p$(/>OO"$8EQ8>Saa@cG
%'NdZ?OY2Gh%p?Y=`>VW?^ALJq4KB4cb";4XFFfm#PT3q,V-,M^_;V*U]*8eSC!?d%Y"pl(frZsCZsu`?2=JN'ruL/%OkN6]9k^*r
%&33'*0fu<P?=;"(UG6Wf!*7smAiljbfC!_MCfZJjXh3`?rUf3PE($]mG%>m?'jnLN=gk,eDL,B?)Nm@B(nKY`W%;T8U?%tYKHq-2
%?2f.H6I)M:W:2eW1Fcg!X`+f1,?pu)IH8rjf0Z#\_!@h?JOWt#XIH0;+gH"$3-N\SL]LIc%W<.Z!V"1"83$f@r,auTD4PVh<@m\E
%D:8u!8[:%9Y(t)#/87K<!m5$7Lj.q-9I2g,JbVh-WPRst7jYteOa$'Zk$L-5_qU<IYgO#33JE7m<PE**0N/F6;&+o#<N.luF%Udm
%`J*"Lkj7CNBnFYVPcJ"IGB0CFNaumn1QB5^5Op/.bN2ITZjU+`/0+cXVI27g.b*T\ZARlLhp46QDXnb)S5G1nLYW]##h*D/2mnug
%1^/&1d=RjpA.^0>hMnt^4q8X-%O7"l-JS>bRsVG$Hobksc$\q+N9sCu]pi>]%:bGW=-+JNI9Bla2e2uE=J"cpD0@!tcG-@!0GXaA
%l6er9"aNV?Z5I+#p6.9rLdmtBFt6=I6VRI@G11A,=\*F#Zp04.1?<^Y$r1DsMB`k<_hc9p+8f_4g*e9OQ!'t(arQJCSm5'kZcW%e
%e(-TK@4[D!/FGJY5b)r&(NO9ckLLJae9\Kgr0m[NV+%<EQdf]SUi3Vc3XZZ&D'*`.#K!W,5MlW"SGO]\\O4=q]&+YR"-Ut"1SgEJ
%YT+i/gQ\.@Xeb$*%kFAr!\$:S)^ud/1\3f;]1F?MVkK@V%@jT1%V:di(LdH`5r[6%R5"<n6S#]8rX!\o1Z?QR\9_6'R8fu0"S%k8
%kC(MG0fu]aOU8>t)LW0)%W'Ua''q7X;g5G6"W0;V&h="8`bD5'Z[kPJ1,M*c8-js-gU)24%Hr+p0q8m_c/rUuPIXo5a]jmUZb!DG
%mP?3b%QVa**j.t!cN)fRi:plViQQ'i7A&O""<Lq/'T?9mVGCM_;;Sa`i:)"bgLR1+9+hCn!YLXEc'kajrOD%.#gLpDZqMu_l%oZ1
%1`.a`OB&;J!1>Cc#M]Sj58(:B3S4><lGf<[E)i!R,sKORYD_=EFGR1[J>#`]k]cCs6Ub&X5le+Io@E9?fS+'(l`04dMQjLS(V%d9
%ZaWZd+%JdH03*D*J['`h0Oog9fNdrP;-+68-ii10"Z;?2AmYtaOV>pfkNUZQemAA'/$o>C^7luO&r0lGe:ar^?2V4+`_4?)C^*G:
%Kt=K[R*js(H3Dm[3%>LA.clWW#u`pH46pZ7X+7;sePrVumoL81C9I,fhME;8C]s9\jfF`gmGoq/*FC'9b'[m1K?Y-lQ[jb)*nK16
%o:t^l^X6RaMAkithB=k!XFT*Qnc#$&(`Ic.+iB-]Y:bPkT-_I=UrWWHP*.*Rl<6.B((s.B_6=GZZlC-NMqW[^Ea;LM`tUS)?9hFd
%?D9b5KZas:XC0]sc$mXq(_n>NMWl6i$>l9DP3mYcMjm=W#AG=sGAj"SEp"QF4oenkXGt:MX0W"5]UM/i+]p"(cO_BlG*]&(fO&(u
%=MYIT8P3?V<A</A%+FVY@"e+h+2uS8JlNh23qmt9>0BhP6?B(.q++.eKE18X#g/uq$q_(9gJ+!;'(]3;YUis-Ca@@^5nh[mLDoOs
%a5F2Y%W?uW()=\Db.HhRSoGLF3@_8YbI@]jMG20QATsuR:_m64k`rOg[<n=NK:L:RM3)d!%Km$DK$Fs.b$ISb/SiRSh(R%g?L@Qa
%E,hB"7THN<,fi\t$i1'.6gG;!aQEPjgQ>d74@I/I'/E@L:'\elT3,\&^#IMt8"YZ)^l%NBP'&A^<KTtR-b;VK6tJbnOk4H0>oEW<
%B1ogWE'RLs5]XmFk.@E=%YX3-3jON?9a"SIOg_*?/&?8W!Sl-+/29[T#IG]:UPTuV,1&J'6;TH+OrA@0,]V]EQK]ZQhDdAc9j:oS
%H4qg'#Sa-RA2U`>U5UoE*(Xq)$k*^ra<"<6lU9]_#SctO'fs=__pdt7gV>N,K=V^?();G5b83WE@R>K&Nm,Du`c*^irha_COA1=#
%D["0TX"mgR<)M-bA-VoU&Fh<AhEuc6e2?kXa;S_Ea+_#a!L$7t4irZS5*NqR]e1-t'J%Vj;3FQ+VPZjr;Qs%j6ZV=FU0sFcG(\!m
%P&W;Y.es(4E(hh4YYKa(jB7DmL,d8&5Qr5XN8C+6>T$a,8(rj)GRe('ep3'FW>ALn$_oCCN9B3U*EPXk`(<*^hH7g[>f2(Z:dX!]
%7jDJ#FN__c%HZX564dqkP#(]fV^")-nG(+PZ1'UYIC;mp-0#V?\:maom^e?Ka=gs1797PYk_>u)Nrb")>+\9`W\EuY3sPj9>\@fc
%fmUZn*H&>^f6^2T`@U/`/@i.8U-j@pc^ds.[m1MBC7%iHmAl+E,-%csOX%nsc)U-:-XqHE?k=rq(e$QrU*;i4JQU*i,c&iu4i_l1
%Aul,VM012HB`Wse%@34)K<HuKm:VhX1(6EB$o.+rWDl`nARo\/7CFr6-`a)Mr8P.OKgki4URYa5J?>ZSr>E9BH6sSK#;Q8+EqX;Y
%D"@gC>k,2*BP,:S*QZppEO.qIg7qkEg*=C4:@*\N@U:CR'e,:Q^s:X:N"%sq^+J9SH!Oph5&8*ZaG_b("rAlX?2PXLh.K_W7ARd-
%UE.N-/rU.;X[3oYh=Uahn`O`3^Of(T&BZS*02uWJHrS+jeL7Bb$TVNp?j8T/d7CQ?G[s"Df?@gc-`,'Qg)lr"R#[ekghm4i#FMt]
%?!qo#55W(:a$F&cB30[U."AP#gP32iFX1+F/PTX]5p@uCGe#"$f&J?&iWF;PUcj6dL+Mr_5cD0pE'shFO=/$!:s+WPp%@Tu/K8^1
%[X>A!)rd4bHPt5U3A@`L`0B1!e$=DSeCjsS<8>'@%T)-iSH^[N<7S0jm."i!D@"4!\X^#%@dgjoD7]k"Tg$:s?[*#;ZsS3]$>B&f
%i7-TL\-S(cV^Y+F\l6me)^mKdX?aUZ,,bc"W6h3Zi\r*Qh2V&XRgeijHlp.#!-gh6eI8;Tc8B+%B6'--'GC7Oa2)>=Q%7Nn<.BF8
%lYNUjjS`a:Lm,)f/I6Wt36n!06+n!H+f84H@0EYR>l/,#@>6GN7_[-KQnJJPEGmQ2o*\^eW7/n7UnIR*Sja_G&cdOc0VFe0mD,4+
%$A710ae\8Z>ej0c$h1Yr2)A]ig_$W!pi0g@/8:VW1bMddE"YPQ]A%Z<0n0IS+oR(s)HK_"k:-[.'`]#X"mMr*B7aF\k1C+E\@;<T
%9a_Bd>=E7DGPmgJU##c!8>T^O]\nRA#lmF_#sQF4T2aMXlR/#jP]?r#"ju%9QX*I[(/DKrRM-'bCXHde'K\qKnme\sAo"B-3P3s?
%?Jc!1c)uWjj:3i)>QLpIde&S%OhPZLP;U:Yq;27L_ifYJ*rl_'(^</Yhbl&J7s)BpCqYrZao6Th*7*r0j%f[e*-84$ZITB;\V'sp
%el\Fr3Z!%7foCZ&cHJg4W>5em0g9HU,HlsA_<kYF(*(uf3Y7Zbh%lN`Wre4]A<j6GHQ7R+RO^23e\P\tCMjbicOV.V\[]km<sFU7
%@]o;c5rqgc$VaEIeI;]_EW?.h&JTapN8dWZfE&b/64VaVjWT_X2g7DKJr`mu<SWO0JPe-C@.O$oO>VmMS1QTgZb.2AaVb+1bq:f#
%q`J9Ec/9<B&$u%RL5hDLY\c<G)u(8[4T_hB\M/XX_pr)KXQhDcp_8Gt++a_COr2*?LC"75+uA.:q34T-gOX_G30<4X>&.6s'4_2t
%j5a\3!*ShrCKTk\j;P[rWn559G,(R27oWk*e6asYJPEitdgT8lG)HQLS`e)Igc5Z.[06?Z46g;V;Qp^?:Zk:'*gs&!#`rIuW%,EO
%`Ans,dX4,STZ9/!.Ms$Q@\$U>!m,9_fY"qAA5DUpA<i%)P^*K^'i]^V,p?M<DW<TLq)TO-Ai4^^XN1UEI60]oel=JM;k-UK-,Anp
%U"aMZ:qjle.<>Jc4#T86q_^W7Yl_9@!:;lGqa&dFD[l#=\&0-;PK];p">fB:g85YOhD/8V"HR5-YM0nq^>r(Mi7%e'E]AMG[`fu,
%NArT*pAl'4<A\ma!pPXPn/=$e^ksb'BX935!40Hu#R%cA<u7KkhrRXS=,L#>0Fe:P)k+#k)`p4aMi_Fgk.=?:/Gsh)3(rf?0qJGC
%p0[kLpJu":V>FN;[m4n14#*=eX?=;O7f4U@pF8;A4Kut46B;>L$2&K5gk3T[;<j18d@T?7E!jE2d.<3@kq'JW@(!$O(OLjl^p\@#
%Nq.IMA`j]G)Q2;Ap2<)-_f2MF_A65c?32OG]7Ed11-$SYk&1qm8ZLg4Q*5@_4M`-g&Yq^Q;^(;qd/bj6<;S-snban+#oRciLse<@
%GCUXQ(^T,3^AJnJe,[_r@+tTG,#4&m/E5Dg#Bl`9#27AC?uSH#",<nhDeB:A)iB2OL(PD+KLjH)E<c6UN6GoJ=E;b-,<HtZO:@q:
%r1kp+_$>n-$fV-da<`*V2k3F<HCoP7N9^-PIZHVG?M+^7&`07Q%TdiR`]ut)U\,5i4ofF/!H%k:hcqM$`9oDkaD,d$88>]1C>%7=
%MJl5BS-jcO'!Yn&-P5cA,W5GlYgph"nJTlJ![$lNR_9hMppI$b!h$n1\>NMYH#<mG_&fcsUdS]Z)E#GAE$Wu'Y$h<JLFl9An,Ve(
%S-$#7AW0h@>366"@:$OkOd+g6`lFA=XGnpS6/+[-3339;@j-aUfdhX_lpG)Fdk7M*LgF*hTtJ,9/E';p0Fu?8anl)]fg,UJ3=-8@
%*+lgQlU2<T$;?B6NjJp<^jTN..6<b[Mk30ln3,5)d$CdI)_0T_Z?q+n`C+">OS&V$$3N5JF;!%f8;K88W&&N;a"W3';@6\I]a`21
%QM`gUR0+CV-9eF.lcZ<jdcYbU8.,E.>T3E/\[W(]*h%YE56-LI-^8$>8sTZ(_s$F]_%2Y@!@h'kZam&dk,.;i!E,!fi&-0]JL'^9
%<C//;TMZpVKil[cS<9J$lD;Xu]:oPGG5FjgL]MV#`oq:rauliY2?L7:@c>5o.A^\+<<0PS1NL.*MU[TcOL>Qo6!AemT@ICe05d<Q
%lHD/u;BRWVGU2iVUBi.*&]s>%mIAt9nc.>smSG_%,<!`nCS=.*OAc@JAHumYjsKUTSso5c,]@?9`pI_cL*WF8)X7DOLUU'K<F`n)
%H%(p.JcK(:l?5NBSi%(nD]#)Xq/S8+J1T`aHN\tD+K2Y<3^C*0J%8ZUJ9qGr[Vu5GF&<g7d"PGoGU#un/17BmLoohY9-?7O?tm^i
%GedR?]Kkg34_I-DeXG9SAt<cK8I/h<70Pq$S3gu>(-hikkpP`W0.eBR\^,mp8Qt`IXaue7U&'f4.TSFgr(=;)Ns72>Yc@=.ELQ'r
%$J)8mi_^\J+Z`NHj-U];=6]u*EmA`1F;-MsS5&tH@Rk%p!mb_@b62C&1VLegTSf[&%Y;&\0RH2uqE*_kUt5a_Ee\f]_mJM@]f`5J
%Ye^!@h4-s##8i`-e'mlK"0hmr#7@;VaPgbV%tk2UUqEGHJ_*RP"Hj6'0K>.*^?>9M`fs)V6=YC-1:ERfYHpS#!5e?s(uQ>L/TSG*
%;nZBLb[CjMA6`XUP1.Mtfo]DG\_0)0V-`5Um9?QGZQdo>j>H+-Bi<>FKX6YI`H]8BX&)C%l$c_7#B7kZP?RU<4I']9["VA&+(14E
%8\@K<I!BCA/urIC7!UkWqG04OauRp$/btlnRSL>o#"U)SH8&E?\0Z,"!+L'Rm5T*OVPf/'+*S7LK<:?<4a<1s67a.G'**f89p_^g
%pc9hQ#3BU3bBb_'WGg[rh'AZ%grYq!(>g>0jjkFG2h?5cF^W/IL9NPA[7sR;,T',2)$(/CnPZ05MGW1*+\8a/%C]rnQu1S-W/7I)
%.C8f#Wq]b,k[7uOc[hB7`em3A(*&b0L5LmL&gLfd)H1q"f`T,YV7"DG/QN:dGVS;7>h8"b=qm'Z`_[U^s7+Q6p<0*,o]90Sj3pdZ
%#?taf=Xe[aB0"TgBhF)!E8Di*klFW35F#.r@a<3l.P25/X@U]\\/jX3euC)i5QC@dJKK#3=9Ql_Ki[/cLp[A$P-H]9YEDbmcVp7J
%kS(3RKa4^ObZlmYBXuk;CMq)]B2_p%_1^Sq2DHsfRub,kD(Kap;%'6c';pAbXJddIP+fTT3[C*n@kcl+3iqn$aHVr(X't!S@BP>F
%Q,5Ts?PigPiT^eR?7EQ,^QXBK>L\OJZ*oEg6C4h>]bLC>B31R%gRsuWo@5AJ)JDRrfY'ok!\oa&>O3Br4b-e`d$e&;o]*f;o/5sA
%.%jFnmXM_^&\or(b-]Y"6'je>kTs0n7Y[9_WdhK>Ah7IPW!O=jZ/kYIAYK6fL4nZSh"Kg^_gbgW2]>"U"(/#dJ75a9A=f(8m8JDh
%]k.gACe\:[`N\XfDEJA+%%F#\hS3QrX94q>4%PL)7a%`7A'fQ,N5DioJXKQ5'=MXXTo)62(oX+O>PB'81jR&%Z`f@2PR#DH&\45Y
%p?Fh.!&\L9F@K2p=%C[DRWfHu6?P(:G.8H`3Ia@.ChQLfh-[9+s+bATr5il+repLmrplQ9Ie`']G@/)aj3)oRQ<o%>bO7X-r7N`P
%RFB>thnB!fh=&,UlK*6ir8mZk?J`EnlHN+3rZ_pMchQ+iT7$Y$f7/;?bPn!GqX1E1^\m,]pHSPC"+U=4lYjK^KFp/X,lWFG\!M-K
%!rR,!*pKL'rVX7)5Pp@_huE6F2dcUVLS);.rnS+@hu0LGs0iO-^\R;5h!B1EJ,Ss*X1QP.^VJS"qUb33J*H'QG<kOZAobk0KF]`s
%Mskr0+7Sa6]DdMp)!S+i"/bCt-O?<)"QZ"a5bPX,k4n+@?fFKNnauCQ5N;_?S*R9XF(,)h4nRXGr6PD.?G?:.qVV;2dnd^QHX?(;
%&)GMIf=:DChu(C(IsUkJh9S:*j1_T2DCDZKi+E51ak&`NMuS3rT<>N(J%k]-q"s02%sW9Q_<8>F"anKDrHCA$>*Kg$ijW!)s8(GZ
%r]9fLe!D`eQ+-_2s1N=9mlkJ4`^d4mo2.%:)isJJ(69"CXu'na$]j?bm6>jCBmZa"Fj^)kO,L<(_65ljFkq($nFbZsYQ(Kcs)5YI
%NVA#lXpq!%FS&?d$gJ_7($q!l_>BqhrdG'd2.d-e3eh#5l2s7idI(#:5N\u,@irsY399@1'Yir4_2EnS<.<Vt5)t%ro[386k<D2*
%RBcdDgrthipuC">6Z3l7q:1BAqRY&r\1E>FqiC(8O(83\B<LTCf2p#<GWl)1Y:94_d5fStl`X5/FrZP,rM0(s#4C5Lp)iZ@s4(2C
%IPQTTgLKeMrr1*EhgFtnbAY,6M#?r7^APm<QS6,NmbNXO5J6gkqO_*.IfJPS+5X\\F,fk]rWNR&MA(I/e[p<Wo:'*9qsEj%pYl(;
%f5\R9Y42#R%r^=>rT:`X-XON9oASfU^V9NG%_ZJ5YHG/+3c+bo_uAZO\*r2Ro'LS1lcASu8,i2=roUEA?U+;IR[F)mDghE@p[>hF
%s5j"Tr5X<Uk'i5$r)3iJqrSE-^+DSI1I(]W?iAf1q=KmN&+;.cV>~>
%AI9_PrivateDataEnd
